bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
2	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
3	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
4	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
5	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
6	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(newStack[newStackSize.size()  ]);  [CE]  not  a  statement  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(newStack[newStackSize.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root);  replaceTop(newStack[newStackSize.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	8	None	replace
7	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(newStack,  stack.size()  ]);  [CE]  not  a  statement  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(newStack,  stack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root);  replaceTop(newStack,  stack.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	8	None	replace
8	[BUG]  [BUGGY]  int[]  newStack  =  getStack(1);  replaceTop(newStack[newStack.size()  ]);  [CE]  not  a  statement  [FE]                          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(1);  replaceTop(newStack[newStack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(1);  replaceTop(newStack[newStack.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	8	None	replace
9	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(newStack[newStack.length  ]);  [CE]  not  a  statement  [FE]                            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(newStack[newStack.length  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root);  replaceTop(newStack[newStack.length  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	8	None	replace
10	[BUG]  [BUGGY]  int[]  newStack  =  getStack(newStack.length);  replaceTop(newStack[newStack.size()  ]);  [CE]  not  a  statement  [FE]                              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(newStack.length);  replaceTop(newStack[newStack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(newStack.length);  replaceTop(newStack[newStack.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	8	None	replace
11	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(newStack,  stack.length  ]);  [CE]  not  a  statement  [FE]                                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(newStack,  stack.length  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root);  replaceTop(newStack,  stack.length  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  not  a  statement	8	None	replace
12	[BUG]  [BUGGY]  reader!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reader!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reader!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	107	None	replace
13	[BUG]  [BUGGY]  parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	107	None	replace
14	[BUG]  [BUGGY]  parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  parent!=    null    &&    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	107	None	replace
15	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(new  int[size()  -  1]);  [CE]  not  a  statement  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(new  int[size()  -  1]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(new  int[size()  -  1]);	          int[]    newStack    =    stack.toArray(new    int[size()    ]);    	non-compiled	[CE]  not  a  statement	108	None	replace
16	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(new  int[stackSize()  ]);  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(new  int[stackSize()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(new  int[stackSize()  ]);	          int[]    newStack    =    stack.toArray(new    int[size()    ]);    	non-compiled	[CE]  not  a  statement	108	None	replace
17	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(new  int[size()  +  1]);  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(new  int[size()  +  1]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(new  int[size()  +  1]);	          int[]    newStack    =    stack.toArray(new    int[size()    ]);    	non-compiled	[CE]  not  a  statement	108	None	replace
18	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(new  int[size()  ],  root);  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(new  int[size()  ],  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(new  int[size()  ],  root);	          int[]    newStack    =    stack.toArray(new    int[size()    ]);    	non-compiled	[CE]  not  a  statement	108	None	replace
19	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
20	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
21	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
22	[BUG]  [BUGGY]  parent  ==  null  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
23	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
24	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  ||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
25	[BUG]  [BUGGY]  ||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  ||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
26	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  ||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
27	[BUG]  [BUGGY]  ||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  ||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
28	[BUG]  [BUGGY]  ||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  ||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
29	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    parent  ==  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  not  a  statement	76	None	add
30	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  not  a  statement	76	None	add
31	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	76	None	add
32	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    parent  ==  null  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	76	None	add
33	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    parent  ==  null  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	76	None	add
34	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  not  a  statement	76	None	add
35	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  not  a  statement  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    parent  ==  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  	non-compiled	[CE]  not  a  statement	76	None	add
36	[BUG]  [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.n ");  [CE]  not  a  statement  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	_reportError( "JSON  must  start  with  an  array  or  an  object.n ");	          _reportError(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  not  a  statement	129	None	replace
37	[BUG]  [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.. ");  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	_reportError( "JSON  must  start  with  an  array  or  an  object.. ");	          _reportError(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  not  a  statement	129	None	replace
38	[BUG]  [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	_reportError( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");	          _reportError(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  not  a  statement	129	None	replace
39	[BUG]  [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.  The  JSON  must  not  be  null. ");  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.  The  JSON  must  not  be  null. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	_reportError( "JSON  must  start  with  an  array  or  an  object.  The  JSON  must  not  be  null. ");	          _reportError(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  not  a  statement	129	None	replace
40	[BUG]  [BUGGY]  ||(root!=  null  &&  root.equals( " ")))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(root!=  null  &&  root.equals( " ")))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(root!=  null  &&  root.equals( " ")))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	130	None	replace
41	[BUG]  [BUGGY]  ||(root!=  null  &&  root.length  >  0)||(root  ==  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(root!=  null  &&  root.length  >  0)||(root  ==  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(root!=  null  &&  root.length  >  0)||(root  ==  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	130	None	replace
42	[BUG]  [BUGGY]  ||(root  ==  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(root  ==  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(root  ==  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	130	None	replace
43	[BUG]  [BUGGY]  ||  root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	130	None	replace
44	[BUG]  [BUGGY]  ||(root!=  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(root!=  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(root!=  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	130	None	replace
45	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	111	None	replace
46	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize()  ]);  [CE]  not  a  statement  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[stackSize()  ]);	          int[]    newStack    =    stack.toArray(newStack[size()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
47	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  +  1]);  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  +  1]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[size()  +  1]);	          int[]    newStack    =    stack.toArray(newStack[size()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
48	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  -  1]);  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  -  1]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[size()  -  1]);	          int[]    newStack    =    stack.toArray(newStack[size()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
49	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  ],  root);  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  ],  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[size()  ],  root);	          int[]    newStack    =    stack.toArray(newStack[size()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
50	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  *  2]);  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  *  2]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[size()  *  2]);	          int[]    newStack    =    stack.toArray(newStack[size()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
51	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  *  size  ]);  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  *  size  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[size()  *  size  ]);	          int[]    newStack    =    stack.toArray(newStack[size()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
52	[BUG]  [BUGGY]  try  ==  true)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  try  ==  true)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	try  ==  true)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	86	None	replace
53	[BUG]  [BUGGY]  try  {  [Delete]  finally  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  try  {  [Delete]  finally  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	try  {  [Delete]  finally  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	86	None	replace
54	[BUG]  [BUGGY]  safeGet(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  safeGet(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	safeGet(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	86	None	replace
55	[BUG]  [BUGGY]  Problem( "JSON  must  start  with  an  array  or  an  object. "))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Problem( "JSON  must  start  with  an  array  or  an  object. "))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Problem( "JSON  must  start  with  an  array  or  an  object. "))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }	  betroffene)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
56	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
57	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
58	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
59	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
60	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  	64	None	add
61	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  [CE]  not  a  statement  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;	  	non-compiled	[CE]  not  a  statement	64	None	add
62	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  not  a  statement	64	None	add
63	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    <    NONEMPTY_DOCUMENT)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	125	None	replace
64	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);	  parent    <    NONEMPTY_DOCUMENT)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	125	None	replace
65	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "  +  root));  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "  +  root));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "  +  root));	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.n   "));    	non-compiled	[CE]  not  a  statement	37	None	replace
66	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent!=  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	90	None	replace
67	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT?>)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT?>)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT?>)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	90	None	replace
68	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Could    not    be    initialized.   ");    	non-compiled	[CE]  not  a  statement	95	None	replace
69	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized: ");  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized: ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized: ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Could    not    be    initialized.   ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
70	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Would  not  be  initialized. ");  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Would  not  be  initialized. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Would  not  be  initialized. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Could    not    be    initialized.   ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
71	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
72	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
73	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
74	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
75	[BUG]  [BUGGY]  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
76	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
77	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
78	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
79	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
80	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  Il  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  Il  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  Il	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
81	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
82	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
83	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(parent))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	128	None	replace
84	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(parent))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
85	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(parent))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
86	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!root.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!root.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!root.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(parent))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
87	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!root.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!root.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!root.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(parent))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
88	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }	          if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
89	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");	          if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
90	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.... ");  }  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.... ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.... ");  }	          if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
91	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	          if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
92	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
93	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
94	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
95	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
96	[BUG]  [BUGGY]  betroffene  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  betroffene  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	betroffene  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
97	[BUG]  [BUGGY]  betroffene)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  betroffene)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	betroffene)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
98	[BUG]  [BUGGY]  betroffene)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  betroffene)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	betroffene)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
99	[BUG]  [BUGGY]  betroffene  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  betroffene  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	betroffene  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
100	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  root);  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack,  root);	          int[]    newStack    =    stack.toArray(newStack);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
101	[BUG]  [BUGGY]  int[]  newStack  =  this.stack.toArray(newStack);  [CE]  not  a  statement  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  this.stack.toArray(newStack);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  this.stack.toArray(newStack);	          int[]    newStack    =    stack.toArray(newStack);    	non-compiled	[CE]  not  a  statement	6	None	replace
102	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  0);  [CE]  not  a  statement  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  0);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack,  0);	          int[]    newStack    =    stack.toArray(newStack);    	non-compiled	[CE]  not  a  statement	6	None	replace
103	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(this.stack);  [CE]  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(this.stack);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(this.stack);	          int[]    newStack    =    stack.toArray(newStack);    	non-compiled	[CE]  	6	None	replace
104	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  context);  [CE]  [FE]                          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  context);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack,  context);	          int[]    newStack    =    stack.toArray(newStack);    	non-compiled	[CE]  	6	None	replace
105	[BUG]  [BUGGY]  int[]  newStack  =  currentStack.toArray(newStack);  [CE]  illegal  start  of  expression  [FE]                            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  currentStack.toArray(newStack);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  currentStack.toArray(newStack);	          int[]    newStack    =    stack.toArray(newStack);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
106	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
107	[BUG]  [BUGGY]  parent  ==  null  ||  parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
108	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	117	None	replace
109	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	117	None	replace
110	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
111	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
112	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
113	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
114	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
115	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
116	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	123	None	replace
117	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	123	None	replace
118	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	123	None	replace
119	[BUG]  [BUGGY]  parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.isEmpty())    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
120	[BUG]  [BUGGY]  parent  ==  null  &&!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.isEmpty())    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
121	[BUG]  [BUGGY]  parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    ==    null    ||!parent.isEmpty())    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
122	[BUG]  [BUGGY]  ||!root.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!root.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!root.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.isEmpty())    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
123	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	31	None	replace
124	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	31	None	replace
125	[BUG]  [BUGGY]  reader  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reader  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reader  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
126	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  stack);  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  stack);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  stack);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
127	[BUG]  [BUGGY]  int[]  newStack  =  getStack(1);  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(1);  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(1);  replaceTop(NONEMPTY_DOCUMENT);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  not  a  statement	5	None	replace
128	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root,  stack);  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root,  stack);  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root,  stack);  replaceTop(NONEMPTY_DOCUMENT);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  not  a  statement	5	None	replace
129	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root,  0);  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root,  0);  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root,  0);  replaceTop(NONEMPTY_DOCUMENT);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  not  a  statement	5	None	replace
130	[BUG]  [BUGGY]  int[]  newStack  =  getStackTrace(root);  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackTrace(root);  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackTrace(root);  replaceTop(NONEMPTY_DOCUMENT);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  not  a  statement	5	None	replace
131	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root,  1);  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]                          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root,  1);  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root,  1);  replaceTop(NONEMPTY_DOCUMENT);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  not  a  statement	5	None	replace
132	[BUG]  [BUGGY]  int[]  newStack  =  getStack();  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]                            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack();  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack();  replaceTop(NONEMPTY_DOCUMENT);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  not  a  statement	5	None	replace
133	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
134	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
135	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
136	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
137	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again!n ");  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again!n ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again!n ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Try    again!   ");    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
138	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again: ");  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again: ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again: ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Try    again!   ");    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
139	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
140	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
141	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
142	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
143	[BUG]  [BUGGY]  SuccessfulJSON  must  start  with  an  array  or  an  object.n ");  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  SuccessfulJSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	SuccessfulJSON  must  start  with  an  array  or  an  object.n ");	  SuccessfulJSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
144	[BUG]  [BUGGY]  SuccessfulJSON  must  start  with  an  array  or  an  object.. ");  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  SuccessfulJSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	SuccessfulJSON  must  start  with  an  array  or  an  object.. ");	  SuccessfulJSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
145	[BUG]  [BUGGY]  SuccessfulJSON  must  start  with  an  object  or  an  array.   ");  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  SuccessfulJSON  must  start  with  an  object  or  an  array.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	SuccessfulJSON  must  start  with  an  object  or  an  array.   ");	  SuccessfulJSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
146	[BUG]  [BUGGY]  SuccessfulJSON  must  start  with  an  array  or  an  object. ",  root);  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  SuccessfulJSON  must  start  with  an  array  or  an  object. ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	SuccessfulJSON  must  start  with  an  array  or  an  object. ",  root);	  SuccessfulJSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
147	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(root)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
148	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(none)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(none)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(none)  {  throw  new  IllegalStateException( " ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(root)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
149	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(this.root)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(this.root)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(this.root)  {  throw  new  IllegalStateException( " ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(root)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
150	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(root  ||  root)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(root  ||  root)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(root  ||  root)  {  throw  new  IllegalStateException( " ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(root)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
151	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(value)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(value)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(value)  {  throw  new  IllegalStateException( " ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(root)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
152	[BUG]  [BUGGY]  betroffene  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  betroffene  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	betroffene  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  if(!lenient)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
153	[BUG]  [BUGGY]  betroffene  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  betroffene  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	betroffene  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
154	[BUG]  [BUGGY]  betroffene  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  betroffene  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	betroffene  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }	  if(!lenient)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
155	[BUG]  [BUGGY]  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
156	[BUG]  [BUGGY]  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
157	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
158	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replacementTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
159	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replacementTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
160	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replacementTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	115	None	replace
161	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replacementTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	115	None	replace
162	[BUG]  [BUGGY]  ||(root!=  null  &&  root.length  >  0)||(root  ==  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(root!=  null  &&  root.length  >  0)||(root  ==  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(root!=  null  &&  root.length  >  0)||(root  ==  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	131	None	replace
163	[BUG]  [BUGGY]  ||(root  ==  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(root  ==  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(root  ==  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	131	None	replace
164	[BUG]  [BUGGY]  While(root!=  null  &&  root.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  While(root!=  null  &&  root.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	While(root!=  null  &&  root.length  >  0)  {  throw  new  IllegalStateException( " ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	131	None	replace
165	[BUG]  [BUGGY]  ||(root!=  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(root!=  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(root!=  null  &&  root.length  >  0)||(root!=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	131	None	replace
166	[BUG]  [BUGGY]  While(root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  While(root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	While(root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	131	None	replace
167	[BUG]  [BUGGY]  ||(root!=  null  &&  root.length  >  0)||(root  >=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(root!=  null  &&  root.length  >  0)||(root  >=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(root!=  null  &&  root.length  >  0)||(root  >=  null  &&  root.length  >  0))  {  throw  new  IllegalStateException( " ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	131	None	replace
168	[BUG]  [BUGGY]  ||(root!=  null  &&  root.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(root!=  null  &&  root.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(root!=  null  &&  root.equals( " ")))  {  throw  new  IllegalStateException( " ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	131	None	replace
169	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	19	None	replace
170	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	19	None	replace
171	[BUG]  [BUGGY]  parent!=  null  &&  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	19	None	replace
172	[BUG]  [BUGGY]  reader!=  null  &&  reader  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reader!=  null  &&  reader  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reader!=  null  &&  reader  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	19	None	replace
173	[BUG]  [BUGGY]  parent  ==  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	19	None	replace
174	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  	39	None	replace
175	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "  +  EMPTY_DOCUMENT);  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "  +  EMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "  +  EMPTY_DOCUMENT);	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  	39	None	replace
176	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  	32	None	add
177	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  	32	None	add
178	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  	32	None	add
179	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  	32	None	add
180	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root,  stackSize);  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root,  stackSize);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root,  stackSize);	          int[]    newStack    =    getStack(root);    	non-compiled	[CE]  	2	None	replace
181	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root,  0);  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root,  0);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root,  0);	          int[]    newStack    =    getStack(root);    	non-compiled	[CE]  	2	None	replace
182	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root,  stack);  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root,  stack);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root,  stack);	          int[]    newStack    =    getStack(root);    	non-compiled	[CE]  	2	None	replace
183	[BUG]  [BUGGY]  int[]  newStack  =  getStackTrace(root);  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackTrace(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackTrace(root);	          int[]    newStack    =    getStack(root);    	non-compiled	[CE]  	2	None	replace
184	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root,  this.serializeNulls);  [CE]  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root,  this.serializeNulls);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root,  this.serializeNulls);	          int[]    newStack    =    getStack(root);    	non-compiled	[CE]  	2	None	replace
185	[BUG]  [BUGGY]  int[]  newStack  =  getStackByName(root);  [CE]  not  a  statement  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackByName(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackByName(root);	          int[]    newStack    =    getStack(root);    	non-compiled	[CE]  not  a  statement	2	None	replace
186	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  	80	None	replace
187	[BUG]  [BUGGY]  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }	  aughtInvalidEmptyException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
188	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	116	None	replace
189	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
190	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
191	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
192	[BUG]  [BUGGY]  parent  ==  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
193	[BUG]  [BUGGY]  parent  ==  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
194	[BUG]  [BUGGY]  parent  ==  null  ||!parent.hasChildren())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.hasChildren())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.hasChildren())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
195	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  start  with  an  array  or  an  object.   ",  root);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  start  with  an  array  or  an  object.   ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.   ",    root);    JSON  must  start  with  an  array  or  an  object.   ",  root);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
196	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  start  with  an  array  or  an  object.. ",  root);  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  start  with  an  array  or  an  object.. ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.   ",    root);    JSON  must  start  with  an  array  or  an  object.. ",  root);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
197	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  start  with  an  array  or  an  object.',  root);  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  start  with  an  array  or  an  object.',  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.   ",    root);    JSON  must  start  with  an  array  or  an  object.',  root);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
198	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  start  with  an  array  or  an  object. ".,  root);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  start  with  an  array  or  an  object. ".,  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.   ",    root);    JSON  must  start  with  an  array  or  an  object. ".,  root);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
199	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  start  with  an  array  or  an  object.  (,  root);  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  start  with  an  array  or  an  object.  (,  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.   ",    root);    JSON  must  start  with  an  array  or  an  object.  (,  root);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
200	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
201	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }	  	non-compiled	[CE]  	11	None	add
202	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  <identifier>  expected  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  <identifier>  expected	11	None	add
203	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.	  	non-compiled	[CE]  	11	None	add
204	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }	  	non-compiled	[CE]  	11	None	add
205	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n   ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n   ");	  	non-compiled	[CE]  	40	None	add
206	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n "));  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n "));	  	non-compiled	[CE]  	40	None	add
207	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n ",);  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n ",);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n ",);	  	non-compiled	[CE]  	40	None	add
208	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n');  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n');  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n');	  	non-compiled	[CE]  	40	None	add
209	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( ",JSON  must  start  with  an  array  or  an  object.n   ");  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( ",JSON  must  start  with  an  array  or  an  object.n   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.wrap( ",JSON  must  start  with  an  array  or  an  object.n   ");	  	non-compiled	[CE]  	40	None	add
210	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	122	None	replace
211	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	122	None	replace
212	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	122	None	replace
213	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  not  a  statement	38	None	add
214	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  Throwables.wrap(new  IllegalStateException( ")JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  Throwables.wrap(new  IllegalStateException( ")JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    Throwables.wrap(new  IllegalStateException( ")JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  not  a  statement	38	None	add
215	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "));  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "));	  	non-compiled	[CE]  not  a  statement	38	None	add
216	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");	  	non-compiled	[CE]  not  a  statement	38	None	add
217	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  JSON  must  start  with  an  array  or  an  object..   ");  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  JSON  must  start  with  an  array  or  an  object..   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object..   ");    JSON  must  start  with  an  array  or  an  object..   ");	  	non-compiled	[CE]  not  a  statement	50	None	add
218	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  JSON  must  start  with  an  array  or  an  object... ");  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  JSON  must  start  with  an  array  or  an  object... ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object..   ");    JSON  must  start  with  an  array  or  an  object... ");	  	non-compiled	[CE]  not  a  statement	50	None	add
219	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  JSON  must  start  with  an  array  or  an  object..  ();  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  JSON  must  start  with  an  array  or  an  object..  ();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object..   ");    JSON  must  start  with  an  array  or  an  object..  ();	  	non-compiled	[CE]  	50	None	add
220	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  JSON  must  start  with  an  array  or  an  object.. ".);  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  JSON  must  start  with  an  array  or  an  object.. ".);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object..   ");    JSON  must  start  with  an  array  or  an  object.. ".);	  	non-compiled	[CE]  	50	None	add
221	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  JSON  must  start  with  an  array  or  an  object.. ".   ");  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  JSON  must  start  with  an  array  or  an  object.. ".   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object..   ");    JSON  must  start  with  an  array  or  an  object.. ".   ");	  	non-compiled	[CE]  	50	None	add
222	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  serialize  nulls  value. ");  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  serialize  nulls  value. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  serialize  nulls  value. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    	non-compiled	[CE]  	81	None	replace
223	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value. ");  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Please    check    that    the    top-level    value    is    not    supported.   ");    	non-compiled	[CE]  	96	None	replace
224	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  can  not  be  supported. ");  [CE]  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  can  not  be  supported. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  can  not  be  supported. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Please    check    that    the    top-level    value    is    not    supported.   ");    	non-compiled	[CE]  	96	None	replace
225	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  should  not  be  supported. ");  [CE]  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  should  not  be  supported. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  should  not  be  supported. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Please    check    that    the    top-level    value    is    not    supported.   ");    	non-compiled	[CE]  	96	None	replace
226	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n   "));  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n   "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.n   "));    Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n   "));	  	non-compiled	[CE]  	36	None	add
227	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( ")JSON  must  start  with  an  array  or  an  object.n   "));  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( ")JSON  must  start  with  an  array  or  an  object.n   "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.n   "));    Throwables.wrap(new  IllegalStateException( ")JSON  must  start  with  an  array  or  an  object.n   "));	  	non-compiled	[CE]  	36	None	add
228	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( ",JSON  must  start  with  an  array  or  an  object.n   "));  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( ",JSON  must  start  with  an  array  or  an  object.n   "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.n   "));    Throwables.wrap(new  IllegalStateException( ",JSON  must  start  with  an  array  or  an  object.n   "));	  	non-compiled	[CE]  	36	None	add
229	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException(, "JSON  must  start  with  an  array  or  an  object.n   "));  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException(, "JSON  must  start  with  an  array  or  an  object.n   "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.n   "));    Throwables.wrap(new  IllegalStateException(, "JSON  must  start  with  an  array  or  an  object.n   "));	  	non-compiled	[CE]  	36	None	add
230	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  JsonToken.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n   "));  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  JsonToken.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n   "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.n   "));    JsonToken.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n   "));	  	non-compiled	[CE]  	36	None	add
231	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "));  [CE]  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.n   "));    Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "));	  	non-compiled	[CE]  	36	None	add
232	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	121	None	replace
233	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	121	None	replace
234	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
235	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
236	[BUG]  [BUGGY]  parent  ==  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
237	[BUG]  [BUGGY]  parent  ==  null  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	100	None	replace
238	[BUG]  [BUGGY]  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	100	None	replace
239	[BUG]  [BUGGY]  reader  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reader  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reader  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	100	None	replace
240	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	100	None	replace
241	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  not  a  statement	26	None	add
242	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  not  a  statement	26	None	add
243	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  not  a  statement	26	None	add
244	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  not  a  statement	26	None	add
245	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize.size()  ]);  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[stackSize.size()  ]);	          int[]    newStack    =    stack.toArray(newStack[stack.size()    ]);    	non-compiled	[CE]  not  a  statement	4	None	replace
246	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stack.length  ]);  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stack.length  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[stack.length  ]);	          int[]    newStack    =    stack.toArray(newStack[stack.size()    ]);    	non-compiled	[CE]  not  a  statement	4	None	replace
247	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize,  stack.size()  ]);  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize,  stack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[stackSize,  stack.size()  ]);	          int[]    newStack    =    stack.toArray(newStack[stack.size()    ]);    	non-compiled	[CE]  not  a  statement	4	None	replace
248	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize.length  ]);  [CE]  not  a  statement  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize.length  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[stackSize.length  ]);	          int[]    newStack    =    stack.toArray(newStack[stack.size()    ]);    	non-compiled	[CE]  not  a  statement	4	None	replace
249	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stack.length()  ]);  [CE]  not  a  statement  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stack.length()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[stack.length()  ]);	          int[]    newStack    =    stack.toArray(newStack[stack.size()    ]);    	non-compiled	[CE]  not  a  statement	4	None	replace
250	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize  -  1]);  [CE]  not  a  statement  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize  -  1]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[stackSize  -  1]);	          int[]    newStack    =    stack.toArray(newStack[stack.size()    ]);    	non-compiled	[CE]  not  a  statement	4	None	replace
251	[BUG]  [BUGGY]  parent!=  null  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	113	None	replace
252	[BUG]  [BUGGY]  parent!=  null  &&!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	113	None	replace
253	[BUG]  [BUGGY]  reader!=  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reader!=  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reader!=  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
254	[BUG]  [BUGGY]  parent!=  null  &&!parent.hasChildren())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&!parent.hasChildren())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&!parent.hasChildren())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	113	None	replace
255	[BUG]  [BUGGY]  parent!=  null  &&!parent.isValue())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&!parent.isValue())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&!parent.isValue())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	113	None	replace
256	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  NONEMPTY_DOCUMENT);	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    	non-compiled	[CE]  not  a  statement	35	None	replace
257	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  root,  NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  root,  NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  root,  NONEMPTY_DOCUMENT);	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    	non-compiled	[CE]  not  a  statement	35	None	replace
258	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  root,  EMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  root,  EMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  root,  EMPTY_DOCUMENT);	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    	non-compiled	[CE]  not  a  statement	35	None	replace
259	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  htmlSafe);  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  htmlSafe);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  htmlSafe);	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    	non-compiled	[CE]  not  a  statement	35	None	replace
260	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT));  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT));	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
261	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
262	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	126	None	replace
263	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	126	None	replace
264	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object..   ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object..   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object..   ");    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object..   ");	  	non-compiled	[CE]  	42	None	add
265	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object... ");  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object... ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object..   ");    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object... ");	  	non-compiled	[CE]  	42	None	add
266	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.wrap( ",JSON  must  start  with  an  array  or  an  object..   ");  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.wrap( ",JSON  must  start  with  an  array  or  an  object..   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object..   ");    Throwables.wrap( ",JSON  must  start  with  an  array  or  an  object..   ");	  	non-compiled	[CE]  	42	None	add
267	[BUG]  [BUGGY]  int[]  newStack  =  getStackSize();  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackSize();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackSize();	          int[]    newStack    =    getStack();    	non-compiled	[CE]  	3	None	replace
268	[BUG]  [BUGGY]  int[]  newStack  =  getStackTrace();  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackTrace();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackTrace();	          int[]    newStack    =    getStack();    	non-compiled	[CE]  	3	None	replace
269	[BUG]  [BUGGY]  int[]  newStack  =  getStackPosition();  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackPosition();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackPosition();	          int[]    newStack    =    getStack();    	non-compiled	[CE]  	3	None	replace
270	[BUG]  [BUGGY]  int[]  newStack  =  getStackInputs();  [CE]  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackInputs();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackInputs();	          int[]    newStack    =    getStack();    	non-compiled	[CE]  	3	None	replace
271	[BUG]  [BUGGY]  int[]  newStack  =  getStackInsertionStack();  [CE]  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackInsertionStack();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackInsertionStack();	          int[]    newStack    =    getStack();    	non-compiled	[CE]  	3	None	replace
272	[BUG]  [BUGGY]  int[]  newStack  =  getStack().length;  [CE]  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack().length;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack().length;	          int[]    newStack    =    getStack();    	non-compiled	[CE]  	3	None	replace
273	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.js. ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.js. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.js. ");	  JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  	49	None	replace
274	[BUG]  [BUGGY]  betroffene  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  betroffene  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	betroffene  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	10	None	replace
275	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	66	None	add
276	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	66	None	add
277	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  	66	None	add
278	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  	66	None	add
279	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;	  	non-compiled	[CE]  	66	None	add
280	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  	66	None	add
281	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	66	None	add
282	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [CE]  [FE]                  MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;	  	non-compiled	[CE]  	66	None	add
283	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ".);  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ".);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object. ".);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  	57	None	replace
284	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	71	None	replace
285	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	71	None	replace
286	[BUG]  [BUGGY]  parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	71	None	replace
287	[BUG]  [BUGGY]  validateNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  validateNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	validateNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  allowNull(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
288	[BUG]  [BUGGY]  validate(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  validate(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	validate(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  allowNull(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
289	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
290	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
291	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
292	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT,  root);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT,  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT,  root);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
293	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  root);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "),  root);	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
294	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ")),  root);  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ")),  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ")),  root);	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
295	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( ")JSON  must  start  with  an  array  or  an  object.   "),  root);  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( ")JSON  must  start  with  an  array  or  an  object.   "),  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    Throwables.wrap(new  IllegalStateException( ")JSON  must  start  with  an  array  or  an  object.   "),  root);	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
296	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ",  root);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ",  root);	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
297	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( ",JSON  must  start  with  an  array  or  an  object.   "),  root);  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( ",JSON  must  start  with  an  array  or  an  object.   "),  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    Throwables.wrap(new  IllegalStateException( ",JSON  must  start  with  an  array  or  an  object.   "),  root);	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
298	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object: "  +  root);  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object: "  +  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object: "  +  root);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object:   ");    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
299	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object: "  +  htmlSafe);  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object: "  +  htmlSafe);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object: "  +  htmlSafe);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object:   ");    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
300	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object: ",  root);  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object: ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object: ",  root);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object:   ");    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
301	[BUG]  [BUGGY]  reader  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reader  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reader  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
302	[BUG]  [BUGGY]  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    ==    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
303	[BUG]  [BUGGY]  reader  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reader  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reader  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    ==    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
304	[BUG]  [BUGGY]  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.n ");  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.n ");	  aughtInvalidEOFInValue(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
305	[BUG]  [BUGGY]  if(root)  {  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)  {  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.   ");  }	  aughtInvalidEOFInValue(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  not  a  statement	136	None	replace
306	[BUG]  [BUGGY]  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object. ",  root);  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object. ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object. ",  root);	  aughtInvalidEOFInValue(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
307	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  <identifier>  expected  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  <identifier>  expected	74	None	add
308	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  <identifier>  expected  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  <identifier>  expected	74	None	add
309	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  ||(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  <identifier>  expected  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  ||(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    ||(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  <identifier>  expected	74	None	add
310	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  ||(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  ||(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    ||(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  not  a  statement	74	None	add
311	[BUG]  [BUGGY]  Thread.currentThread().interrupt(null);  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt(null);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt(null);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  not  a  statement	25	None	replace
312	[BUG]  [BUGGY]  Thread.currentThread().interrupt(this);  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt(this);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt(this);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  not  a  statement	25	None	replace
313	[BUG]  [BUGGY]  Thread.currentThread().join();  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().join();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().join();	  Thread.currentThread().interrupt();    	non-compiled	[CE]  not  a  statement	25	None	replace
314	[BUG]  [BUGGY]  Thread.currentThread().interrupt(newStack[size()  ]);  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt(newStack[size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt(newStack[size()  ]);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  not  a  statement	25	None	replace
315	[BUG]  [BUGGY]  Thread.currentThread().interrupt(throw);  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt(throw);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt(throw);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  	25	None	replace
316	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);	  JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  	53	None	replace
317	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);	  JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  	53	None	replace
318	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT,  root);  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT,  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT,  root);	  JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  	53	None	replace
319	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);	  JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  	53	None	replace
320	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT,  root);  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT,  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT,  root);	  JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  	53	None	replace
321	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);  [CE]  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);	  JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  	53	None	replace
322	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);  [CE]  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);	  JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  	53	None	replace
323	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }	  	non-compiled	[CE]  	78	None	add
324	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }	  	non-compiled	[CE]  	78	None	add
325	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  ||(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [CE]  <identifier>  expected  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  ||(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    ||(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object..   ");  }	  	non-compiled	[CE]  <identifier>  expected	78	None	add
326	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object... ");  }  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object... ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object... ");  }	  	non-compiled	[CE]  	78	None	add
327	[BUG]  [BUGGY]  ||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	105	None	replace
328	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  root);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  root);	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
329	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log( "JSON  must  start  with  an  array  or  an  object.. ",  root);  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log( "JSON  must  start  with  an  array  or  an  object.. ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    Throwables.log( "JSON  must  start  with  an  array  or  an  object.. ",  root);	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
330	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ".,  root);  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ".,  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    Throwables.log( "JSON  must  start  with  an  array  or  an  object. ".,  root);	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
331	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log( ",JSON  must  start  with  an  array  or  an  object.   ",  root);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log( ",JSON  must  start  with  an  array  or  an  object.   ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    Throwables.log( ",JSON  must  start  with  an  array  or  an  object.   ",  root);	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
332	[BUG]  [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array.   ");  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    object    or    an    array.       ");    JSON  must  start  with  an  object  or  an  array.   ");	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
333	[BUG]  [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array.. ");  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array.. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    object    or    an    array.       ");    JSON  must  start  with  an  object  or  an  array.. ");	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
334	[BUG]  [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  a  object  or  an  array.   ");  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  a  object  or  an  array.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    object    or    an    array.       ");    JSON  must  start  with  a  object  or  an  array.   ");	  	non-compiled	[CE]  not  a  statement	54	None	add
335	[BUG]  [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array.  ();  [CE]  <identifier>  expected  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array.  ();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    object    or    an    array.       ");    JSON  must  start  with  an  object  or  an  array.  ();	  	non-compiled	[CE]  <identifier>  expected	54	None	add
336	[BUG]  [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array. ".);  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array. ".);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    object    or    an    array.       ");    JSON  must  start  with  an  object  or  an  array. ".);	  	non-compiled	[CE]  not  a  statement	54	None	add
337	[BUG]  [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array. ".   ");  [CE]  not  a  statement  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array. ".   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    object    or    an    array.       ");    JSON  must  start  with  an  object  or  an  array. ".   ");	  	non-compiled	[CE]  not  a  statement	54	None	add
338	[BUG]  [BUGGY]  reader!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reader!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reader!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	114	None	replace
339	[BUG]  [BUGGY]  aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object.n ");  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object.n ");	  aughtInvalidEmpty(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  not  a  statement	135	None	replace
340	[BUG]  [BUGGY]  if(root)  {  aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)  {  aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object.   ");  }	  aughtInvalidEmpty(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  not  a  statement	135	None	replace
341	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
342	[BUG]  [BUGGY]  parent!=  null  &&  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
343	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();	  	non-compiled	[CE]  not  a  statement	24	None	add
344	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  not  a  statement	24	None	add
345	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  this.serializeNulls  =  newStack[size()  ];  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  this.serializeNulls  =  newStack[size()  ];  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  this.serializeNulls  =  newStack[size()  ];	  	non-compiled	[CE]  not  a  statement	24	None	add
346	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");  break;  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");  break;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");  break;	  	non-compiled	[CE]  not  a  statement	24	None	add
347	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.n ");  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.n ");	  	non-compiled	[CE]  not  a  statement	24	None	add
348	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.. ");  [CE]  not  a  statement  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.. ");	  	non-compiled	[CE]  not  a  statement	24	None	add
349	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
350	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	63	None	replace
351	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  NONEMPTY_DOCUMENT);	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  not  a  statement	88	None	replace
352	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root,  NONEMPTY_DOCUMENT);	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  not  a  statement	88	None	replace
353	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root,  EMPTY_DOCUMENT);	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  not  a  statement	88	None	replace
354	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  not  a  statement	88	None	replace
355	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root,  htmlSafe);  [CE]  not  a  statement  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root,  htmlSafe);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root,  htmlSafe);	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  not  a  statement	88	None	replace
356	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n   ");  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.log( "JSON  must  start  with  an  array  or  an  object.n   ");	  	non-compiled	[CE]  not  a  statement	56	None	add
357	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n ",);  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n ",);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.log( "JSON  must  start  with  an  array  or  an  object.n ",);	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
358	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n');  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n');  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.log( "JSON  must  start  with  an  array  or  an  object.n');	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
359	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n "));  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.log( "JSON  must  start  with  an  array  or  an  object.n "));	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
360	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n. ");  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.log( "JSON  must  start  with  an  array  or  an  object.n. ");	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
361	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
362	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	127	None	replace
363	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	127	None	replace
364	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object..   ");  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object..   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object..   ");    Throwables.log( "JSON  must  start  with  an  array  or  an  object..   ");	  	non-compiled	[CE]  not  a  statement	60	None	add
365	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object... ");  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object... ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object..   ");    Throwables.log( "JSON  must  start  with  an  array  or  an  object... ");	  	non-compiled	[CE]  not  a  statement	60	None	add
366	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object..   ");    Throwables.log( "JSON  must  start  with  an  array  or  an  object. ");	  	non-compiled	[CE]  not  a  statement	60	None	add
367	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.. ".);  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.. ".);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object..   ");    Throwables.log( "JSON  must  start  with  an  array  or  an  object.. ".);	  	non-compiled	[CE]  not  a  statement	60	None	add
368	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( ",JSON  must  start  with  an  array  or  an  object..   ");  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( ",JSON  must  start  with  an  array  or  an  object..   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object..   ");    Throwables.log( ",JSON  must  start  with  an  array  or  an  object..   ");	  	non-compiled	[CE]  not  a  statement	60	None	add
369	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  not  a  statement	72	None	add
370	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  not  a  statement	72	None	add
371	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  	72	None	add
372	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;	  	non-compiled	[CE]  	72	None	add
373	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);	  	non-compiled	[CE]  	72	None	add
374	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  [CE]  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;	  	non-compiled	[CE]  	72	None	add
375	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  }  [CE]  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  }	  	non-compiled	[CE]  	72	None	add
376	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  [CE]  [FE]                  MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;	  	non-compiled	[CE]  	72	None	add
377	[BUG]  [BUGGY]  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	75	None	replace
378	[BUG]  [BUGGY]  ||!serializeNulls)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!serializeNulls)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!serializeNulls)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	75	None	replace
379	[BUG]  [BUGGY]  ||!lenient.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	69	None	replace
380	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	69	None	replace
381	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again: ");  [CE]  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again: ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again: ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.    Try    again!   ");    	non-compiled	[CE]  	103	None	replace
382	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again!”);  [CE]  illegal  start  of  expression  [FE]                          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again!”);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again!”);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.    Try    again!   ");    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
383	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object,  try  again! ");  [CE]  [FE]                            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object,  try  again! ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object,  try  again! ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.    Try    again!   ");    	non-compiled	[CE]  	103	None	replace
384	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
385	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
386	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
387	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
388	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
389	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
390	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
391	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
392	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
393	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=0 ");  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=0 ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=0 ");	  JSON    must    start    with    an    array    or    an    object..   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
394	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=34) ");  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=34) ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=34) ");	  JSON    must    start    with    an    array    or    an    object..   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
395	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=0) ");  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=0) ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=0) ");	  JSON    must    start    with    an    array    or    an    object..   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
396	[BUG]  [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.n ");  break;  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.n ");  break;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	_reportError( "JSON  must  start  with  an  array  or  an  object.n ");  break;	          _reportError(   "JSON    must    start    with    an    array    or    an    object.       ");    break;    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
397	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again, ");  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again, ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again, ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Try    again.   ");    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
398	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again? ");  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again? ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again? ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Try    again.   ");    	non-compiled	[CE]  	94	None	replace
399	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Try    again.   ");    	non-compiled	[CE]  	94	None	replace
400	[BUG]  [BUGGY]  parent.beforeValue())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent.beforeValue())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent.beforeValue())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	118	None	replace
401	[BUG]  [BUGGY]  parent.beforeValue(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent.beforeValue(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent.beforeValue(NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	118	None	replace
402	[BUG]  [BUGGY]  reader  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reader  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reader  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	118	None	replace
403	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  array.   ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  array.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  array.   ");	  JSON    must    start    with    an    object    or    an    array.       ");    	non-compiled	[CE]  	55	None	replace
404	[BUG]  [BUGGY]  JSON  must  start  with  an  int  or  an  array.   ");  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  int  or  an  array.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  int  or  an  array.   ");	  JSON    must    start    with    an    object    or    an    array.       ");    	non-compiled	[CE]  	55	None	replace
405	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  a  string.   ");  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  a  string.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  a  string.   ");	  JSON    must    start    with    an    object    or    an    array.       ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
406	[BUG]  [BUGGY]  mock()  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  mock()  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	mock()  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  mock(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
407	[BUG]  [BUGGY]  parse(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parse(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parse(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  mock(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
408	[BUG]  [BUGGY]  mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  mock(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
409	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  root);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  root);	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
410	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.wrap( ",JSON  must  start  with  an  array  or  an  object.   ",  root);  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.wrap( ",JSON  must  start  with  an  array  or  an  object.   ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    Throwables.wrap( ",JSON  must  start  with  an  array  or  an  object.   ",  root);	  	non-compiled	[CE]  	44	None	add
411	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ",  root);  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ",  root);	  	non-compiled	[CE]  	44	None	add
412	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ".,  root);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ".,  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ".,  root);	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
413	[BUG]  [BUGGY]  if(root)  {  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)  {  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  aughtInvalidEmptyException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
414	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.n   ");  JSON  must  start  with  an  array  or  an  object.n   ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.n   ");  JSON  must  start  with  an  array  or  an  object.n   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.n   ");    JSON  must  start  with  an  array  or  an  object.n   ");	  	non-compiled	[CE]  	48	None	add
415	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.n   ");  JSON  must  start  with  an  array  or  an  object.n. ");  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.n   ");  JSON  must  start  with  an  array  or  an  object.n. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.n   ");    JSON  must  start  with  an  array  or  an  object.n. ");	  	non-compiled	[CE]  	48	None	add
416	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.n   ");  JSON  must  start  with  an  array  or  an  object.n't   ");  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.n   ");  JSON  must  start  with  an  array  or  an  object.n't   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.n   ");    JSON  must  start  with  an  array  or  an  object.n't   ");	  	non-compiled	[CE]  	48	None	add
417	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.n   ");  JSON  must  start  with  an  array  or  an  object.n');  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.n   ");  JSON  must  start  with  an  array  or  an  object.n');  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.n   ");    JSON  must  start  with  an  array  or  an  object.n');	  	non-compiled	[CE]  	48	None	add
418	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	70	None	add
419	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  	70	None	add
420	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  	70	None	add
421	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	70	None	add
422	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;	  	non-compiled	[CE]  not  a  statement	70	None	add
423	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  not  a  statement	70	None	add
424	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
425	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
426	[BUG]  [BUGGY]  replaceTop(NONEMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	replaceTop(NONEMPTY_DOCUMENT);	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
427	[BUG]  [BUGGY]  replaceTop(NONEMPTY_DOCUMENT);  break;  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  replaceTop(NONEMPTY_DOCUMENT);  break;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	replaceTop(NONEMPTY_DOCUMENT);  break;	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
428	[BUG]  [BUGGY]  JsonWriter  out  =  getOutputStream();  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JsonWriter  out  =  getOutputStream();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JsonWriter  out  =  getOutputStream();	          JsonWriter    out    =    getWriter();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
429	[BUG]  [BUGGY]  JsonWriter  out  =  getOutputFile();  [CE]  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JsonWriter  out  =  getOutputFile();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JsonWriter  out  =  getOutputFile();	          JsonWriter    out    =    getWriter();    	non-compiled	[CE]  	7	None	replace
430	[BUG]  [BUGGY]  JsonWriter  out  =  getWriter().write(String.valueOf(root));  [CE]  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JsonWriter  out  =  getWriter().write(String.valueOf(root));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JsonWriter  out  =  getWriter().write(String.valueOf(root));	          JsonWriter    out    =    getWriter();    	non-compiled	[CE]  	7	None	replace
431	[BUG]  [BUGGY]  JsonWriter  out  =  getWriter().write(NONEMPTY_DOCUMENT);  [CE]  [FE]                          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JsonWriter  out  =  getWriter().write(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JsonWriter  out  =  getWriter().write(NONEMPTY_DOCUMENT);	          JsonWriter    out    =    getWriter();    	non-compiled	[CE]  	7	None	replace
432	[BUG]  [BUGGY]  JsonWriter  out  =  getOutputBuffer();  [CE]  [FE]                            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JsonWriter  out  =  getOutputBuffer();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JsonWriter  out  =  getOutputBuffer();	          JsonWriter    out    =    getWriter();    	non-compiled	[CE]  	7	None	replace
433	[BUG]  [BUGGY]  JsonWriter  out  =  getWriter().write('n');  [CE]  [FE]                              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JsonWriter  out  =  getWriter().write('n');  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JsonWriter  out  =  getWriter().write('n');	          JsonWriter    out    =    getWriter();    	non-compiled	[CE]  	7	None	replace
434	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ".);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ".);  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ".);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ".);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ".);    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ".);	  	non-compiled	[CE]  	46	None	add
435	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ".);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ".);  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ".);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ".);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ".);    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ".);	  	non-compiled	[CE]  	46	None	add
436	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ".);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.... ".);  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ".);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.... ".);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ".);    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.... ".);	  	non-compiled	[CE]  	46	None	add
437	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ".);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ".;  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.   ".);  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ".;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ".);    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ".;	  	non-compiled	[CE]  	46	None	add
438	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	16	None	replace
439	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	16	None	replace
440	[BUG]  [BUGGY]  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	16	None	replace
441	[BUG]  [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  &&!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  &&!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	bucket  <  NONEMPTY_DOCUMENT  &&!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  bucket    <    NONEMPTY_DOCUMENT    ||!lenient    &&    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	20	None	replace
442	[BUG]  [BUGGY]  Bucket  <  NONEMPTY_DOCUMENT  ||!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Bucket  <  NONEMPTY_DOCUMENT  ||!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Bucket  <  NONEMPTY_DOCUMENT  ||!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  bucket    <    NONEMPTY_DOCUMENT    ||!lenient    &&    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	20	None	replace
443	[BUG]  [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  ||!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  ||!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	bucket  <  NONEMPTY_DOCUMENT  ||!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  bucket    <    NONEMPTY_DOCUMENT    ||!lenient    &&    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	20	None	replace
444	[BUG]  [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  &&!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  &&!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	bucket  <  NONEMPTY_DOCUMENT  &&!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  bucket    <    NONEMPTY_DOCUMENT    ||!lenient    &&    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	20	None	replace
445	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	68	None	add
446	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	68	None	add
447	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  	68	None	add
448	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  	68	None	add
449	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
450	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
451	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
452	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
453	[BUG]  [BUGGY]  Throwables.log(Level.WARNING,  root, "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(Level.WARNING,  root, "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(Level.WARNING,  root, "JSON  must  start  with  an  array  or  an  object.   ");	  Throwables.log(Level.WARNING,   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
454	[BUG]  [BUGGY]  Throwables.log(Level.WARNING,  sourceName,   "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(Level.WARNING,  sourceName,   "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(Level.WARNING,  sourceName,   "JSON  must  start  with  an  array  or  an  object.   ");	  Throwables.log(Level.WARNING,   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
455	[BUG]  [BUGGY]  reader  ==  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reader  ==  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reader  ==  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
456	[BUG]  [BUGGY]  parent  ==  null  &&!parent.hasChildren())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&!parent.hasChildren())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&!parent.hasChildren())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
457	[BUG]  [BUGGY]  parent  ==  null  &&!parent.isValue())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&!parent.isValue())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&!parent.isValue())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	112	None	replace
458	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again, ");  [CE]  not  a  statement  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again, ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again, ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.    Try    again.   ");    	non-compiled	[CE]  not  a  statement	102	None	replace
459	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again ",  root);  [CE]  not  a  statement  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again ",  root);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.    Try    again.   ");    	non-compiled	[CE]  not  a  statement	102	None	replace
460	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again? ");  [CE]  not  a  statement  [FE]                          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again? ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again? ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.    Try    again.   ");    	non-compiled	[CE]  not  a  statement	102	None	replace
461	[BUG]  [BUGGY]  reader!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reader!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reader!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
462	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  not  a  statement	62	None	add
463	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  not  a  statement	62	None	add
464	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  not  a  statement	62	None	add
465	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;	  	non-compiled	[CE]  not  a  statement	62	None	add
466	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);	  	non-compiled	[CE]  not  a  statement	62	None	add
467	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  [CE]  not  a  statement  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;	  	non-compiled	[CE]  not  a  statement	62	None	add
468	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  }  [CE]  not  a  statement  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  return;  }	  	non-compiled	[CE]  not  a  statement	62	None	add
469	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]                  MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  	62	None	add
470	[BUG]  [BUGGY]  int[]  newStack  =  getStackSize(root);  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackSize(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackSize(root);	          int[]    newStack    =    getStack(root);    	non-compiled	[CE]  not  a  statement	2	None	replace
471	[BUG]  [BUGGY]  int[]  newStack  =  getStackStack(root);  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackStack(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackStack(root);	          int[]    newStack    =    getStack(root);    	non-compiled	[CE]  not  a  statement	2	None	replace
472	[BUG]  [BUGGY]  int[]  newStack  =  getStackPosition(root);  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackPosition(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackPosition(root);	          int[]    newStack    =    getStack(root);    	non-compiled	[CE]  not  a  statement	2	None	replace
473	[BUG]  [BUGGY]  parent  ==  null  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
474	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent.getParent();  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent.getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent.getParent();	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
475	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null;  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null;	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
476	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent();  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent();	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
477	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent.next();  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent.next();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent.next();	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	27	None	replace
478	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent.clone();  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent.clone();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT>  newparent  =  parent.clone();	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	27	None	replace
479	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null;  [CE]  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null;	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	27	None	replace
480	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n't   ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n't   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.log( "JSON  must  start  with  an  array  or  an  object.n't   ");	  	non-compiled	[CE]  	56	None	add
481	[BUG]  [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  ||!htmlSafe  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  ||!htmlSafe  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	bucket  <  NONEMPTY_DOCUMENT  ||!htmlSafe  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  bucket    <    NONEMPTY_DOCUMENT    ||!lenient    &&    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	20	None	replace
482	[BUG]  [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  ||!htmlSafe  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  ||!htmlSafe  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	bucket  <  NONEMPTY_DOCUMENT  ||!htmlSafe  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  bucket    <    NONEMPTY_DOCUMENT    ||!lenient    &&    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	20	None	replace
483	[BUG]  [BUGGY]  MutableToJsonNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  MutableToJsonNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	MutableToJsonNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	130	None	replace
484	[BUG]  [BUGGY]  mock(new  JsonWriter(root)).throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  mock(new  JsonWriter(root)).throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	mock(new  JsonWriter(root)).throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	          if(root!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	130	None	replace
485	[BUG]  [BUGGY]  MutableToJsonNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  MutableToJsonNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	MutableToJsonNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	          if(root!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	130	None	replace
486	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.n   ");  JSON  must  start  with  an  array  or  an  object.n ",  htmlSafe);  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.n   ");  JSON  must  start  with  an  array  or  an  object.n ",  htmlSafe);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.n   ");    JSON  must  start  with  an  array  or  an  object.n ",  htmlSafe);	  	non-compiled	[CE]  	48	None	add
487	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize()  +  1]);  [CE]  not  a  statement  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize()  +  1]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[stackSize()  +  1]);	          int[]    newStack    =    stack.toArray(newStack[size()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
488	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again: "  +  root);  [CE]  not  a  statement  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again: "  +  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again: "  +  root);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.    Try    again!   ");    	non-compiled	[CE]  not  a  statement	103	None	replace
489	[BUG]  [BUGGY]  parent!=  (root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  (root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  (root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  	110	None	replace
490	[BUG]  [BUGGY]  parent!=  (root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  (root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  (root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  break;  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  	110	None	replace
491	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root));  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  root));	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    	non-compiled	[CE]  	35	None	replace
492	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getParent();  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    int  parent  =  getParent();	  	non-compiled	[CE]  not  a  statement	70	None	add
493	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Node  parent  =  getParent();  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Node  parent  =  getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    Node  parent  =  getParent();	  	non-compiled	[CE]  not  a  statement	70	None	add
494	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getParent();  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    Integer  parent  =  getParent();	  	non-compiled	[CE]  not  a  statement	70	None	add
495	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JsonParent  parent  =  getParent();  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JsonParent  parent  =  getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    JsonParent  parent  =  getParent();	  	non-compiled	[CE]  not  a  statement	70	None	add
496	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JSDocInfo  info  =  getJSDocInfo();  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JSDocInfo  info  =  getJSDocInfo();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    JSDocInfo  info  =  getJSDocInfo();	  	non-compiled	[CE]  not  a  statement	70	None	add
497	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(root);  [CE]  not  a  statement  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    int  parent  =  getValue(root);	  	non-compiled	[CE]  not  a  statement	70	None	add
498	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(null);  [CE]  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(null);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    int  parent  =  getValue(null);	  	non-compiled	[CE]  	70	None	add
499	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JSDocInfo  info  =  getJSDocInfo(root);  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JSDocInfo  info  =  getJSDocInfo(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    JSDocInfo  info  =  getJSDocInfo(root);	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
500	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");  replaceTop(NONEMPTY_DOCUMENT);	  	non-compiled	[CE]  not  a  statement	24	None	add
501	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.n ");  replaceTop(NONEMPTY_DOCUMENT);  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.n ");  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.n ");  replaceTop(NONEMPTY_DOCUMENT);	  	non-compiled	[CE]  not  a  statement	24	None	add
502	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");  replaceTop(NONEMPTY_DOCUMENT);  break;  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");  replaceTop(NONEMPTY_DOCUMENT);  break;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  System.err.println( "JSON  must  start  with  an  array  or  an  object.   ");  replaceTop(NONEMPTY_DOCUMENT);  break;	  	non-compiled	[CE]  not  a  statement	24	None	add
503	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  should  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  System.err.println( "JSON  should  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  System.err.println( "JSON  should  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  not  a  statement	24	None	add
504	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getParent();  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    int  parent  =  getParent();	  	non-compiled	[CE]  not  a  statement	66	None	add
505	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getParent();  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    Integer  parent  =  getParent();	  	non-compiled	[CE]  not  a  statement	66	None	add
506	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Node  parent  =  getParent();  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Node  parent  =  getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    Node  parent  =  getParent();	  	non-compiled	[CE]  not  a  statement	66	None	add
507	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JsonParent  parent  =  getParent();  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JsonParent  parent  =  getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    JsonParent  parent  =  getParent();	  	non-compiled	[CE]  not  a  statement	66	None	add
508	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JSDocInfo  info  =  getJSDocInfo();  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JSDocInfo  info  =  getJSDocInfo();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    JSDocInfo  info  =  getJSDocInfo();	  	non-compiled	[CE]  not  a  statement	66	None	add
509	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(root);  [CE]  not  a  statement  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    int  parent  =  getValue(root);	  	non-compiled	[CE]  not  a  statement	66	None	add
510	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(null);  [CE]  not  a  statement  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(null);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    int  parent  =  getValue(null);	  	non-compiled	[CE]  not  a  statement	66	None	add
511	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getValue(root);  [CE]  not  a  statement  [FE]                  MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getValue(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    Integer  parent  =  getValue(root);	  	non-compiled	[CE]  not  a  statement	66	None	add
512	[BUG]  [BUGGY]  parent!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null)  {  throw  new  IllegalStateException( " ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
513	[BUG]  [BUGGY]  While(root!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  While(root!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	While(root!=  null)  {  throw  new  IllegalStateException( " ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
514	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null)  {  throw  new  IllegalStateException( " ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
515	[BUG]  [BUGGY]  While(root!=  null  &&  root.length  >  0)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  <identifier>  expected  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  While(root!=  null  &&  root.length  >  0)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	While(root!=  null  &&  root.length  >  0)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
516	[BUG]  [BUGGY]  if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  <identifier>  expected  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
517	[BUG]  [BUGGY]  if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  <identifier>  expected  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
518	[BUG]  [BUGGY]  if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  <identifier>  expected  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
519	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  <identifier>  expected  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
520	[BUG]  [BUGGY]  if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
521	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
522	[BUG]  [BUGGY]  parent  ==  null  &&!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
523	[BUG]  [BUGGY]  parent  ==  null  &&!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
524	[BUG]  [BUGGY]  safely())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  safely())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	safely())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  	85	None	replace
525	[BUG]  [BUGGY]  mock( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  mock( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	mock( "JSON  must  start  with  an  array  or  an  object.   ");	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  	85	None	replace
526	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  array.n ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  array.n ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  array.n ");	  JSON    must    start    with    an    object    or    an    array.       ");    	non-compiled	[CE]  	55	None	replace
527	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  array.. ");  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  array.. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  array.. ");	  JSON    must    start    with    an    object    or    an    array.       ");    	non-compiled	[CE]  	55	None	replace
528	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	116	None	replace
529	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  root  ==  EMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  root  ==  EMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  root  ==  EMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	116	None	replace
530	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object..   ");    	non-compiled	[CE]  	43	None	replace
531	[BUG]  [BUGGY]  parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	15	None	replace
532	[BUG]  [BUGGY]  parent  ==  null  ||  root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	15	None	replace
533	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT;  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT;	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	92	None	replace
534	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  >=  null;  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  >=  null;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  >=  null;	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	92	None	replace
535	[BUG]  [BUGGY]  parent!=  null  &&!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	113	None	replace
536	[BUG]  [BUGGY]  parent!=  null  &&!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	113	None	replace
537	[BUG]  [BUGGY]  parent  <  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  null  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
538	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  if(!lenient)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
539	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  if(!lenient)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
540	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
541	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cfg/index.json ");  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cfg/index.json ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.cfg/index.json ");	  JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
542	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.json/index.json ");  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.json/index.json ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.json/index.json ");	  JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
543	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.json ");  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.json ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug.json ");	  JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
544	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
545	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
546	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
547	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(htmlSafe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(htmlSafe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(htmlSafe)  {  throw  new  IllegalStateException( " ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(root)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
548	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!root)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!root)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!root)  {  throw  new  IllegalStateException( " ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(root)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
549	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " "));  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " "));  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " "));  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(root)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
550	[BUG]  [BUGGY]  parent  <  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
551	[BUG]  [BUGGY]  parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
552	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n't   ");  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n't   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n't   ");	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
553	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   "  +  root);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   "  +  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   "  +  root);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ".);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
554	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object. ".);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object. ".);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object. ".);	  JSON    must    start    with    an    array    or    an    object..   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
555	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.: ");  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.: ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.: ");	  JSON    must    start    with    an    array    or    an    object..   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
556	[BUG]  [BUGGY]  parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
557	[BUG]  [BUGGY]  ||  htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
558	[BUG]  [BUGGY]  ||  htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
559	[BUG]  [BUGGY]  parent  <  =  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  =  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  =  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
560	[BUG]  [BUGGY]  parent  <  =  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  =  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  =  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    <    NONEMPTY_DOCUMENT)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
561	[BUG]  [BUGGY]  parent  <  =  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  =  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  =  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
562	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " ");  }	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
563	[BUG]  [BUGGY]  Throwables.log(Level.WARNING, "JSON  must  start  with  an  array  or  an  object: ");  [CE]  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(Level.WARNING, "JSON  must  start  with  an  array  or  an  object: ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(Level.WARNING, "JSON  must  start  with  an  array  or  an  object: ");	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object:   ");    	non-compiled	[CE]  	139	None	replace
564	[BUG]  [BUGGY]  Throwables.log2( "JSON  must  start  with  an  array  or  an  object: ");  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log2( "JSON  must  start  with  an  array  or  an  object: ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log2( "JSON  must  start  with  an  array  or  an  object: ");	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object:   ");    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
565	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
566	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Should  not  be  initialized. ");  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Should  not  be  initialized. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Should  not  be  initialized. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Could    not    be    initialized.   ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
567	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Can  not  be  initialized. ");  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Can  not  be  initialized. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Can  not  be  initialized. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Could    not    be    initialized.   ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
568	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  is  start  with  an  array  or  an  object.   ",  root);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  is  start  with  an  array  or  an  object.   ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.   ",    root);    JSON  is  start  with  an  array  or  an  object.   ",  root);	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
569	[BUG]  [BUGGY]  replaceTop(NONEMPTY_DOCUMENT);  return;  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  replaceTop(NONEMPTY_DOCUMENT);  return;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	replaceTop(NONEMPTY_DOCUMENT);  return;	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replacementTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
570	[BUG]  [BUGGY]  htmlSafe.report(JSError.make(root,  NONEMPTY_DOCUMENT));  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  htmlSafe.report(JSError.make(root,  NONEMPTY_DOCUMENT));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	htmlSafe.report(JSError.make(root,  NONEMPTY_DOCUMENT));	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
571	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
572	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
573	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  not  a  statement	88	None	replace
574	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  does  not  exist. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  does  not  exist. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
575	[BUG]  [BUGGY]  if(root)  {  aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)  {  aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  aughtInvalidEmpty(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
576	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
577	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object.   ",  EMPTY_DOCUMENT);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
578	[BUG]  [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	_reportError( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");	          _reportError(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
579	[BUG]  [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  NONEMPTY_DOCUMENT  is  not  supported. ");  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  NONEMPTY_DOCUMENT  is  not  supported. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	_reportError( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  NONEMPTY_DOCUMENT  is  not  supported. ");	          _reportError(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
580	[BUG]  [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  NONEMPTY_DOCUMENT  is  deprecated. ");  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  _reportError( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  NONEMPTY_DOCUMENT  is  deprecated. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	_reportError( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  NONEMPTY_DOCUMENT  is  deprecated. ");	          _reportError(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
581	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
582	[BUG]  [BUGGY]  JsonWriter  out  =  getOutputPeek();  [CE]  <identifier>  expected  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JsonWriter  out  =  getOutputPeek();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JsonWriter  out  =  getOutputPeek();	          JsonWriter    out    =    getWriter();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
583	[BUG]  [BUGGY]  JsonWriter  out  =  getOutput();  [CE]  not  a  statement  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JsonWriter  out  =  getOutput();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JsonWriter  out  =  getOutput();	          JsonWriter    out    =    getWriter();    	non-compiled	[CE]  not  a  statement	7	None	replace
584	[BUG]  [BUGGY]  JsonWriter  out  =  getReader();  [CE]  not  a  statement  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JsonWriter  out  =  getReader();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JsonWriter  out  =  getReader();	          JsonWriter    out    =    getWriter();    	non-compiled	[CE]  not  a  statement	7	None	replace
585	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object..   ");    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ");	  	non-compiled	[CE]  not  a  statement	42	None	add
586	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  _stackSize);  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  _stackSize);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack,  _stackSize);	          int[]    newStack    =    stack.toArray(newStack);    	non-compiled	[CE]  not  a  statement	6	None	replace
587	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  htmlSafe);  [CE]  not  a  statement  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  htmlSafe);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack,  htmlSafe);	          int[]    newStack    =    stack.toArray(newStack);    	non-compiled	[CE]  not  a  statement	6	None	replace
588	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	111	None	replace
589	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  will  be  not  supported. ");  [CE]  not  a  statement  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  will  be  not  supported. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  will  be  not  supported. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Please    check    that    the    top-level    value    is    not    supported.   ");    	non-compiled	[CE]  not  a  statement	96	None	replace
590	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object,  Please  check  that  the  top-level  value  is  not  supported. ");  [CE]  not  a  statement  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object,  Please  check  that  the  top-level  value  is  not  supported. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object,  Please  check  that  the  top-level  value  is  not  supported. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Please    check    that    the    top-level    value    is    not    supported.   ");    	non-compiled	[CE]  not  a  statement	96	None	replace
591	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  can  be  supported. ");  [CE]  not  a  statement  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  can  be  supported. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  can  be  supported. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Please    check    that    the    top-level    value    is    not    supported.   ");    	non-compiled	[CE]  not  a  statement	96	None	replace
592	[BUG]  [BUGGY]  int[]  newStack  =  getStackStack();  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackStack();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackStack();	          int[]    newStack    =    getStack();    	non-compiled	[CE]  not  a  statement	3	None	replace
593	[BUG]  [BUGGY]  parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	109	None	replace
594	[BUG]  [BUGGY]  parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	109	None	replace
595	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	109	None	replace
596	[BUG]  [BUGGY]  Thread.currentThread().interrupt(root);  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt(root);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  not  a  statement	25	None	replace
597	[BUG]  [BUGGY]  Thread.currentThread().interrupt(newStackSize);  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt(newStackSize);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt(newStackSize);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  	25	None	replace
598	[BUG]  [BUGGY]  Thread.currentThread().interrupt(false);  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt(false);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt(false);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  	25	None	replace
599	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  	123	None	replace
600	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  	72	None	add
601	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( "JSONmus  start  with  an  array  or  an  object.n   "));  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( "JSONmus  start  with  an  array  or  an  object.n   "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.n   "));    Throwables.wrap(new  IllegalStateException( "JSONmus  start  with  an  array  or  an  object.n   "));	  	non-compiled	[CE]  	36	None	add
602	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "   "));  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "   "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.n   "));    Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "   "));	  	non-compiled	[CE]  	36	None	add
603	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  root  ==  EMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  root  ==  EMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  root  ==  EMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	122	None	replace
604	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  EMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  EMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  EMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	122	None	replace
605	[BUG]  [BUGGY]  (root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  (root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  mock(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	106	None	replace
606	[BUG]  [BUGGY]  mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");  }	  mock(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	106	None	replace
607	[BUG]  [BUGGY]  int[]  newStack  =  getStack(stack);  replaceTop(newStack[newStack.size()  ]);  [CE]  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(stack);  replaceTop(newStack[newStack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(stack);  replaceTop(newStack[newStack.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  	8	None	replace
608	[BUG]  [BUGGY]  int[]  newStack  =  getStack(newStack,  root.length);  replaceTop(newStack[newStack.size()  ]);  [CE]  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(newStack,  root.length);  replaceTop(newStack[newStack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(newStack,  root.length);  replaceTop(newStack[newStack.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  	8	None	replace
609	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root,  stackSize);  replaceTop(newStack[newStack.size()  ]);  [CE]  [FE]                          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root,  stackSize);  replaceTop(newStack[newStack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root,  stackSize);  replaceTop(newStack[newStack.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  	8	None	replace
610	[BUG]  [BUGGY]  int[]  newStack  =  getStack(newStack,  stack.size()  ]);  [CE]  [FE]                            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(newStack,  stack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(newStack,  stack.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  	8	None	replace
611	[BUG]  [BUGGY]  if(root)  {  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)  {  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  aughtInvalidEOFInValue(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  	136	None	replace
612	[BUG]  [BUGGY]  if(root)  {  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)  {  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  aughtInvalidEOFInValue(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  	136	None	replace
613	[BUG]  [BUGGY]  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  	79	None	replace
614	[BUG]  [BUGGY]  Parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	118	None	replace
615	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object..  ' ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.log( "JSON  must  start  with  an  array  or  an  object..  ' ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object..   ");    Throwables.log( "JSON  must  start  with  an  array  or  an  object..  ' ");	  	non-compiled	[CE]  	60	None	add
616	[BUG]  [BUGGY]  ||  htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	63	None	replace
617	[BUG]  [BUGGY]  parent  ==  null  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	77	None	replace
618	[BUG]  [BUGGY]  parent  ==  null  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	77	None	replace
619	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(new  int[stackSize()  +  1]);  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(new  int[stackSize()  +  1]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(new  int[stackSize()  +  1]);	          int[]    newStack    =    stack.toArray(new    int[size()    ]);    	non-compiled	[CE]  	108	None	replace
620	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(new  int[stackSize()  +  size()  ]);  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(new  int[stackSize()  +  size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(new  int[stackSize()  +  size()  ]);	          int[]    newStack    =    stack.toArray(new    int[size()    ]);    	non-compiled	[CE]  	108	None	replace
621	[BUG]  [BUGGY]  remove(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  remove(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	remove(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  allowNull(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	22	None	replace
622	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT>)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT>)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT>)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  	84	None	replace
623	[BUG]  [BUGGY]  nisipToJson(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  nisipToJson(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	nisipToJson(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  	84	None	replace
624	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT?>)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT?>)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT?>)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  	84	None	replace
625	[BUG]  [BUGGY]  parent!=  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	          if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  	133	None	replace
626	[BUG]  [BUGGY]  parent  ==  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	          if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  	133	None	replace
627	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	          if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  	133	None	replace
628	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	121	None	replace
629	[BUG]  [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array.n ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  start  with  an  object  or  an  array.n ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    object    or    an    array.       ");    JSON  must  start  with  an  object  or  an  array.n ");	  	non-compiled	[CE]  	54	None	add
630	[BUG]  [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  startWith  an  object  or  an  array.   ");  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  object  or  an  array.     ");  JSON  must  startWith  an  object  or  an  array.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    object    or    an    array.       ");    JSON  must  startWith  an  object  or  an  array.   ");	  	non-compiled	[CE]  	54	None	add
631	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  indent);  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  indent);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.   ",  indent);	  JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  	53	None	replace
632	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  next);  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  next);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.   ",  next);	  JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  	53	None	replace
633	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object..   ");    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
634	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " ");  }	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object..   ");    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
635	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(root);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    int  parent  =  getValue(root);	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
636	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JSDocInfo  info  =  getJSDocInfo();  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JSDocInfo  info  =  getJSDocInfo();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    JSDocInfo  info  =  getJSDocInfo();	  	non-compiled	[CE]  not  a  statement	68	None	add
637	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getParent();  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    int  parent  =  getParent();	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
638	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getParent();  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    Integer  parent  =  getParent();	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
639	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getValue(root);  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getValue(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    Integer  parent  =  getValue(root);	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
640	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JSDocInfo  info  =  getJSDocInfo(root);  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JSDocInfo  info  =  getJSDocInfo(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    JSDocInfo  info  =  getJSDocInfo(root);	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
641	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Node  parent  =  getParent();  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Node  parent  =  getParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    Node  parent  =  getParent();	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
642	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue();  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    int  parent  =  getValue();	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
643	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize  *  stack.size()  ]);  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stackSize  *  stack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[stackSize  *  stack.size()  ]);	          int[]    newStack    =    stack.toArray(newStack[stack.size()    ]);    	non-compiled	[CE]  not  a  statement	4	None	replace
644	[BUG]  [BUGGY]  int[]  newStack  =  getStackSize(root);  replaceTop(NONEMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackSize(root);  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackSize(root);  replaceTop(NONEMPTY_DOCUMENT);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
645	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  stackSize);  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  stackSize);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  stackSize);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
646	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  root);  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  root);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
647	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  htmlSafe);  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  htmlSafe);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  htmlSafe);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
648	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "  +  root);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "  +  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   "  +  root);	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
649	[BUG]  [BUGGY]  parent  ==  null  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
650	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
651	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again:   "  +  root);  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again:   "  +  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again:   "  +  root);	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Try    again.   ");    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
652	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ");  break;  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ");  break;  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.   ");  break;	          _reportError(   "JSON    must    start    with    an    array    or    an    object.       ");    break;    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
653	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.   ",  htmlSafe);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
654	[BUG]  [BUGGY]  ||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!htmlSafe  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);	  ||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
655	[BUG]  [BUGGY]  Neighbor  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Neighbor  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Neighbor  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
656	[BUG]  [BUGGY]  safely()  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  safely()  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	safely()  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
657	[BUG]  [BUGGY]  if(root)  {  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)  {  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  aughtInvalidEmptyException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  	134	None	replace
658	[BUG]  [BUGGY]  if(root)  {  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)  {  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  aughtInvalidEmptyException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  not  a  statement	134	None	replace
659	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(value))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(value))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(value))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	100	None	replace
660	[BUG]  [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ",);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ",);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        else        {        replaceTop(NONEMPTY_DOCUMENT);        }        if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ",);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  	28	None	add
661	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  	non-compiled	[CE]  	11	None	add
662	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	11	None	add
663	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	11	None	add
664	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.	  	non-compiled	[CE]  	11	None	add
665	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	11	None	add
666	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [CE]  [FE]              MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }	  	non-compiled	[CE]  	11	None	add
667	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".  [CE]  [FE]                MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object..   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".	  	non-compiled	[CE]  	11	None	add
668	[BUG]  [BUGGY]  if(root)  {  throw  new  InvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root)  {  throw  new  InvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  throw  new  InvalidEmptyException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  aughtInvalidEmptyException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  	137	None	replace
669	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ",  newline());  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ",  newline());  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object. ",  newline());	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  	59	None	replace
670	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getValue();  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getValue();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    Integer  parent  =  getValue();	  	non-compiled	[CE]  	68	None	add
671	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(null);  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(null);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    int  parent  =  getValue(null);	  	non-compiled	[CE]  	68	None	add
672	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  end);  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  end);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.   ",  end);	  JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  	53	None	replace
673	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( ".JSON  must  start  with  an  array  or  an  object.n   "));  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.n   "));  Throwables.wrap(new  IllegalStateException( ".JSON  must  start  with  an  array  or  an  object.n   "));  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.n   "));    Throwables.wrap(new  IllegalStateException( ".JSON  must  start  with  an  array  or  an  object.n   "));	  	non-compiled	[CE]  	36	None	add
674	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
675	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  return;  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
676	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
677	[BUG]  [BUGGY]  >>  [Delete]  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  >>  [Delete]  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	>>  [Delete]	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
678	[BUG]  [BUGGY]  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	}	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
679	[BUG]  [BUGGY]  ==  [Delete]  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ==  [Delete]  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	==  [Delete]	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
680	[BUG]  [BUGGY]  >=  [Delete]  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  >=  [Delete]  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	>=  [Delete]	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
681	[BUG]  [BUGGY]  {  [Delete]  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  {  [Delete]  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	{  [Delete]	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
682	[BUG]  [BUGGY]  betroffene  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  betroffene  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	betroffene	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
683	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n ",  root);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n ",  root);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
684	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
685	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
686	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  	non-compiled	[CE]  	24	None	add
687	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt();  Thread.currentThread().interrupt();  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();    Thread.currentThread().interrupt();  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }	  	non-compiled	[CE]  	24	None	add
688	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replacementTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	115	None	replace
689	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replacementTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	115	None	replace
690	[BUG]  [BUGGY]  mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }	  mock(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  not  a  statement	106	None	replace
691	[BUG]  [BUGGY]  proaspete(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  proaspete(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	proaspete(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  mock(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
692	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n   ");  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.n   ");    throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n   ");	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
693	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( ",JSON  must  start  with  an  array  or  an  object.n   ");  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.n   ");  Throwables.log( ",JSON  must  start  with  an  array  or  an  object.n   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.n   ");    Throwables.log( ",JSON  must  start  with  an  array  or  an  object.n   ");	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
694	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  return;  }  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
695	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
696	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    If(root)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
697	[BUG]  [BUGGY]  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Try    again!   ");    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
698	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
699	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
700	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  /  2]);  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[size()  /  2]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[size()  /  2]);	          int[]    newStack    =    stack.toArray(newStack[size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
701	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
702	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  baseUri);  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  baseUri);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack,  baseUri);	          int[]    newStack    =    stack.toArray(newStack);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
703	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  baseUpperCase);  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  baseUpperCase);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack,  baseUpperCase);	          int[]    newStack    =    stack.toArray(newStack);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
704	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  null);  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack,  null);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack,  null);	          int[]    newStack    =    stack.toArray(newStack);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
705	[BUG]  [BUGGY]  newline();  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  newline();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	newline();	  allowNull(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
706	[BUG]  [BUGGY]  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");	  allowNull(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
707	[BUG]  [BUGGY]  ||(!lenient  &&  NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  NONEMPTY_DOCUMENT))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  ||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
708	[BUG]  [BUGGY]  ||(!lenient  &&  root.equals( " ")))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||(!lenient  &&  root.equals( " ")))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root.equals( " ")))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  ||(!lenient    &&    root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
709	[BUG]  [BUGGY]  if(root  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root  ==  null)  {  throw  new  IllegalStateException( " ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
710	[BUG]  [BUGGY]  try  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  <identifier>  expected  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  try  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	try  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
711	[BUG]  [BUGGY]  aughtException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  <identifier>  expected  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  aughtException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	aughtException( "JSON  must  start  with  an  array  or  an  object.   ");	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
712	[BUG]  [BUGGY]  if(root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  <identifier>  expected  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
713	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object!  Try  again! ");  [CE]  not  a  statement  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object!  Try  again! ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object!  Try  again! ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.    Try    again!   ");    	non-compiled	[CE]  not  a  statement	103	None	replace
714	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
715	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  not  a  statement  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
716	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stack.size()  -  1]);  [CE]  not  a  statement  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stack.size()  -  1]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[stack.size()  -  1]);	          int[]    newStack    =    stack.toArray(newStack[stack.size()    ]);    	non-compiled	[CE]  not  a  statement	4	None	replace
717	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stack.size()  ],  root);  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(newStack[stack.size()  ],  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(newStack[stack.size()  ],  root);	          int[]    newStack    =    stack.toArray(newStack[stack.size()    ]);    	non-compiled	[CE]  	4	None	replace
718	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  newStack);  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  newStack);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  newStack);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  	5	None	replace
719	[BUG]  [BUGGY]  int[]  newStack  =  getStackByName(root);  replaceTop(NONEMPTY_DOCUMENT);  [CE]  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackByName(root);  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackByName(root);  replaceTop(NONEMPTY_DOCUMENT);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  	5	None	replace
720	[BUG]  [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  newStackSize);  [CE]  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  newStackSize);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT,  newStackSize);	          int[]    newStack    =    getStack(root);    replaceTop(NONEMPTY_DOCUMENT);    	non-compiled	[CE]  	5	None	replace
721	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  if(!lenient)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  	12	None	replace
722	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }	  if(!lenient)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  	12	None	replace
723	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	92	None	replace
724	[BUG]  [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ".);  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(   "JSON  must  start  with  an  array  or  an  object..   ");  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ".);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object..   ");    Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ".);	  	non-compiled	[CE]  	42	None	add
725	[BUG]  [BUGGY]  parent!=  null  &&  parent!=  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent!=  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  parent!=  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	19	None	replace
726	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ".);    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	33	None	replace
727	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	29	None	replace
728	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again:  n ");  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again:  n ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again:  n ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Try    again.   ");    	non-compiled	[CE]  	94	None	replace
729	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  	109	None	replace
730	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  	109	None	replace
731	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
732	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(EMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
733	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
734	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  	138	None	replace
735	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  	138	None	replace
736	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( " ");  }	  JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  	49	None	replace
737	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  have  one  top-level  value.   ");  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  have  one  top-level  value.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  have  one  top-level  value.   ");  }	  JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  	49	None	replace
738	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  not  have  one  top-level  value.   ");  }  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  not  have  one  top-level  value.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  not  have  one  top-level  value.   ");  }	  JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  	49	None	replace
739	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  	49	None	replace
740	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	          if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
741	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	          if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
742	[BUG]  [BUGGY]  int[]  newStack  =  getStandardStack();  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStandardStack();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStandardStack();	          int[]    newStack    =    getStack();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
743	[BUG]  [BUGGY]  int[]  newStack  =  getStackEdges();  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackEdges();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackEdges();	          int[]    newStack    =    getStack();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
744	[BUG]  [BUGGY]  int[]  newStack  =  getStackEmptyStack();  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStackEmptyStack();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStackEmptyStack();	          int[]    newStack    =    getStack();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
745	[BUG]  [BUGGY]  Thread.currentThread().interrupt(thread);  [CE]  illegal  start  of  expression  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt(thread);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt(thread);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
746	[BUG]  [BUGGY]  Thread.currentThread().interrupt(newStack[peek()  ]);  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt(newStack[peek()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt(newStack[peek()  ]);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
747	[BUG]  [BUGGY]  Thread.currentThread().interrupt(newStack[stack.size()  ]);  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Thread.currentThread().interrupt(newStack[stack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt(newStack[stack.size()  ]);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
748	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(this.parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!parent.equals(this.parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(this.parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
749	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(this.parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(this.parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(this.parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	127	None	replace
750	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(null))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	127	None	replace
751	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(this.parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(this.parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(this.parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	127	None	replace
752	[BUG]  [BUGGY]  }  else  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  }  else  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	}  else  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
753	[BUG]  [BUGGY]  }  else  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  }  else  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	}  else  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
754	[BUG]  [BUGGY]  >>  [Delete]  else  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                  MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  >>  [Delete]  else  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	>>  [Delete]  else  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	86	None	replace
755	[BUG]  [BUGGY]  [Delete]  else  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  [Delete]  else  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	[Delete]  else  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	86	None	replace
756	[BUG]  [BUGGY]  }  else  if(!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  }  else  if(!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	}  else  if(!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	86	None	replace
757	[BUG]  [BUGGY]  AnnotationTraversal.traverse(compiler, "JSON  must  start  with  an  array  or  an  object. ");  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  AnnotationTraversal.traverse(compiler, "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	AnnotationTraversal.traverse(compiler, "JSON  must  start  with  an  array  or  an  object. ");	          if(root!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	130	None	replace
758	[BUG]  [BUGGY]  aughtInvalidStateException( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  aughtInvalidStateException( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	aughtInvalidStateException( "JSON  must  start  with  an  array  or  an  object. ");	          if(root!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	130	None	replace
759	[BUG]  [BUGGY]  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	          if(root!=    null)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	130	None	replace
760	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	  	non-compiled	[CE]  	72	None	add
761	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  return;  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  return;  }	  	non-compiled	[CE]  	72	None	add
762	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	72	None	add
763	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  	non-compiled	[CE]  	76	None	add
764	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  >  NONEMPTY_ARRAY)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent  >  NONEMPTY_ARRAY)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  parent  >  NONEMPTY_ARRAY)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	10	None	replace
765	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log( ".JSON  must  start  with  an  array  or  an  object.   ",  root);  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log( ".JSON  must  start  with  an  array  or  an  object.   ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    Throwables.log( ".JSON  must  start  with  an  array  or  an  object.   ",  root);	  	non-compiled	[CE]  	58	None	add
766	[BUG]  [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log(. "JSON  must  start  with  an  array  or  an  object.   ",  root);  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log(   "JSON  must  start  with  an  array  or  an  object.   ",  root);  Throwables.log(. "JSON  must  start  with  an  array  or  an  object.   ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ",    root);    Throwables.log(. "JSON  must  start  with  an  array  or  an  object.   ",  root);	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
767	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!htmlSafe)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    ||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	117	None	replace
768	[BUG]  [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient)    {    throw    new    IllegalStateException(     "JSON    must    start    with    an    array    or    an    object.     ");    }    if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)        {        throw        new        IllegalStateException(       "JSON        must        start        with        an        array        or        an        object.       ");        }        if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  	non-compiled	[CE]  	9	None	add
769	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  parent  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  parent!=    null    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	73	None	replace
770	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	66	None	add
771	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  	66	None	add
772	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	  	non-compiled	[CE]  	66	None	add
773	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  	66	None	add
774	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  removeTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  removeTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  removeTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  	66	None	add
775	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  	non-compiled	[CE]  	74	None	add
776	[BUG]  [BUGGY]  Parent  <  NONEMPTY_DOCUMENT  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Parent  <  NONEMPTY_DOCUMENT  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Parent  <  NONEMPTY_DOCUMENT  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	104	None	replace
777	[BUG]  [BUGGY]  parent!=  (root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  (root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  (root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	31	None	replace
778	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  startWith  an  array  or  an  object.   ",  root);  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.   ",  root);  JSON  must  startWith  an  array  or  an  object.   ",  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object.   ",    root);    JSON  must  startWith  an  array  or  an  object.   ",  root);	  	non-compiled	[CE]  	52	None	add
779	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object..   ");    if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	non-compiled	[CE]  	50	None	add
780	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object..   ");    if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  	50	None	add
781	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object..   ");    if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	  	non-compiled	[CE]  	50	None	add
782	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  out.write('n');  }  [CE]  [FE]          MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  out.write('n');  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object..   ");    if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  out.write('n');  }	  	non-compiled	[CE]  	50	None	add
783	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]            MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object..   ");  if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON    must    start    with    an    array    or    an    object..   ");    if(root)  {  JSON  must  start  with  an  array  or  an  object..   ");  }  else  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  	non-compiled	[CE]  	50	None	add
784	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	122	None	replace
785	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  this)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  this)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  root  ==  this)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    	non-compiled	[CE]  	122	None	replace
786	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug).js ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug).js ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.  (see  http://bugs.eclipse.org/bugs/show_bug).js ");	  JSON    must    start    with    an    array    or    an    object..   ");    	non-compiled	[CE]  	51	None	replace
787	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  	84	None	replace
788	[BUG]  [BUGGY]  nisipateNulls(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  nisipateNulls(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	nisipateNulls(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object..   ");    }    	non-compiled	[CE]  	84	None	replace
789	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);	  	non-compiled	[CE]  	38	None	add
790	[BUG]  [BUGGY]  int[]  newStack  =  getStack(stack);  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(stack);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(stack);	          int[]    newStack    =    getStack(root);    	non-compiled	[CE]  	2	None	replace
791	[BUG]  [BUGGY]  int[]  newStack  =  getStack(stack,  root);  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(stack,  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(stack,  root);	          int[]    newStack    =    getStack(root);    	non-compiled	[CE]  	2	None	replace
792	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( "JSONmus  start  with  an  array  or  an  object.   "),  root);  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   "),  root);  Throwables.wrap(new  IllegalStateException( "JSONmus  start  with  an  array  or  an  object.   "),  root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "),    root);    Throwables.wrap(new  IllegalStateException( "JSONmus  start  with  an  array  or  an  object.   "),  root);	  	non-compiled	[CE]  	34	None	add
793	[BUG]  [BUGGY]  parent  ==  null  ||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	15	None	replace
794	[BUG]  [BUGGY]  JsonWriter  out  =  getWriter(root);  [CE]  [FE]                    MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JsonWriter  out  =  getWriter(root);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JsonWriter  out  =  getWriter(root);	          JsonWriter    out    =    getWriter();    	non-compiled	[CE]  	7	None	replace
795	[BUG]  [BUGGY]  JsonWriter  out  =  getOutputFormat();  [CE]  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  JsonWriter  out  =  getOutputFormat();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JsonWriter  out  =  getOutputFormat();	          JsonWriter    out    =    getWriter();    	non-compiled	[CE]  	7	None	replace
796	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  will  be  supported. ");  [CE]  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  will  be  supported. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  will  be  supported. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Please    check    that    the    top-level    value    is    not    supported.   ");    	non-compiled	[CE]  	96	None	replace
797	[BUG]  [BUGGY]  parent  ==  null  ||  parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  ==  null  ||  parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  parent    ==    null    ||!parent.isEmpty())    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  	99	None	replace
798	[BUG]  [BUGGY]  Throwables.log2( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.log2( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log2( "JSON  must  start  with  an  array  or  an  object.   ");	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.n   ");    	non-compiled	[CE]  	57	None	replace
799	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IOException( " ");  }  [CE]  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IOException( " ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IOException( " ");  }	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ".);    	non-compiled	[CE]  	47	None	replace
800	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  parent    <    NONEMPTY_DOCUMENT    ||!parent.equals(root))    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	121	None	replace
801	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	          if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    break;    }    	non-compiled	[CE]  	110	None	replace
802	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(       "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	90	None	replace
803	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again:  n ");  [CE]  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again:  n ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again:  n ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.    Try    again.   ");    	non-compiled	[CE]  	102	None	replace
804	[BUG]  [BUGGY]  reportError( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  reportError( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	reportError( "JSON  must  start  with  an  array  or  an  object. ");	          _reportError(   "JSON    must    start    with    an    array    or    an    object.       ");    	non-compiled	[CE]  	129	None	replace
805	[BUG]  [BUGGY]  int[]  newStack  =  getStack(stack,  root);  replaceTop(newStack[newStack.size()  ]);  [CE]  [FE]                      MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(stack,  root);  replaceTop(newStack[newStack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(stack,  root);  replaceTop(newStack[newStack.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  	8	None	replace
806	[BUG]  [BUGGY]  int[]  newStack  =  getStack(newStack);  replaceTop(newStack[newStack.size()  ]);  [CE]  [FE]                        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(newStack);  replaceTop(newStack[newStack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(newStack);  replaceTop(newStack[newStack.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  	8	None	replace
807	[BUG]  [BUGGY]  int[]  newStack  =  getStack(oldStack);  replaceTop(newStack[newStack.size()  ]);  [CE]  [FE]                          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(oldStack);  replaceTop(newStack[newStack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(oldStack);  replaceTop(newStack[newStack.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  	8	None	replace
808	[BUG]  [BUGGY]  int[]  newStack  =  getStack(newStack,  root.size()  ]);  [CE]  [FE]                            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  getStack(newStack,  root.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  getStack(newStack,  root.size()  ]);	          int[]    newStack    =    getStack(root);    replaceTop(newStack[newStack.size()    ]);    	non-compiled	[CE]  	8	None	replace
809	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  root  ==  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	116	None	replace
810	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||  root  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  parent    <    NONEMPTY_DOCUMENT    &&    parent    ==    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  	116	None	replace
811	[BUG]  [BUGGY]  _throwUnquotedSpace( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  _throwUnquotedSpace( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	_throwUnquotedSpace( "JSON  must  start  with  an  array  or  an  object. ");	  aughtInvalidEmpty(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  	135	None	replace
812	[BUG]  [BUGGY]  if(!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]            MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  if(!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  aughtInvalidEmpty(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  	135	None	replace
813	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(new  int[stack.size()  ]);  [CE]  [FE]        MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(new  int[stack.size()  ]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(new  int[stack.size()  ]);	          int[]    newStack    =    stack.toArray(new    int[size()    ]);    	non-compiled	[CE]  	108	None	replace
814	[BUG]  [BUGGY]  int[]  newStack  =  stack.toArray(new  int[size()  /  2]);  [CE]  [FE]          MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  int[]  newStack  =  stack.toArray(new  int[size()  /  2]);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	int[]  newStack  =  stack.toArray(new  int[size()  /  2]);	          int[]    newStack    =    stack.toArray(new    int[size()    ]);    	non-compiled	[CE]  	108	None	replace
815	[BUG]  [BUGGY]  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");  [CE]  [FE]              MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Could    not    be    initialized.   ");    	non-compiled	[CE]  	95	None	replace
816	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object,  could  not  be  initialized. ");  [CE]  <identifier>  expected  [FE]                MalformedJsonException      [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object,  could  not  be  initialized. ");  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object,  could  not  be  initialized. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.    Could    not    be    initialized.   ");    	non-compiled	[CE]  <identifier>  expected	95	None	replace
817	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JsonParent  parent  =  getValueParent();  [CE]  <identifier>  expected  [FE]    MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  JsonParent  parent  =  getValueParent();  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    JsonParent  parent  =  getValueParent();	  	non-compiled	[CE]  <identifier>  expected	70	None	add
818	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getValue(null);  [CE]  <identifier>  expected  [FE]      MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  Integer  parent  =  getValue(null);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    Integer  parent  =  getValue(null);	  	non-compiled	[CE]  <identifier>  expected	70	None	add
819	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(null,  null);  [CE]  <identifier>  expected  [FE]        MalformedJsonException    [CONTEXT]      private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(       "JSON  must  have  only  one  top-level  value.     ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {      [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.     ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  int  parent  =  getValue(null,  null);  [BUGGY]       "JSON  must  start  with  an  array  or  an  object.     ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=    null    ||    root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.       ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    int  parent  =  getValue(null,  null);	  	non-compiled	[CE]  <identifier>  expected	70	None	add
