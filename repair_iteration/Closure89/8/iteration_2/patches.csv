bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
2	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
3	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
4	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
5	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  newVar.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  newVar.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  newVar.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
6	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    ||    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
7	[BUG]  [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    ||    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
8	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    ||    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
9	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME    	non-compiled	[CE]  not  a  statement	60	None	replace
10	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME    	non-compiled	[CE]  not  a  statement	60	None	replace
11	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME    	non-compiled	[CE]  not  a  statement	60	None	replace
12	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME    	non-compiled	[CE]  not  a  statement	60	None	replace
13	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME    	non-compiled	[CE]  not  a  statement	60	None	replace
14	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getType()  ==  Token.CALL  &&  p.refs.get(0).node.getLastChild().getBooleanPro  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getType()  ==  Token.CALL  &&  p.refs.get(0).node.getLastChild().getBooleanPro  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getType()  ==  Token.CALL  &&  p.refs.get(0).node.getLastChild().getBooleanPro	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME    	non-compiled	[CE]  not  a  statement	60	None	replace
15	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_OBJECT_NAME,  false);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_OBJECT_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_OBJECT_NAME,  false);	  nameNode.putBooleanProp(Node.IS_OBJECT_NAME,    true);    	non-compiled	[CE]  not  a  statement	51	None	replace
16	[BUG]  [BUGGY]  Node.IS_OBJECT_NAME.putBooleanProp(Node.IS_OBJECT_NAME,  false);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node.IS_OBJECT_NAME.putBooleanProp(Node.IS_OBJECT_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node.IS_OBJECT_NAME.putBooleanProp(Node.IS_OBJECT_NAME,  false);	  nameNode.putBooleanProp(Node.IS_OBJECT_NAME,    true);    	non-compiled	[CE]  not  a  statement	51	None	replace
17	[BUG]  [BUGGY]  nameNode.putIntProp(Node.IS_OBJECT_NAME,  true);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putIntProp(Node.IS_OBJECT_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putIntProp(Node.IS_OBJECT_NAME,  true);	  nameNode.putBooleanProp(Node.IS_OBJECT_NAME,    true);    	non-compiled	[CE]  not  a  statement	51	None	replace
18	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_OBJECT_NAME,  true,  parent);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_OBJECT_NAME,  true,  parent);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_OBJECT_NAME,  true,  parent);	  nameNode.putBooleanProp(Node.IS_OBJECT_NAME,    true);    	non-compiled	[CE]  not  a  statement	51	None	replace
19	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
20	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
21	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
22	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
23	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
24	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
25	[BUG]  [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
26	[BUG]  [BUGGY]  if  (parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
27	[BUG]  [BUGGY]  if  (n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
28	[BUG]  [BUGGY]  if(nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
29	[BUG]  [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
30	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
31	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
32	[BUG]  [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
33	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
34	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
35	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
36	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
37	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getLastChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
38	[BUG]  [BUGGY]  if  (n.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (n.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
39	[BUG]  [BUGGY]  Node.IS_CONSTANT_NAME.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node.IS_CONSTANT_NAME.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node.IS_CONSTANT_NAME.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	24	None	replace
40	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTRUCTOR_NAME,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTRUCTOR_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTRUCTOR_NAME,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	24	None	replace
41	[BUG]  [BUGGY]  nameNode.putIntProp(Node.IS_CONSTANT_NAME,  false);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putIntProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putIntProp(Node.IS_CONSTANT_NAME,  false);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	24	None	replace
42	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  Boolean.TRUE);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  Boolean.TRUE);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  Boolean.TRUE);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	24	None	replace
43	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  compiler.reportCodeChange();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  compiler.reportCodeChange();	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
44	[BUG]  [BUGGY]  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
45	[BUG]  [BUGGY]  Node.IS_CONSTANT_NAME.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node.IS_CONSTANT_NAME.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node.IS_CONSTANT_NAME.putBooleanProp(Node.IS_CONSTANT_NAME,  false);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
46	[BUG]  [BUGGY]  if  (parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
47	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
48	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false)||  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false)||  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false)||  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
49	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
50	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
51	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
52	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getType()  ==  Token.NAME  &&  refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
53	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
54	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
55	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	2	None	replace
56	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	2	None	replace
57	[BUG]  [BUGGY]  if(n.refs!=  null  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs!=  null  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs!=  null  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs!=    null    &&    n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
58	[BUG]  [BUGGY]  if(nameNode!=  null  &&  n.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode!=  null  &&  n.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode!=  null  &&  n.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs!=    null    &&    n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
59	[BUG]  [BUGGY]  if(nameNode!=  null  &&  nameNode.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode!=  null  &&  nameNode.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode!=  null  &&  nameNode.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs!=    null    &&    n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
60	[BUG]  [BUGGY]  if(n.refs!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs!=    null    &&    n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
61	[BUG]  [BUGGY]  if(nameNode.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs!=    null    &&    n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
62	[BUG]  [BUGGY]  if(n.refs!=  null  &&  parent.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs!=  null  &&  parent.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs!=  null  &&  parent.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs!=    null    &&    n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
63	[BUG]  [BUGGY]  if  (parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
64	[BUG]  [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(p.node.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	33	None	replace
65	[BUG]  [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(p.node.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	33	None	replace
66	[BUG]  [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(p.node.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	33	None	replace
67	[BUG]  [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N	  if(p.node.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	33	None	replace
68	[BUG]  [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	34	None	replace
69	[BUG]  [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	34	None	replace
70	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	34	None	replace
71	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  alias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NodeUtil.removeChild(parent,  alias);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NodeUtil.removeChild(parent,  alias);	  NodeUtil.removeChild(parent,    numStubs);    	non-compiled	[CE]  not  a  statement	52	None	replace
72	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  addAfter);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NodeUtil.removeChild(parent,  addAfter);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NodeUtil.removeChild(parent,  addAfter);	  NodeUtil.removeChild(parent,    numStubs);    	non-compiled	[CE]  not  a  statement	52	None	replace
73	[BUG]  [BUGGY]  NodeUtil.removeChild(nameNode,  numStubs);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NodeUtil.removeChild(nameNode,  numStubs);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NodeUtil.removeChild(nameNode,  numStubs);	  NodeUtil.removeChild(parent,    numStubs);    	non-compiled	[CE]  not  a  statement	52	None	replace
74	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  numStubs,  addAfter);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NodeUtil.removeChild(parent,  numStubs,  addAfter);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NodeUtil.removeChild(parent,  numStubs,  addAfter);	  NodeUtil.removeChild(parent,    numStubs);    	non-compiled	[CE]  not  a  statement	52	None	replace
75	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NodeUtil.removeChild(parent,  n);	  NodeUtil.removeChild(parent,    numStubs);    	non-compiled	[CE]  not  a  statement	52	None	replace
76	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  numStubs++);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NodeUtil.removeChild(parent,  numStubs++);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NodeUtil.removeChild(parent,  numStubs++);	  NodeUtil.removeChild(parent,    numStubs);    	non-compiled	[CE]  not  a  statement	52	None	replace
77	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  numStubs  +  1);  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NodeUtil.removeChild(parent,  numStubs  +  1);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NodeUtil.removeChild(parent,  numStubs  +  1);	  NodeUtil.removeChild(parent,    numStubs);    	non-compiled	[CE]  not  a  statement	52	None	replace
78	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_OPTIONAL_NAME,  false);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_OPTIONAL_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_OPTIONAL_NAME,  false);	  nameNode.putBooleanProp(Node.IS_OPTIONAL_NAME,    true);    	non-compiled	[CE]  not  a  statement	50	None	replace
79	[BUG]  [BUGGY]  nameNode.putIntProp(Node.IS_OPTIONAL_NAME,  true);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putIntProp(Node.IS_OPTIONAL_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putIntProp(Node.IS_OPTIONAL_NAME,  true);	  nameNode.putBooleanProp(Node.IS_OPTIONAL_NAME,    true);    	non-compiled	[CE]  not  a  statement	50	None	replace
80	[BUG]  [BUGGY]  if(parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	12	None	replace
81	[BUG]  [BUGGY]  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	12	None	replace
82	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	12	None	replace
83	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	12	None	replace
84	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
85	[BUG]  [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
86	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
87	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
88	[BUG]  [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
89	[BUG]  [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
90	[BUG]  [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
91	[BUG]  [BUGGY]  if  (parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	62	None	replace
92	[BUG]  [BUGGY]  if  (parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	36	None	replace
93	[BUG]  [BUGGY]  if(n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(name.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
94	[BUG]  [BUGGY]  if(nameNode.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	17	None	replace
95	[BUG]  [BUGGY]  if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	17	None	replace
96	[BUG]  [BUGGY]  if(name.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(name.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(name.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	17	None	replace
97	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    	non-compiled	[CE]  not  a  statement	25	None	replace
98	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  false);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    	non-compiled	[CE]  not  a  statement	25	None	replace
99	[BUG]  [BUGGY]  if(nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
100	[BUG]  [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(p.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	31	None	replace
101	[BUG]  [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	31	None	replace
102	[BUG]  [BUGGY]  Node  p  =  parent.getNext();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  p  =  parent.getNext();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  p  =  parent.getNext();	  Node    p    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	69	None	replace
103	[BUG]  [BUGGY]  Node  p  =  nameNode.getParent();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  p  =  nameNode.getParent();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  p  =  nameNode.getParent();	  Node    p    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	69	None	replace
104	[BUG]  [BUGGY]  Node  p  =  addAfter.getParent();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  p  =  addAfter.getParent();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  p  =  addAfter.getParent();	  Node    p    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	69	None	replace
105	[BUG]  [BUGGY]  Node  p  =  addAfter.getNext();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  p  =  addAfter.getNext();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  p  =  addAfter.getNext();	  Node    p    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	69	None	replace
106	[BUG]  [BUGGY]  Node  p  =  newVar.getParent();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  p  =  newVar.getParent();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  p  =  newVar.getParent();	  Node    p    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	69	None	replace
107	[BUG]  [BUGGY]  Node  p  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  p  =  parent.getFirstChild();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  p  =  parent.getFirstChild();	  Node    p    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	69	None	replace
108	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  false);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  false);	  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	29	None	replace
109	[BUG]  [BUGGY]  nameNode.putIntProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putIntProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putIntProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true);	  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	29	None	replace
110	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true,  parent);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true,  parent);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true,  parent);	  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	29	None	replace
111	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true,  addAfter);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true,  addAfter);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true,  addAfter);	  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	29	None	replace
112	[BUG]  [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	65	None	replace
113	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	65	None	replace
114	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	13	None	replace
115	[BUG]  [BUGGY]  if(n.refs!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
116	[BUG]  [BUGGY]  if(nameNode.refs!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.refs!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
117	[BUG]  [BUGGY]  if(nameNode.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
118	[BUG]  [BUGGY]  if(nameNode.getFirstChild().node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
119	[BUG]  [BUGGY]  if(nameNode.refs!=  null  &&  nameNode.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.refs!=  null  &&  nameNode.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs!=  null  &&  nameNode.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
120	[BUG]  [BUGGY]  if(nameNode.get(0).node!=  null  &&  nameNode.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.get(0).node!=  null  &&  nameNode.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node!=  null  &&  nameNode.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
121	[BUG]  [BUGGY]  if(nameNode.get(0).node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.get(0).node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node    ==    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
122	[BUG]  [BUGGY]  if(n.refs!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node    ==    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
123	[BUG]  [BUGGY]  if(nameNode.getFirstChild().node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node    ==    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
124	[BUG]  [BUGGY]  if(nameNode.refs!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.refs!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node    ==    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
125	[BUG]  [BUGGY]  if(nameNode.refs.get(0).node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.refs.get(0).node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs.get(0).node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node    ==    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
126	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
127	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
128	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
129	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
130	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
131	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
132	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
133	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
134	[BUG]  [BUGGY]  if(nameNode.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	72	None	replace
135	[BUG]  [BUGGY]  if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	72	None	replace
136	[BUG]  [BUGGY]  if(parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
137	[BUG]  [BUGGY]  if(n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
138	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME),  true)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME),  true)  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME),  true)  {	  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
139	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getFirstChild().getLastChild().getBooleanPro  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getFirstChild().getLastChild().getBooleanPro  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getFirstChild().getLastChild().getBooleanPro	  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
140	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getString().equals(propAlias))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getString().equals(propAlias))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getString().equals(propAlias))  {	  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
141	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  false);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  false);	  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	71	None	replace
142	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_ANDEFINED_WARNING,  false);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_ANDEFINED_WARNING,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_ANDEFINED_WARNING,  false);	  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	71	None	replace
143	[BUG]  [BUGGY]  nameNode.putIntProp(Node.IS_UNDEFINED_WARNING,  true);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putIntProp(Node.IS_UNDEFINED_WARNING,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putIntProp(Node.IS_UNDEFINED_WARNING,  true);	  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	71	None	replace
144	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  true,  parent);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  true,  parent);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  true,  parent);	  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	71	None	replace
145	[BUG]  [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    ||    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
146	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.IS_CONSTANT_NAME)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.IS_CONSTANT_NAME)  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.IS_CONSTANT_NAME)  {	  if(n.getFirstChild().getType()    ==    Token.NAME    ||    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
147	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  addAfter);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  addAfter);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  addAfter);	  Node    nameNode    =    Node.newString(Token.NAME,    propAlias);    	non-compiled	[CE]  not  a  statement	48	None	replace
148	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  n);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  n);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  n);	  Node    nameNode    =    Node.newString(Token.NAME,    propAlias);    	non-compiled	[CE]  not  a  statement	48	None	replace
149	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  parent);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  parent);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  parent);	  Node    nameNode    =    Node.newString(Token.NAME,    propAlias);    	non-compiled	[CE]  not  a  statement	48	None	replace
150	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  newVar);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  newVar);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  newVar);	  Node    nameNode    =    Node.newString(Token.NAME,    propAlias);    	non-compiled	[CE]  not  a  statement	48	None	replace
151	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  numStubs);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  numStubs);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  numStubs);	  Node    nameNode    =    Node.newString(Token.NAME,    propAlias);    	non-compiled	[CE]  not  a  statement	48	None	replace
152	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  addAfter);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  addAfter);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  addAfter);	  Node    nameNode    =    Node.newString(Token.NAME,    propAlias);    	non-compiled	[CE]  not  a  statement	48	None	replace
153	[BUG]  [BUGGY]  int  numStubs++;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs++;  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs++;	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
154	[BUG]  [BUGGY]  int  numStubs  =  nameMap.size();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs  =  nameMap.size();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs  =  nameMap.size();	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
155	[BUG]  [BUGGY]  node.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  node.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	node.putBooleanProp(Node.IS_CONSTANT_NAME,  false);	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
156	[BUG]  [BUGGY]  int  numStubs  =  parent.numStubs();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs  =  parent.numStubs();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs  =  parent.numStubs();	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
157	[BUG]  [BUGGY]  int  numStubs  =  addAfter.length();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs  =  addAfter.length();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs  =  addAfter.length();	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
158	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	73	None	replace
159	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	73	None	replace
160	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	73	None	replace
161	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	73	None	replace
162	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	73	None	replace
163	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	73	None	replace
164	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	73	None	replace
165	[BUG]  [BUGGY]  if(nameNode.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
166	[BUG]  [BUGGY]  if(nameNode.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
167	[BUG]  [BUGGY]  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
168	[BUG]  [BUGGY]  if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
169	[BUG]  [BUGGY]  if(parent.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
170	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	75	None	replace
171	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	75	None	replace
172	[BUG]  [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	75	None	replace
173	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	75	None	replace
174	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
175	[BUG]  [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
176	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
177	[BUG]  [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
178	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
179	[BUG]  [BUGGY]  if  (n.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (n.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	57	None	replace
180	[BUG]  [BUGGY]  if  (n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
181	[BUG]  [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getType()  ==  Token.NAME  &&  p.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	54	None	replace
182	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	54	None	replace
183	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	54	None	replace
184	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	54	None	replace
185	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	54	None	replace
186	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  ||  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getType()  ==  Token.NAME  ||  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  ||  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	54	None	replace
187	[BUG]  [BUGGY]  if(n.refs.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	53	None	replace
188	[BUG]  [BUGGY]  if(n.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	53	None	replace
189	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	53	None	replace
190	[BUG]  [BUGGY]  if(n.refs.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	53	None	replace
191	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,  false);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_PLAIN_NAME,  false);	  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,    true);    	non-compiled	[CE]  not  a  statement	68	None	replace
192	[BUG]  [BUGGY]  Node.IS_PLAIN_NAME.putBooleanProp(Node.IS_PLAIN_NAME,  false);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node.IS_PLAIN_NAME.putBooleanProp(Node.IS_PLAIN_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node.IS_PLAIN_NAME.putBooleanProp(Node.IS_PLAIN_NAME,  false);	  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,    true);    	non-compiled	[CE]  not  a  statement	68	None	replace
193	[BUG]  [BUGGY]  nameNode.putIntProp(Node.IS_PLAIN_NAME,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putIntProp(Node.IS_PLAIN_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putIntProp(Node.IS_PLAIN_NAME,  true);	  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,    true);    	non-compiled	[CE]  not  a  statement	68	None	replace
194	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,  true));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,  true));  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_PLAIN_NAME,  true));	  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,    true);    	non-compiled	[CE]  not  a  statement	68	None	replace
195	[BUG]  [BUGGY]  if(numStubs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(numStubs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(numStubs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
196	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias,  parent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias,  parent);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  alias,  parent);	  Node    nameNode    =    Node.newString(Token.NAME,    alias);    	non-compiled	[CE]  not  a  statement	49	None	replace
197	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  n);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  n);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  n);	  Node    nameNode    =    Node.newString(Token.NAME,    alias);    	non-compiled	[CE]  not  a  statement	49	None	replace
198	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias,  addAfter);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias,  addAfter);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  alias,  addAfter);	  Node    nameNode    =    Node.newString(Token.NAME,    alias);    	non-compiled	[CE]  not  a  statement	49	None	replace
199	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias,  propAlias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias,  propAlias);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  alias,  propAlias);	  Node    nameNode    =    Node.newString(Token.NAME,    alias);    	non-compiled	[CE]  not  a  statement	49	None	replace
200	[BUG]  [BUGGY]  if(nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
201	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
202	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	32	None	replace
203	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  ||  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	32	None	replace
204	[BUG]  [BUGGY]  if(refs.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(refs.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(refs.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	32	None	replace
205	[BUG]  [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.node.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	41	None	replace
206	[BUG]  [BUGGY]  if(p.node.getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.node.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	41	None	replace
207	[BUG]  [BUGGY]  if(refs.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(refs.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(refs.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.node.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	41	None	replace
208	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	40	None	replace
209	[BUG]  [BUGGY]  if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	15	None	replace
210	[BUG]  [BUGGY]  if(parent.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	15	None	replace
211	[BUG]  [BUGGY]  if(name.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(name.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(name.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	15	None	replace
212	[BUG]  [BUGGY]  if(p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	15	None	replace
213	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  numStubs++;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  numStubs++;  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  numStubs++;	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    numStubs++;    	non-compiled	[CE]  not  a  statement	28	None	replace
214	[BUG]  [BUGGY]  Node.IS_CONSTANT_NAME.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  numStubs++;  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node.IS_CONSTANT_NAME.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  numStubs++;  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node.IS_CONSTANT_NAME.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  numStubs++;	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    numStubs++;    	non-compiled	[CE]  not  a  statement	28	None	replace
215	[BUG]  [BUGGY]  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  numStubs++;  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  numStubs++;  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	node.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  numStubs++;	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    numStubs++;    	non-compiled	[CE]  not  a  statement	28	None	replace
216	[BUG]  [BUGGY]  if  (parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	37	None	replace
217	[BUG]  [BUGGY]  if  (n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	37	None	replace
218	[BUG]  [BUGGY]  nameNode.putIntProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putIntProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putIntProp(Node.IS_CONSTANT_NAME,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
219	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTRUCTOR_NAME,  false);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTRUCTOR_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTRUCTOR_NAME,  false);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
220	[BUG]  [BUGGY]  int  numStubs  =  nameNode.size();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs  =  nameNode.size();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs  =  nameNode.size();	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
221	[BUG]  [BUGGY]  int  numStubs  =  parent.numStubs;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs  =  parent.numStubs;  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs  =  parent.numStubs;	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
222	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getChildCount();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs  =  nameNode.getChildCount();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs  =  nameNode.getChildCount();	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
223	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getCount();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs  =  nameNode.getCount();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs  =  nameNode.getCount();	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
224	[BUG]  [BUGGY]  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  false);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	26	None	replace
225	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	65	None	replace
226	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
227	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
228	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
229	[BUG]  [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	34	None	replace
230	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  numStubs-1);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NodeUtil.removeChild(parent,  numStubs-1);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NodeUtil.removeChild(parent,  numStubs-1);	  NodeUtil.removeChild(parent,    numStubs);    	non-compiled	[CE]  not  a  statement	52	None	replace
231	[BUG]  [BUGGY]  if(p.refs!=  null  &&  p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs!=  null  &&  p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs!=  null  &&  p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
232	[BUG]  [BUGGY]  Node  p  =  node.getParent();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  p  =  node.getParent();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  p  =  node.getParent();	  Node    p    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	69	None	replace
233	[BUG]  [BUGGY]  Node  p  =  parent.getPrevious();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  p  =  parent.getPrevious();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  p  =  parent.getPrevious();	  Node    p    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	69	None	replace
234	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(1).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(1).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(1).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	32	None	replace
235	[BUG]  [BUGGY]  if  (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  nameNode.getString().equals(propAlias))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  nameNode.getString().equals(propAlias))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  nameNode.getString().equals(propAlias))  {	  if    (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	20	None	replace
236	[BUG]  [BUGGY]  nameNode.setBooleanProp(Node.IS_PLAIN_NAME,  false);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.setBooleanProp(Node.IS_PLAIN_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.setBooleanProp(Node.IS_PLAIN_NAME,  false);	  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,    true);    	non-compiled	[CE]  not  a  statement	68	None	replace
237	[BUG]  [BUGGY]  nameNode.putProp(Node.IS_PLAIN_NAME,  false);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putProp(Node.IS_PLAIN_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putProp(Node.IS_PLAIN_NAME,  false);	  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,    true);    	non-compiled	[CE]  not  a  statement	68	None	replace
238	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	53	None	replace
239	[BUG]  [BUGGY]  if(n.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	53	None	replace
240	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_PLACE_NAME,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_PLACE_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_PLACE_NAME,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
241	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_UNKNOWN_PROP,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_UNKNOWN_PROP,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_UNKNOWN_PROP,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
242	[BUG]  [BUGGY]  nameNode.putProp(Node.IS_CONSTANT_NAME,  false);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putProp(Node.IS_CONSTANT_NAME,  false);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
243	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
244	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME),  true)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME),  true)  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME),  true)  {	  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
245	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
246	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  true);	  Node    nameNode    =    Node.newString(Token.NAME,    propAlias);    	non-compiled	[CE]  not  a  statement	48	None	replace
247	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  false);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  false);	  Node    nameNode    =    Node.newString(Token.NAME,    propAlias);    	non-compiled	[CE]  not  a  statement	48	None	replace
248	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(alias,  propAlias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(alias,  propAlias);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(alias,  propAlias);	  Node    nameNode    =    Node.newString(Token.NAME,    propAlias);    	non-compiled	[CE]  not  a  statement	48	None	replace
249	[BUG]  [BUGGY]  nameNode.setBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.setBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.setBooleanProp(Node.IS_CONSTANT_NAME,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	24	None	replace
250	[BUG]  [BUGGY]  NameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	24	None	replace
251	[BUG]  [BUGGY]  nameNode.putProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putProp(Node.IS_CONSTANT_NAME,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	24	None	replace
252	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(p.node.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	33	None	replace
253	[BUG]  [BUGGY]  if  (node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
254	[BUG]  [BUGGY]  if  (nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
255	[BUG]  [BUGGY]  if  (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  nameNode.getString().equals(propAlias))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  nameNode.getString().equals(propAlias))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  nameNode.getString().equals(propAlias))  {	  if    (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
256	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	12	None	replace
257	[BUG]  [BUGGY]  if  (nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	62	None	replace
258	[BUG]  [BUGGY]  if  (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false)||  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	62	None	replace
259	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
260	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false)  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false)	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
261	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
262	[BUG]  [BUGGY]  if(n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
263	[BUG]  [BUGGY]  if  (n.get(0).node!=  null  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (n.get(0).node!=  null  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.get(0).node!=  null  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	22	None	replace
264	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
265	[BUG]  [BUGGY]  nameNode.setBooleanProp(Node.IS_UNDEFINED_WARNING,  false);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.setBooleanProp(Node.IS_UNDEFINED_WARNING,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.setBooleanProp(Node.IS_UNDEFINED_WARNING,  false);	  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	71	None	replace
266	[BUG]  [BUGGY]  nameNode.putProp(Node.IS_UNDEFINED_WARNING,  true);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putProp(Node.IS_UNDEFINED_WARNING,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putProp(Node.IS_UNDEFINED_WARNING,  true);	  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	71	None	replace
267	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME    	non-compiled	[CE]  not  a  statement	60	None	replace
268	[BUG]  [BUGGY]  if(node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME    	non-compiled	[CE]  not  a  statement	60	None	replace
269	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME    	non-compiled	[CE]  not  a  statement	60	None	replace
270	[BUG]  [BUGGY]  if  (nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
271	[BUG]  [BUGGY]  if  (n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
272	[BUG]  [BUGGY]  if(node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
273	[BUG]  [BUGGY]  if(node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
274	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	73	None	replace
275	[BUG]  [BUGGY]  if(p.refs!=  null  &&  p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs!=  null  &&  p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs!=  null  &&  p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_N	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	73	None	replace
276	[BUG]  [BUGGY]  if(n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	17	None	replace
277	[BUG]  [BUGGY]  if(n.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	17	None	replace
278	[BUG]  [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.node.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	41	None	replace
279	[BUG]  [BUGGY]  if(n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	72	None	replace
280	[BUG]  [BUGGY]  if(n.refs.get(0).node  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0).node  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	72	None	replace
281	[BUG]  [BUGGY]  if  (n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
282	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	2	None	replace
283	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	2	None	replace
284	[BUG]  [BUGGY]  if(node.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(node.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(node.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
285	[BUG]  [BUGGY]  if(parent.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
286	[BUG]  [BUGGY]  if(n.refs  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node    ==    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
287	[BUG]  [BUGGY]  if(n.refs.get(0).node  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0).node  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node    ==    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
288	[BUG]  [BUGGY]  if(n.get(0).node!=  null  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.get(0).node!=  null  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.get(0).node!=  null  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
289	[BUG]  [BUGGY]  if(n.refs  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
290	[BUG]  [BUGGY]  if(nameNode.refs!=  null  &&  nameNode.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.refs!=  null  &&  nameNode.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs!=  null  &&  nameNode.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
291	[BUG]  [BUGGY]  if(parent.refs!=  null  &&  parent.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.refs!=  null  &&  parent.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.refs!=  null  &&  parent.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
292	[BUG]  [BUGGY]  if(nameNode.refs!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.refs!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
293	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(1).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(1).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(1).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    ||    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
294	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(n.getFirstChild().getType()    ==    Token.NAME    ||    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
295	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	75	None	replace
296	[BUG]  [BUGGY]  if  (nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	36	None	replace
297	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_UNKNOWN_WARNING,  true);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_UNKNOWN_WARNING,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_UNKNOWN_WARNING,  true);	  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	29	None	replace
298	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_WARNING,  true);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_WARNING,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_WARNING,  true);	  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	29	None	replace
299	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
300	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getType()  ==  Token.NAME  &&  parent.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
301	[BUG]  [BUGGY]  if(p.refs!=  null  &&  p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs!=  null  &&  p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs!=  null  &&  p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
302	[BUG]  [BUGGY]  if(node!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(node!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(node!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs!=    null    &&    n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
303	[BUG]  [BUGGY]  if(n.refs!=  null  &&  n.refs.get(1).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs!=  null  &&  n.refs.get(1).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs!=  null  &&  n.refs.get(1).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs!=    null    &&    n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
304	[BUG]  [BUGGY]  if(n.refs!=  null  &&  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs!=  null  &&  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs!=  null  &&  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs!=    null    &&    n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
305	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  alias,  true);	  Node    nameNode    =    Node.newString(Token.NAME,    alias);    	non-compiled	[CE]  not  a  statement	49	None	replace
306	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias,  false);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  alias,  false);	  Node    nameNode    =    Node.newString(Token.NAME,    alias);    	non-compiled	[CE]  not  a  statement	49	None	replace
307	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	40	None	replace
308	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getString().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getString().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getString().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	45	None	replace
309	[BUG]  [BUGGY]  if(nameNode.get(0).node!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.get(0).node!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node!=  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	13	None	replace
310	[BUG]  [BUGGY]  if(nameNode.get(0).node  ==  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.get(0).node  ==  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node  ==  null  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	13	None	replace
311	[BUG]  [BUGGY]  if(p.node!=  null  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node!=  null  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node!=  null  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	15	None	replace
312	[BUG]  [BUGGY]  if(p.node  ==  null  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node  ==  null  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node  ==  null  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	15	None	replace
313	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
314	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME),  false)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME),  false)  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME),  false)  {	  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
315	[BUG]  [BUGGY]  if(nameNode.get(0).node!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.get(0).node!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node!=  null  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
316	[BUG]  [BUGGY]  if(node.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(node.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(node.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
317	[BUG]  [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	54	None	replace
318	[BUG]  [BUGGY]  if  (n.get(0).node!=  null  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (n.get(0).node!=  null  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.get(0).node!=  null  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
319	[BUG]  [BUGGY]  if  (n.get(0).node  ==  null  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if  (n.get(0).node  ==  null  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.get(0).node  ==  null  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
320	[BUG]  [BUGGY]  if(node.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(node.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(node.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	16	None	replace
321	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_ALIASING_NAME,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_ALIASING_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_ALIASING_NAME,  true);	  nameNode.putBooleanProp(Node.IS_OPTIONAL_NAME,    true);    	non-compiled	[CE]  not  a  statement	50	None	replace
322	[BUG]  [BUGGY]  if(parent.refs!=  null  &&  parent.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.refs!=  null  &&  parent.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.refs!=  null  &&  parent.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
323	[BUG]  [BUGGY]  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    	non-compiled	[CE]  not  a  statement	25	None	replace
324	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  numStubs.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  numStubs.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  numStubs.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    	non-compiled	[CE]  not  a  statement	25	None	replace
325	[BUG]  [BUGGY]  if(n.refs.get(0)!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0)!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0)!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
326	[BUG]  [BUGGY]  if(n.refs.get(0)  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0)  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0)  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
327	[BUG]  [BUGGY]  if(nameNode!=  null  &&  n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode!=  null  &&  n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode!=  null  &&  n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
328	[BUG]  [BUGGY]  if(n.refs.get(0)!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0)!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0)!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
329	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(p.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
330	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
331	[BUG]  [BUGGY]  if(numStubs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(numStubs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(numStubs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	16	None	replace
332	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	73	None	replace
333	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	73	None	replace
334	[BUG]  [BUGGY]  if(name.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(name.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(name.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(name.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
335	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
336	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.VAR  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.VAR  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.VAR  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
337	[BUG]  [BUGGY]  if(name.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(name.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(name.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	72	None	replace
338	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	32	None	replace
339	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.VAR  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.VAR  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.VAR  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
340	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.BLOCK  ||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.BLOCK  ||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.BLOCK  ||  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
341	[BUG]  [BUGGY]  nameNode.putProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  false);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  false);	  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	29	None	replace
342	[BUG]  [BUGGY]  nameNode.putProp(Node.IS_OPTIONAL_NAME,  false);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putProp(Node.IS_OPTIONAL_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putProp(Node.IS_OPTIONAL_NAME,  false);	  nameNode.putBooleanProp(Node.IS_OPTIONAL_NAME,    true);    	non-compiled	[CE]  not  a  statement	50	None	replace
343	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
344	[BUG]  [BUGGY]  if(alias.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(alias.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(alias.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	12	None	replace
345	[BUG]  [BUGGY]  nameNode.putIntProp(Node.IS_CONSTANT_NAME,  0);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putIntProp(Node.IS_CONSTANT_NAME,  0);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putIntProp(Node.IS_CONSTANT_NAME,  0);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	24	None	replace
346	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
347	[BUG]  [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(p.node.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	33	None	replace
348	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  ||  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    ||    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
349	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    ||    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
350	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  numStubs.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  numStubs.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  numStubs.putBooleanProp(Node.IS_CONSTANT_NAME,  false);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,    false);    	non-compiled	[CE]  not  a  statement	26	None	replace
351	[BUG]  [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	34	None	replace
352	[BUG]  [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	34	None	replace
353	[BUG]  [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_N	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	34	None	replace
354	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  parent.getFirstChild().getString().equals(propAlias))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  parent.getFirstChild().getString().equals(propAlias))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)||  parent.getFirstChild().getString().equals(propAlias))  {	  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
355	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	22	None	replace
356	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.VAR  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.VAR  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.VAR  &&  n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	22	None	replace
357	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
358	[BUG]  [BUGGY]  if(p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME    	non-compiled	[CE]  not  a  statement	60	None	replace
359	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME    	non-compiled	[CE]  not  a  statement	60	None	replace
360	[BUG]  [BUGGY]  if(p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	65	None	replace
361	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	65	None	replace
362	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	65	None	replace
363	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	53	None	replace
364	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  alias);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  propAlias,  alias);	  Node    nameNode    =    Node.newString(Token.NAME,    propAlias);    	non-compiled	[CE]  not  a  statement	48	None	replace
365	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
366	[BUG]  [BUGGY]  if(parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
367	[BUG]  [BUGGY]  nameNode.putIntProp(Node.IS_PLAIN_NAME,  0);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putIntProp(Node.IS_PLAIN_NAME,  0);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putIntProp(Node.IS_PLAIN_NAME,  0);	  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,    true);    	non-compiled	[CE]  not  a  statement	68	None	replace
368	[BUG]  [BUGGY]  nameNode.putProp(Node.IS_PLAIN_NAME,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putProp(Node.IS_PLAIN_NAME,  true);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putProp(Node.IS_PLAIN_NAME,  true);	  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,    true);    	non-compiled	[CE]  not  a  statement	68	None	replace
369	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias  +  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias  +  1);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  propAlias  +  1);	  Node    nameNode    =    Node.newString(Token.NAME,    alias);    	non-compiled	[CE]  not  a  statement	49	None	replace
370	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias  +  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias  +  1);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  alias  +  1);	  Node    nameNode    =    Node.newString(Token.NAME,    alias);    	non-compiled	[CE]  not  a  statement	49	None	replace
371	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	2	None	replace
372	[BUG]  [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(p.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	31	None	replace
373	[BUG]  [BUGGY]  if(numStubs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(numStubs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(numStubs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	17	None	replace
374	[BUG]  [BUGGY]  if(n.get(0)!=  null  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.get(0)!=  null  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.get(0)!=  null  &&  n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
375	[BUG]  [BUGGY]  if(n.get(0)  ==  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.get(0)  ==  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.get(0)  ==  parent.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
376	[BUG]  [BUGGY]  if(node.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(node.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(node.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
377	[BUG]  [BUGGY]  nameNode.putProp(Node.IS_OBJECT_NAME,  false);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putProp(Node.IS_OBJECT_NAME,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putProp(Node.IS_OBJECT_NAME,  false);	  nameNode.putBooleanProp(Node.IS_OBJECT_NAME,    true);    	non-compiled	[CE]  not  a  statement	51	None	replace
378	[BUG]  [BUGGY]  if(n.refs.get(0).equals(alias)&&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0).equals(alias)&&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).equals(alias)&&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node    ==    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
379	[BUG]  [BUGGY]  if(n.refs.get(0)  ==  null  ||  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0)  ==  null  ||  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0)  ==  null  ||  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node    ==    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
380	[BUG]  [BUGGY]  if(n.refs.get(0)  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0)  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0)  ==  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node    ==    null    &&    n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
381	[BUG]  [BUGGY]  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	75	None	replace
382	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)    	non-compiled	[CE]  not  a  statement	75	None	replace
383	[BUG]  [BUGGY]  if(p.node.getFirstChild()!=  null  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getFirstChild()!=  null  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild()!=  null  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	15	None	replace
384	[BUG]  [BUGGY]  if(nameNode!=  null  &&  n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode!=  null  &&  n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode!=  null  &&  n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
385	[BUG]  [BUGGY]  if(nameNode!=  null  &&  nameNode.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode!=  null  &&  nameNode.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode!=  null  &&  nameNode.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node!=    null    &&    n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	46	None	replace
386	[BUG]  [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getType()  ==  Token.NAME  &&  p.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	54	None	replace
387	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(p.refs.getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	54	None	replace
388	[BUG]  [BUGGY]  NodeUtil.addChildToFront(parent,  numStubs);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NodeUtil.addChildToFront(parent,  numStubs);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NodeUtil.addChildToFront(parent,  numStubs);	  NodeUtil.removeChild(parent,    numStubs);    	non-compiled	[CE]  not  a  statement	52	None	replace
389	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(numStubs,  parent);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NodeUtil.redeclareVarsInsideBranch(numStubs,  parent);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NodeUtil.redeclareVarsInsideBranch(numStubs,  parent);	  NodeUtil.removeChild(parent,    numStubs);    	non-compiled	[CE]  not  a  statement	52	None	replace
390	[BUG]  [BUGGY]  if(alias.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(alias.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(alias.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
391	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getFirstChild().getString().equals(propAlias))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getFirstChild().getString().equals(propAlias))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true)||  parent.getFirstChild().getString().equals(propAlias))  {	  if    (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
392	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
393	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
394	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(p.refs.getFirstChild().getType()    ==    Token.NAME    &&    p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
395	[BUG]  [BUGGY]  if(node.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(node.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(node.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs!=    null    &&    n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
396	[BUG]  [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(p.node.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	41	None	replace
397	[BUG]  [BUGGY]  numStubs  =  Node.newString(Token.NAME,  propAlias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  numStubs  =  Node.newString(Token.NAME,  propAlias);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	numStubs  =  Node.newString(Token.NAME,  propAlias);	  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,    true);    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
398	[BUG]  [BUGGY]  int  numStubs  =  parent.size();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs  =  parent.size();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs  =  parent.size();	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
399	[BUG]  [BUGGY]  int  numStubs  =  propAlias.length();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs  =  propAlias.length();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs  =  propAlias.length();	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
400	[BUG]  [BUGGY]  int  numStubs  =  propAlias.size();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs  =  propAlias.size();  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs  =  propAlias.size();	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
401	[BUG]  [BUGGY]  int  numStubs  =  propAlias.length;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  int  numStubs  =  propAlias.length;  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	int  numStubs  =  propAlias.length;	  numStubs++;    	non-compiled	[CE]  not  a  statement	70	None	replace
402	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
403	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
404	[BUG]  [BUGGY]  NameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  false);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  NameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  false);	  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	71	None	replace
405	[BUG]  [BUGGY]  nameNode.putProp(Node.IS_UNDEFINED_WARNING,  false);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();        [BUGGY]  nameNode.putProp(Node.IS_UNDEFINED_WARNING,  false);  [BUGGY]      Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putProp(Node.IS_UNDEFINED_WARNING,  false);	  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,    true);    	non-compiled	[CE]  not  a  statement	71	None	replace
