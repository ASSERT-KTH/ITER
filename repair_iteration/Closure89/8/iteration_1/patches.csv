bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
2	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
3	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
4	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
5	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
6	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
7	[BUG]  [BUGGY]  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
8	[BUG]  [BUGGY]  if(nameNode.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
9	[BUG]  [BUGGY]  if(nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
10	[BUG]  [BUGGY]  if(name.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(name.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(name.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
11	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
12	[BUG]  [BUGGY]  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
13	[BUG]  [BUGGY]  if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
14	[BUG]  [BUGGY]  if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
15	[BUG]  [BUGGY]  if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
16	[BUG]  [BUGGY]  if(nameNode.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
17	[BUG]  [BUGGY]  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
18	[BUG]  [BUGGY]  if(name.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(name.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(name.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
19	[BUG]  [BUGGY]  if  (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
20	[BUG]  [BUGGY]  if  (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
21	[BUG]  [BUGGY]  if  (n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
22	[BUG]  [BUGGY]  if  (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
23	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	      	non-compiled	[CE]  not  a  statement	6	None	replace
24	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);	      	non-compiled	[CE]  not  a  statement	6	None	replace
25	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	      	non-compiled	[CE]  not  a  statement	6	None	replace
26	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  addAfter.putBooleanProp(Node.IS_CONSTANT_NAME,  false);	      	non-compiled	[CE]  not  a  statement	6	None	replace
27	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  compiler.reportCodeChange();  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  compiler.reportCodeChange();	      	non-compiled	[CE]  not  a  statement	6	None	replace
28	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  numStubs++;  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  numStubs++;  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  numStubs++;	      	non-compiled	[CE]  not  a  statement	6	None	replace
29	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true);  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_NAMESPACE_REDEFINED_WARNING,  true);	      	non-compiled	[CE]  not  a  statement	6	None	replace
30	[BUG]  [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
31	[BUG]  [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
32	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  parent.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
33	[BUG]  [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
34	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
35	[BUG]  [BUGGY]  if  (n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
36	[BUG]  [BUGGY]  if  (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
37	[BUG]  [BUGGY]  if  (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
38	[BUG]  [BUGGY]  if  (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
39	[BUG]  [BUGGY]  if  (n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
40	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
41	[BUG]  [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.node.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.node.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
42	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
43	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
44	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
45	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
46	[BUG]  [BUGGY]  if(n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node!=  null  &&  n.refs.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
47	[BUG]  [BUGGY]  if(n.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs!=  null  &&  n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
48	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  propAlias);	      	non-compiled	[CE]  not  a  statement	6	None	replace
49	[BUG]  [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  Node  nameNode  =  Node.newString(Token.NAME,  alias);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  nameNode  =  Node.newString(Token.NAME,  alias);	      	non-compiled	[CE]  not  a  statement	6	None	replace
50	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_OPTIONAL_NAME,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  nameNode.putBooleanProp(Node.IS_OPTIONAL_NAME,  true);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_OPTIONAL_NAME,  true);	      	non-compiled	[CE]  not  a  statement	6	None	replace
51	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_OBJECT_NAME,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  nameNode.putBooleanProp(Node.IS_OBJECT_NAME,  true);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_OBJECT_NAME,  true);	      	non-compiled	[CE]  not  a  statement	6	None	replace
52	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  numStubs);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  NodeUtil.removeChild(parent,  numStubs);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	NodeUtil.removeChild(parent,  numStubs);	      	non-compiled	[CE]  not  a  statement	6	None	replace
53	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
54	[BUG]  [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.refs.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	7	None	replace
55	[BUG]  [BUGGY]  if  (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
56	[BUG]  [BUGGY]  if  (n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
57	[BUG]  [BUGGY]  if  (p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    true))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
58	[BUG]  [BUGGY]  if(n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node!=  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
59	[BUG]  [BUGGY]  if(n.refs.get(0).node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.refs.get(0).node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node  ==  null  &&  n.refs.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
60	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
61	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
62	[BUG]  [BUGGY]  if  (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (nameNode.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
63	[BUG]  [BUGGY]  if  (n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (n.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
64	[BUG]  [BUGGY]  if  (p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if  (p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
65	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
66	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  ||  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
67	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  p.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
68	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  nameNode.putBooleanProp(Node.IS_PLAIN_NAME,  true);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_PLAIN_NAME,  true);	      	non-compiled	[CE]  not  a  statement	6	None	replace
69	[BUG]  [BUGGY]  Node  p  =  parent.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  Node  p  =  parent.getParent();  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	Node  p  =  parent.getParent();	      	non-compiled	[CE]  not  a  statement	6	None	replace
70	[BUG]  [BUGGY]  numStubs++;  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  numStubs++;  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	numStubs++;	      	non-compiled	[CE]  not  a  statement	6	None	replace
71	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  true);  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	nameNode.putBooleanProp(Node.IS_UNDEFINED_WARNING,  true);	      	non-compiled	[CE]  not  a  statement	6	None	replace
72	[BUG]  [BUGGY]  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
73	[BUG]  [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.getFirstChild().getType()  ==  Token.NAME  &&  n.getFirstChild().getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	  if(n.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	4	None	replace
74	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	  if    (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,    false))    {    	non-compiled	[CE]  not  a  statement	9	None	replace
75	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)  [BUGGY]    Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)	  if(nameNode.getFirstChild().getType()    ==    Token.NAME    &&    p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
