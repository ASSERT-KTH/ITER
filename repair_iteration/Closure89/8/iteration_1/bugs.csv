bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    [BUGGY]  if(p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(p.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  	non-compiled	[CE]  not  a  statement	15	None	replace
2	[BUG]  [BUGGY]  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    [BUGGY]  if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node.getFirstChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  	non-compiled	[CE]  not  a  statement	15	None	replace
3	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  	non-compiled	[CE]  not  a  statement	15	None	replace
4	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]          AssertionFailedError  [CONTEXT]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getFirstChild().getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  	non-compiled	[CE]  not  a  statement	15	None	replace
5	[BUG]  [BUGGY]  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]            AssertionFailedError  [CONTEXT]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    [BUGGY]  if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  	non-compiled	[CE]  not  a  statement	15	None	replace
6	[BUG]  [BUGGY]    [CE]  not  a  statement  [FE]              AssertionFailedError  [CONTEXT]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    [BUGGY]    [BUGGY]  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	  	if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  	non-compiled	[CE]  not  a  statement	15	None	replace
7	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    [BUGGY]  if(n.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if(n.getType()  ==  Token.NAME  &&  p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))  {	if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  	non-compiled	[CE]  not  a  statement	15	None	replace
8	[BUG]  [BUGGY]  if  (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    [BUGGY]  if  (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {  [BUGGY]  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  true))  {	if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  	non-compiled	[CE]  not  a  statement	15	None	replace
9	[BUG]  [BUGGY]  if  (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    [BUGGY]  if  (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {  [BUGGY]  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  }  return  numStubs;  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	if  (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME,  false))  {	if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  	non-compiled	[CE]  not  a  statement	15	None	replace
