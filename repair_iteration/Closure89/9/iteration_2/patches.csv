bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	16	None	replace
2	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	16	None	replace
3	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	16	None	replace
4	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope,  name.localSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.scope);    	non-compiled	[CE]  not  a  statement	41	None	replace
5	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope,  name.aliasingGets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.scope);    	non-compiled	[CE]  not  a  statement	41	None	replace
6	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope,  name.type);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.scope);    	non-compiled	[CE]  not  a  statement	41	None	replace
7	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.refs);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.refs);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.refs);    	non-compiled	[CE]  not  a  statement	46	None	replace
8	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.refs,  name.aliasingGets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.refs,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.refs,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.refs);    	non-compiled	[CE]  not  a  statement	46	None	replace
9	[BUG]  [BUGGY]  Name  ref  =  namespace.getFunctionName();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  namespace.getFunctionName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  namespace.getFunctionName();	  Name    ref    =    name.getFunctionName();    	non-compiled	[CE]  not  a  statement	59	None	replace
10	[BUG]  [BUGGY]  Name  ref  =  name.getReferenceName();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getReferenceName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getReferenceName();	  Name    ref    =    name.getFunctionName();    	non-compiled	[CE]  not  a  statement	59	None	replace
11	[BUG]  [BUGGY]  Name  ref  =  name.getFunctionName(),  namespace;  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getFunctionName(),  namespace;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getFunctionName(),  namespace;	  Name    ref    =    name.getFunctionName();    	non-compiled	[CE]  not  a  statement	59	None	replace
12	[BUG]  [BUGGY]  Name  ref  =  name.getRawFunctionName();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getRawFunctionName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getRawFunctionName();	  Name    ref    =    name.getFunctionName();    	non-compiled	[CE]  not  a  statement	59	None	replace
13	[BUG]  [BUGGY]  Name  ref  =  name.getRawName();  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getRawName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getRawName();	  Name    ref    =    name.getFunctionName();    	non-compiled	[CE]  not  a  statement	59	None	replace
14	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  2);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  2);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  2);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	27	None	replace
15	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  1,  name.aliasingGets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  1,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  1,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	27	None	replace
16	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  3);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  3);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  3);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	27	None	replace
17	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  1  -  name.globalSets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  1  -  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  1  -  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	27	None	replace
18	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  0);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  0);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  0);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	27	None	replace
19	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localNames);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localNames);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localNames);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    namespace);    	non-compiled	[CE]  not  a  statement	77	None	replace
20	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.localSets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    namespace);    	non-compiled	[CE]  not  a  statement	77	None	replace
21	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  namespace.aliasingGets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  namespace.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  namespace.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    namespace);    	non-compiled	[CE]  not  a  statement	77	None	replace
22	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  namespace,  name.aliasingGets);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  namespace,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  namespace,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    namespace);    	non-compiled	[CE]  not  a  statement	77	None	replace
23	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  namespace);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    namespace);    	non-compiled	[CE]  not  a  statement	77	None	replace
24	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name,    name.refs);    	non-compiled	[CE]  not  a  statement	76	None	replace
25	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalSets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name,    name.refs);    	non-compiled	[CE]  not  a  statement	76	None	replace
26	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalSets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name,    name.refs);    	non-compiled	[CE]  not  a  statement	76	None	replace
27	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs,  name.globalSets);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs,  name.globalSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name,    name.refs);    	non-compiled	[CE]  not  a  statement	76	None	replace
28	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name,    name.refs);    	non-compiled	[CE]  not  a  statement	76	None	replace
29	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets  +  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	26	None	replace
30	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets,  namespace);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	26	None	replace
31	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets,  name.scope);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets,  name.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	26	None	replace
32	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets,  name.globalSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	26	None	replace
33	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.scope);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.scope);    	non-compiled	[CE]  not  a  statement	29	None	replace
34	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope,  name.aliasingGets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.scope);    	non-compiled	[CE]  not  a  statement	29	None	replace
35	[BUG]  [BUGGY]  Collection  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Collection  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Collection  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.scope);    	non-compiled	[CE]  not  a  statement	29	None	replace
36	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.scope);    	non-compiled	[CE]  not  a  statement	29	None	replace
37	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(1);	  List    <    Ref>    refs    =    Lists.newArrayList(0);    	non-compiled	[CE]  not  a  statement	10	None	replace
38	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(name.globalSets);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(name.globalSets);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	71	None	replace
39	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(name.localSets);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(name.localSets);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	71	None	replace
40	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(name.aliasingGets);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(name.aliasingGets);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	71	None	replace
41	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(ref.namespace);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(ref.namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(ref.namespace);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	71	None	replace
42	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(name.namespace);  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(name.namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(name.namespace);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	71	None	replace
43	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(ref.type);  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(ref.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(ref.type);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	71	None	replace
44	[BUG]  [BUGGY]  Namespace  refs  =  name.getFunctionNamespace();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  name.getFunctionNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  name.getFunctionNamespace();	  Namespace    refs    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	58	None	replace
45	[BUG]  [BUGGY]  Namespace  refs  =  name.getReferences();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  name.getReferences();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  name.getReferences();	  Namespace    refs    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	58	None	replace
46	[BUG]  [BUGGY]  Namespace  refs  =  name.getReferenceNamespace();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  name.getReferenceNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  name.getReferenceNamespace();	  Namespace    refs    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	58	None	replace
47	[BUG]  [BUGGY]  Namespace  refs  =  name.getRef();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  name.getRef();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  name.getRef();	  Namespace    refs    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	58	None	replace
48	[BUG]  [BUGGY]  Namespace  refs  =  namespace.getFunctionNamespace();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  namespace.getFunctionNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  namespace.getFunctionNamespace();	  Namespace    refs    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	70	None	replace
49	[BUG]  [BUGGY]  Namespace  refs  =  namespace.getReferenceNamespace();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  namespace.getReferenceNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  namespace.getReferenceNamespace();	  Namespace    refs    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	70	None	replace
50	[BUG]  [BUGGY]  Namespace  refs  =  namespace.getReferences();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  namespace.getReferences();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  namespace.getReferences();	  Namespace    refs    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	70	None	replace
51	[BUG]  [BUGGY]  Namespace  refs  =  namespace.getRef();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  namespace.getRef();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  namespace.getRef();	  Namespace    refs    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	70	None	replace
52	[BUG]  [BUGGY]  Namespace  refs  =  namespace.getRawNamespace();  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  namespace.getRawNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  namespace.getRawNamespace();	  Namespace    refs    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	70	None	replace
53	[BUG]  [BUGGY]  Namespace  refs  =  namespace.getNamespaceURI();  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  namespace.getNamespaceURI();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  namespace.getNamespaceURI();	  Namespace    refs    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	70	None	replace
54	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(0);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(0);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(1);    	non-compiled	[CE]  not  a  statement	72	None	replace
55	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(2);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(2);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(2);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(1);    	non-compiled	[CE]  not  a  statement	72	None	replace
56	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.localSets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(1);    	non-compiled	[CE]  not  a  statement	72	None	replace
57	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets  +  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(1);    	non-compiled	[CE]  not  a  statement	72	None	replace
58	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(3);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(3);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(3);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(1);    	non-compiled	[CE]  not  a  statement	72	None	replace
59	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name.globalSets);    	non-compiled	[CE]  not  a  statement	48	None	replace
60	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets  +  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name.globalSets);    	non-compiled	[CE]  not  a  statement	48	None	replace
61	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name.globalSets);    	non-compiled	[CE]  not  a  statement	48	None	replace
62	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.allAliases);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.allAliases);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.allAliases);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	20	None	replace
63	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets,  namespace);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	20	None	replace
64	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets,  name.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	20	None	replace
65	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets,  name.globalSets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	39	None	replace
66	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	39	None	replace
67	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets,  name.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	39	None	replace
68	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets,  namespace);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	39	None	replace
69	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.globalSets);    	non-compiled	[CE]  not  a  statement	47	None	replace
70	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name.globalSets);    	non-compiled	[CE]  not  a  statement	49	None	replace
71	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets  +  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets  +  1);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name.globalSets);    	non-compiled	[CE]  not  a  statement	49	None	replace
72	[BUG]  [BUGGY]  Name[]  refs  =  name.names();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.names();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.names();	  Name[]    refs    =    name.getNames();    	non-compiled	[CE]  not  a  statement	34	None	replace
73	[BUG]  [BUGGY]  Name[]  refs  =  namespace.getNames();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  namespace.getNames();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  namespace.getNames();	  Name[]    refs    =    name.getNames();    	non-compiled	[CE]  not  a  statement	34	None	replace
74	[BUG]  [BUGGY]  Name[]  refs  =  name.getFunctionNames();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.getFunctionNames();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.getFunctionNames();	  Name[]    refs    =    name.getNames();    	non-compiled	[CE]  not  a  statement	34	None	replace
75	[BUG]  [BUGGY]  Name[]  refs  =  name.globalSets;  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.globalSets;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.globalSets;	  Name[]    refs    =    name.getNames();    	non-compiled	[CE]  not  a  statement	34	None	replace
76	[BUG]  [BUGGY]  Name[]  refs  =  namespace.getReferences();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  namespace.getReferences();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  namespace.getReferences();	  Name[]    refs    =    name.getReferences();    	non-compiled	[CE]  not  a  statement	35	None	replace
77	[BUG]  [BUGGY]  Name[]  refs  =  name.references();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.references();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.references();	  Name[]    refs    =    name.getReferences();    	non-compiled	[CE]  not  a  statement	35	None	replace
78	[BUG]  [BUGGY]  Name[]  refs  =  name.getReferences(namespace);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.getReferences(namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.getReferences(namespace);	  Name[]    refs    =    name.getReferences();    	non-compiled	[CE]  not  a  statement	35	None	replace
79	[BUG]  [BUGGY]  Name[]  refs  =  name.refs();  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.refs();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.refs();	  Name[]    refs    =    name.getReferences();    	non-compiled	[CE]  not  a  statement	35	None	replace
80	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.localSets  +  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.localSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.localSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets,    name.localSets);    	non-compiled	[CE]  not  a  statement	4	None	replace
81	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.localSets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets,    name.localSets);    	non-compiled	[CE]  not  a  statement	4	None	replace
82	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.values());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.values());  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.values());	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.type);    	non-compiled	[CE]  not  a  statement	6	None	replace
83	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.typespace);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.typespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.typespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.type);    	non-compiled	[CE]  not  a  statement	6	None	replace
84	[BUG]  [BUGGY]  Name[]  refs  =  namespace.globalSets();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  namespace.globalSets();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  namespace.globalSets();	  Name[]    refs    =    name.globalSets();    	non-compiled	[CE]  not  a  statement	30	None	replace
85	[BUG]  [BUGGY]  Name[]  refs  =  name.globalNames();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.globalNames();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.globalNames();	  Name[]    refs    =    name.globalSets();    	non-compiled	[CE]  not  a  statement	30	None	replace
86	[BUG]  [BUGGY]  Name[]  refs  =  name.localSets();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.localSets();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.localSets();	  Name[]    refs    =    name.globalSets();    	non-compiled	[CE]  not  a  statement	30	None	replace
87	[BUG]  [BUGGY]  Name[]  refs  =  name.namespaceSets();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.namespaceSets();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.namespaceSets();	  Name[]    refs    =    name.globalSets();    	non-compiled	[CE]  not  a  statement	30	None	replace
88	[BUG]  [BUGGY]  Name[]  refs  =  name.list();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.list();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.list();	  Name[]    refs    =    name.globalSets();    	non-compiled	[CE]  not  a  statement	30	None	replace
89	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.type);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.type);    	non-compiled	[CE]  not  a  statement	25	None	replace
90	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.values());  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.values());  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.values());	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.type);    	non-compiled	[CE]  not  a  statement	25	None	replace
91	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.aliasingGets));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.aliasingGets));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.aliasingGets));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
92	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.localSets));  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.localSets));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.localSets));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
93	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.scope));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.scope));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.scope));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
94	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.globalSets));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.globalSets));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  name.globalSets));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
95	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace,  inlineAliasIfPossible(ref,  namespace));  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace,  inlineAliasIfPossible(ref,  namespace));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
96	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs,  inlineAliasIfPossible(ref,  namespace));  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs,  inlineAliasIfPossible(ref,  namespace));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
97	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  inlineAliasIfPossible(ref,  namespace));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  inlineAliasIfPossible(ref,  namespace));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
98	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.values);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.values);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.values);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.localSets);    	non-compiled	[CE]  not  a  statement	38	None	replace
99	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.localSets);    	non-compiled	[CE]  not  a  statement	38	None	replace
100	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets,  name.type);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.localSets);    	non-compiled	[CE]  not  a  statement	38	None	replace
101	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.allAliases);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.allAliases);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.allAliases);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.globalSets);    	non-compiled	[CE]  not  a  statement	18	None	replace
102	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets  +  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.globalSets);    	non-compiled	[CE]  not  a  statement	18	None	replace
103	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.globalSets);    	non-compiled	[CE]  not  a  statement	18	None	replace
104	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.globalSets);    	non-compiled	[CE]  not  a  statement	18	None	replace
105	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.globalSets);    	non-compiled	[CE]  not  a  statement	22	None	replace
106	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets  +  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.globalSets);    	non-compiled	[CE]  not  a  statement	22	None	replace
107	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets  -  1);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.globalSets);    	non-compiled	[CE]  not  a  statement	22	None	replace
108	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(name.globalSets);    	non-compiled	[CE]  not  a  statement	61	None	replace
109	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(name.globalSets);    	non-compiled	[CE]  not  a  statement	61	None	replace
110	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets  -  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(name.globalSets);    	non-compiled	[CE]  not  a  statement	61	None	replace
111	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name,  name.globalSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(name.globalSets);    	non-compiled	[CE]  not  a  statement	61	None	replace
112	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets,  name.type);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(name.globalSets);    	non-compiled	[CE]  not  a  statement	61	None	replace
113	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  2);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  2);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  2);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets    +    1);    	non-compiled	[CE]  not  a  statement	54	None	replace
114	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  0);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  0);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  0);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets    +    1);    	non-compiled	[CE]  not  a  statement	54	None	replace
115	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  3);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  3);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  3);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets    +    1);    	non-compiled	[CE]  not  a  statement	54	None	replace
116	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  name.aliasingGets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	2	None	replace
117	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  name.aliasingGets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	2	None	replace
118	[BUG]  [BUGGY]  Name[]  refs  =  namespace.getRefs();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  namespace.getRefs();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  namespace.getRefs();	  Name[]    refs    =    name.getRefs();    	non-compiled	[CE]  not  a  statement	31	None	replace
119	[BUG]  [BUGGY]  Name  ref  =  namespace.getName();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  namespace.getName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  namespace.getName();	  Name    ref    =    name.getName();    	non-compiled	[CE]  not  a  statement	33	None	replace
120	[BUG]  [BUGGY]  Name  ref  =  name.getNamespaceURI();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getNamespaceURI();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getNamespaceURI();	  Name    ref    =    name.getName();    	non-compiled	[CE]  not  a  statement	33	None	replace
121	[BUG]  [BUGGY]  Name  ref  =  name.getRef();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getRef();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getRef();	  Name    ref    =    name.getName();    	non-compiled	[CE]  not  a  statement	33	None	replace
122	[BUG]  [BUGGY]  Name  ref  =  name.getNamespace();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getNamespace();	  Name    ref    =    name.getName();    	non-compiled	[CE]  not  a  statement	33	None	replace
123	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.allAliases);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.allAliases);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.allAliases);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.localSets);    	non-compiled	[CE]  not  a  statement	17	None	replace
124	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.localSets);    	non-compiled	[CE]  not  a  statement	17	None	replace
125	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.localSets);    	non-compiled	[CE]  not  a  statement	17	None	replace
126	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets,  name.type);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.localSets);    	non-compiled	[CE]  not  a  statement	17	None	replace
127	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets  +  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets,    name.globalSets);    	non-compiled	[CE]  not  a  statement	1	None	replace
128	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets,    name.globalSets);    	non-compiled	[CE]  not  a  statement	1	None	replace
129	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.globalSets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets,    name.globalSets);    	non-compiled	[CE]  not  a  statement	1	None	replace
130	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.globalSets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  nameMap.get(name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.get(name.globalSets);	  Name    ref    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	57	None	replace
131	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  nameMap.get(name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.get(name.localSets);	  Name    ref    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	57	None	replace
132	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(namespace);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  nameMap.get(namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.get(namespace);	  Name    ref    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	57	None	replace
133	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.globalSets  +  1);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  nameMap.get(name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.get(name.globalSets  +  1);	  Name    ref    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	57	None	replace
134	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  nameMap.get(name.globalSets,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.get(name.globalSets,  name.localSets);	  Name    ref    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	57	None	replace
135	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  1);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.get(name.localSets  +  1);	  Name    ref    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	57	None	replace
136	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.type);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.type);    	non-compiled	[CE]  not  a  statement	28	None	replace
137	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.scope);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.scope);    	non-compiled	[CE]  not  a  statement	23	None	replace
138	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.scope,  name.aliasingGets);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.scope,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.scope,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.scope);    	non-compiled	[CE]  not  a  statement	23	None	replace
139	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.type,  name.globalSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.type,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.type,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.type);    	non-compiled	[CE]  not  a  statement	40	None	replace
140	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.typespace);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.typespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.typespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.type);    	non-compiled	[CE]  not  a  statement	40	None	replace
141	[BUG]  [BUGGY]  Namespace  namespace  =  name.namespace;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.namespace;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.namespace;	  Namespace    namespace    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	67	None	replace
142	[BUG]  [BUGGY]  Namespace  namespace  =  namespace.getNamespaceURI();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  namespace.getNamespaceURI();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  namespace.getNamespaceURI();	  Namespace    namespace    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	67	None	replace
143	[BUG]  [BUGGY]  Namespace  namespace  =  names.getNamespace();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  names.getNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  names.getNamespace();	  Namespace    namespace    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	67	None	replace
144	[BUG]  [BUGGY]  Namespace  namespace  =  name.getNamespaceURI();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.getNamespaceURI();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.getNamespaceURI();	  Namespace    namespace    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	67	None	replace
145	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.getNamespace();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.getNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.getNamespace();	  Namespace    namespace    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	67	None	replace
146	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.aliasingGets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    namespace);    	non-compiled	[CE]  not  a  statement	62	None	replace
147	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.aliasingGets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    namespace);    	non-compiled	[CE]  not  a  statement	62	None	replace
148	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  globalNames);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  globalNames);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  globalNames);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    namespace);    	non-compiled	[CE]  not  a  statement	62	None	replace
149	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.values());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.values());  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.values());	  List    <    Ref>    refs    =    Lists.newArrayList(name,    namespace);    	non-compiled	[CE]  not  a  statement	62	None	replace
150	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.refs);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.refs);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.refs);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	43	None	replace
151	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets,  name.globalSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	43	None	replace
152	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.aliasingGets);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalNames);    	non-compiled	[CE]  not  a  statement	24	None	replace
153	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames  +  1);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalNames);    	non-compiled	[CE]  not  a  statement	24	None	replace
154	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.globalSets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets,    namespace);    	non-compiled	[CE]  not  a  statement	3	None	replace
155	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.localSets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets,    namespace);    	non-compiled	[CE]  not  a  statement	3	None	replace
156	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  collapsePropertiesOnExternTypes);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  collapsePropertiesOnExternTypes);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  collapsePropertiesOnExternTypes);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets,    namespace);    	non-compiled	[CE]  not  a  statement	3	None	replace
157	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.type);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets,    namespace);    	non-compiled	[CE]  not  a  statement	3	None	replace
158	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	11	None	replace
159	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets  +  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	11	None	replace
160	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	11	None	replace
161	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets  -  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	11	None	replace
162	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name,  name.globalSets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	11	None	replace
163	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.localSets,  name.globalSets);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.localSets,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.localSets,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	11	None	replace
164	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localNames  +  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localNames  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localNames  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    name.localNames);    	non-compiled	[CE]  not  a  statement	78	None	replace
165	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localNames,  name.aliasingGets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localNames,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localNames,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    name.localNames);    	non-compiled	[CE]  not  a  statement	78	None	replace
166	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.values);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.values);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.values);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    namespace);    	non-compiled	[CE]  not  a  statement	55	None	replace
167	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  globalNames);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  globalNames);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  globalNames);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    namespace);    	non-compiled	[CE]  not  a  statement	55	None	replace
168	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globals,  name.localSets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globals,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globals,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.globalSets);    	non-compiled	[CE]  not  a  statement	15	None	replace
169	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets  +  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.globalSets);    	non-compiled	[CE]  not  a  statement	15	None	replace
170	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.globalSets);    	non-compiled	[CE]  not  a  statement	15	None	replace
171	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.localSets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
172	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.globalSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
173	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
174	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.refs);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace,  name.refs);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
175	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs,  name.aliasingGets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
176	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  name.globalSets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
177	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayListWithNames(name.globalSets);    	non-compiled	[CE]  not  a  statement	60	None	replace
178	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayListWithNames(name.globalSets);    	non-compiled	[CE]  not  a  statement	60	None	replace
179	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayListWithNames(name.globalSets);    	non-compiled	[CE]  not  a  statement	60	None	replace
180	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name,  name.globalSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithNames(name,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayListWithNames(name.globalSets);    	non-compiled	[CE]  not  a  statement	60	None	replace
181	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  name.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayListWithNames(name.globalSets);    	non-compiled	[CE]  not  a  statement	60	None	replace
182	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  2);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  2);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  2);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets    +    1);    	non-compiled	[CE]  not  a  statement	5	None	replace
183	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1  -  name.localSets);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1  -  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1  -  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets    +    1);    	non-compiled	[CE]  not  a  statement	5	None	replace
184	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  3);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  3);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  3);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets    +    1);    	non-compiled	[CE]  not  a  statement	5	None	replace
185	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1,  name.localSets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets    +    1);    	non-compiled	[CE]  not  a  statement	5	None	replace
186	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1,  name.aliasingGets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets    +    1);    	non-compiled	[CE]  not  a  statement	5	None	replace
187	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  0);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  0);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  0);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets    +    1);    	non-compiled	[CE]  not  a  statement	5	None	replace
188	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace.aliasingGets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    namespace);    	non-compiled	[CE]  not  a  statement	44	None	replace
189	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    namespace);    	non-compiled	[CE]  not  a  statement	44	None	replace
190	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1,  name.localSets  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1,  name.localSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1,  name.localSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	12	None	replace
191	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  2);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  2);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  2);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	12	None	replace
192	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1,  name.aliasingGets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	12	None	replace
193	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  3);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  3);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  3);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	12	None	replace
194	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1  -  name.aliasingGets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1  -  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1  -  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	12	None	replace
195	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  0);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  0);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  0);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	12	None	replace
196	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(name.globalSets  +  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(name.globalSets  +  1);	  Namespace    namespace    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	68	None	replace
197	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(name,  name.localSets);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(name,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(name,  name.localSets);	  Namespace    namespace    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	68	None	replace
198	[BUG]  [BUGGY]  Name  ref  =  namespace.getFullName();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  namespace.getFullName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  namespace.getFullName();	  Name    ref    =    name.getFullName();    	non-compiled	[CE]  not  a  statement	56	None	replace
199	[BUG]  [BUGGY]  Name  ref  =  name.getFullName(),  namespace;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getFullName(),  namespace;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getFullName(),  namespace;	  Name    ref    =    name.getFullName();    	non-compiled	[CE]  not  a  statement	56	None	replace
200	[BUG]  [BUGGY]  Name  ref  =  name.getFullName(),  namespace);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getFullName(),  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getFullName(),  namespace);	  Name    ref    =    name.getFullName();    	non-compiled	[CE]  ';'  expected	56	None	replace
201	[BUG]  [BUGGY]  Name  ref  =  name.getFullyQualifiedName();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getFullyQualifiedName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getFullyQualifiedName();	  Name    ref    =    name.getFullName();    	non-compiled	[CE]  not  a  statement	56	None	replace
202	[BUG]  [BUGGY]  Name  ref  =  name.getFullReferenceName();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getFullReferenceName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getFullReferenceName();	  Name    ref    =    name.getFullName();    	non-compiled	[CE]  not  a  statement	56	None	replace
203	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets);    	non-compiled	[CE]  not  a  statement	8	None	replace
204	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.type);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets);    	non-compiled	[CE]  not  a  statement	8	None	replace
205	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.localSets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets);    	non-compiled	[CE]  not  a  statement	8	None	replace
206	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets  +  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name.localSets);    	non-compiled	[CE]  not  a  statement	50	None	replace
207	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  *  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  *  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  *  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets    -    1);    	non-compiled	[CE]  not  a  statement	7	None	replace
208	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1,  name.aliasingGets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets    -    1);    	non-compiled	[CE]  not  a  statement	7	None	replace
209	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1,  name.localSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets    -    1);    	non-compiled	[CE]  not  a  statement	7	None	replace
210	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.allAliases);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.allAliases);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.allAliases);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name);    	non-compiled	[CE]  not  a  statement	65	None	replace
211	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name);    	non-compiled	[CE]  not  a  statement	65	None	replace
212	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name);    	non-compiled	[CE]  not  a  statement	65	None	replace
213	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace.aliasingGets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    namespace);    	non-compiled	[CE]  not  a  statement	45	None	replace
214	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    namespace);    	non-compiled	[CE]  not  a  statement	45	None	replace
215	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace,  name.aliasingGets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    namespace);    	non-compiled	[CE]  not  a  statement	45	None	replace
216	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  namespace);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    namespace);    	non-compiled	[CE]  not  a  statement	45	None	replace
217	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.globalSets);    	non-compiled	[CE]  not  a  statement	37	None	replace
218	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.globalSets);    	non-compiled	[CE]  not  a  statement	37	None	replace
219	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.globalSets);    	non-compiled	[CE]  not  a  statement	37	None	replace
220	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets,  name.type);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.globalSets);    	non-compiled	[CE]  not  a  statement	37	None	replace
221	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  *  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  *  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  *  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    -    1);    	non-compiled	[CE]  not  a  statement	63	None	replace
222	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  1,  name.aliasingGets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  1,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  1,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    -    1);    	non-compiled	[CE]  not  a  statement	63	None	replace
223	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets  -  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    -    1);    	non-compiled	[CE]  not  a  statement	63	None	replace
224	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  1  +  name.aliasingGets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  1  +  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  1  +  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    -    1);    	non-compiled	[CE]  not  a  statement	63	None	replace
225	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  1,  name.aliasingGets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  1,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  1,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    -    1);    	non-compiled	[CE]  not  a  statement	14	None	replace
226	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  *  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  *  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  *  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    -    1);    	non-compiled	[CE]  not  a  statement	14	None	replace
227	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets  -  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    -    1);    	non-compiled	[CE]  not  a  statement	14	None	replace
228	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  2);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  2);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  2);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    -    1);    	non-compiled	[CE]  not  a  statement	14	None	replace
229	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets  -  1);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    -    1);    	non-compiled	[CE]  not  a  statement	14	None	replace
230	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets,  name.scope);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets,  name.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	21	None	replace
231	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets,  namespace);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	21	None	replace
232	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets,  name.type);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	21	None	replace
233	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets,  namespace);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	13	None	replace
234	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets,  name.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	13	None	replace
235	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets,  name.scope);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets,  name.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	13	None	replace
236	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets  +  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	13	None	replace
237	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalSets,  name.localSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalSets,  name.localSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalSets,  name.localSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	13	None	replace
238	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  0);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  0);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  0);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	13	None	replace
239	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace.aliasingGets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    namespace);    	non-compiled	[CE]  not  a  statement	19	None	replace
240	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace,  name.aliasingGets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    namespace);    	non-compiled	[CE]  not  a  statement	19	None	replace
241	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  nameSpace);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  nameSpace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  nameSpace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    nameSpace);    	non-compiled	[CE]  not  a  statement	64	None	replace
242	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  *  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  *  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  *  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets    -    1);    	non-compiled	[CE]  not  a  statement	66	None	replace
243	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets  -  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets    -    1);    	non-compiled	[CE]  not  a  statement	66	None	replace
244	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  /  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  /  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  /  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets    -    1);    	non-compiled	[CE]  not  a  statement	66	None	replace
245	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	53	None	replace
246	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs,  name.localSets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.refs);    	non-compiled	[CE]  not  a  statement	42	None	replace
247	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name);    	non-compiled	[CE]  not  a  statement	75	None	replace
248	[BUG]  [BUGGY]  Namespace  namespace  =  name.getAliasingGets();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.getAliasingGets();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.getAliasingGets();	  Namespace    namespace    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	32	None	replace
249	[BUG]  [BUGGY]  Namespace  namespace  =  name.getLocalNamespace();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.getLocalNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.getLocalNamespace();	  Namespace    namespace    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	32	None	replace
250	[BUG]  [BUGGY]  Namespace  namespace  =  name.getReferenceNamespace();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.getReferenceNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.getReferenceNamespace();	  Namespace    namespace    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	32	None	replace
251	[BUG]  [BUGGY]  Namespace  namespace  =  name.getNamespace(),  name.localSets;  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.getNamespace(),  name.localSets;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.getNamespace(),  name.localSets;	  Namespace    namespace    =    name.getNamespace();    	non-compiled	[CE]  ';'  expected	32	None	replace
252	[BUG]  [BUGGY]  Namespace  namespace  =  name.getNamespace(null);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.getNamespace(null);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.getNamespace(null);	  Namespace    namespace    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	32	None	replace
253	[BUG]  [BUGGY]  Name  ref  =  namespace.getReference();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  namespace.getReference();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  namespace.getReference();	  Name    ref    =    name.getReference();    	non-compiled	[CE]  not  a  statement	36	None	replace
254	[BUG]  [BUGGY]  Name  ref  =  name.getReference(namespace);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getReference(namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getReference(namespace);	  Name    ref    =    name.getReference();    	non-compiled	[CE]  not  a  statement	36	None	replace
255	[BUG]  [BUGGY]  Name  ref  =  name.getReference(),  namespace;  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getReference(),  namespace;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getReference(),  namespace;	  Name    ref    =    name.getReference();    	non-compiled	[CE]  not  a  statement	36	None	replace
256	[BUG]  [BUGGY]  Name  ref  =  name.reference();  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.reference();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.reference();	  Name    ref    =    name.getReference();    	non-compiled	[CE]  not  a  statement	36	None	replace
257	[BUG]  [BUGGY]  Name  ref  =  name.getReference(null);  [CE]  not  a  statement  [FE]                                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getReference(null);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getReference(null);	  Name    ref    =    name.getReference();    	non-compiled	[CE]  not  a  statement	36	None	replace
258	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    name.localSets);    	non-compiled	[CE]  not  a  statement	52	None	replace
259	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets  +  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    name.localSets);    	non-compiled	[CE]  not  a  statement	52	None	replace
260	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets  -  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    name.localSets);    	non-compiled	[CE]  not  a  statement	52	None	replace
261	[BUG]  [BUGGY]  Namespace  namespace  =  name.aliasingGets();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.aliasingGets();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.aliasingGets();	  Namespace    namespace    =    name.namespace();    	non-compiled	[CE]  not  a  statement	69	None	replace
262	[BUG]  [BUGGY]  Namespace  namespace  =  name.globalSets();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.globalSets();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.globalSets();	  Namespace    namespace    =    name.namespace();    	non-compiled	[CE]  not  a  statement	69	None	replace
263	[BUG]  [BUGGY]  Namespace  namespace  =  name.scope.namespace();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.scope.namespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.scope.namespace();	  Namespace    namespace    =    name.namespace();    	non-compiled	[CE]  not  a  statement	69	None	replace
264	[BUG]  [BUGGY]  Namespace  namespace  =  name.unknownNamespace();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.unknownNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.unknownNamespace();	  Namespace    namespace    =    name.namespace();    	non-compiled	[CE]  not  a  statement	69	None	replace
265	[BUG]  [BUGGY]  Namespace  namespace  =  name.namespace(name.globalSets);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.namespace(name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.namespace(name.globalSets);	  Namespace    namespace    =    name.namespace();    	non-compiled	[CE]  not  a  statement	69	None	replace
266	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newLinkedList(name.globalSets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newLinkedList(name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newLinkedList(name.globalSets);	  List    <    Ref>    refs    =    Lists.newLinkedList();    	non-compiled	[CE]  not  a  statement	9	None	replace
267	[BUG]  [BUGGY]  List  <  Ref>  refs  =  list.newArrayList();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  list.newArrayList();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  list.newArrayList();	  List    <    Ref>    refs    =    Lists.newLinkedList();    	non-compiled	[CE]  not  a  statement	9	None	replace
268	[BUG]  [BUGGY]  List  <  Ref>  refs  =  new  ArrayList  <  Ref>(name.globalSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  new  ArrayList  <  Ref>(name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  new  ArrayList  <  Ref>(name.globalSets);	  List    <    Ref>    refs    =    Lists.newLinkedList();    	non-compiled	[CE]  not  a  statement	9	None	replace
269	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newHashSet();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newHashSet();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newHashSet();	  List    <    Ref>    refs    =    Lists.newLinkedList();    	non-compiled	[CE]  not  a  statement	9	None	replace
270	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets  +  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	2	None	replace
271	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	2	None	replace
272	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  namespace,  name.aliasingGets);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  namespace,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  namespace,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    namespace);    	non-compiled	[CE]  not  a  statement	55	None	replace
273	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.values);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.values);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.values);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    namespace);    	non-compiled	[CE]  not  a  statement	55	None	replace
274	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	39	None	replace
275	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.values);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.values);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.values);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	39	None	replace
276	[BUG]  [BUGGY]  Name  ref  =  name.getFullReference();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getFullReference();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getFullReference();	  Name    ref    =    name.getReference();    	non-compiled	[CE]  not  a  statement	36	None	replace
277	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.scope);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.scope);    	non-compiled	[CE]  not  a  statement	23	None	replace
278	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.type,  name.globalSets);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.type,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.type,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.type);    	non-compiled	[CE]  not  a  statement	6	None	replace
279	[BUG]  [BUGGY]  Name[]  refs  =  name.namespace.getRefs();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.namespace.getRefs();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.namespace.getRefs();	  Name[]    refs    =    name.getRefs();    	non-compiled	[CE]  not  a  statement	31	None	replace
280	[BUG]  [BUGGY]  Name[]  refs  =  name.getRefs(namespace);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.getRefs(namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.getRefs(namespace);	  Name[]    refs    =    name.getRefs();    	non-compiled	[CE]  not  a  statement	31	None	replace
281	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets  -  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	13	None	replace
282	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(ref.name);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(ref.name);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(ref.name);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	71	None	replace
283	[BUG]  [BUGGY]  Namespace  namespace  =  name.namespace.getNamespace();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.namespace.getNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.namespace.getNamespace();	  Namespace    namespace    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	67	None	replace
284	[BUG]  [BUGGY]  Namespace  namespace  =  name.scope.getNamespace();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.scope.getNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.scope.getNamespace();	  Namespace    namespace    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	67	None	replace
285	[BUG]  [BUGGY]  Namespace  namespace  =  name.cloneTree();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.cloneTree();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.cloneTree();	  Namespace    namespace    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	67	None	replace
286	[BUG]  [BUGGY]  Namespace  namespace  =  name.next();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.next();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.next();	  Namespace    namespace    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	67	None	replace
287	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs,  namespace);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.refs);    	non-compiled	[CE]  not  a  statement	42	None	replace
288	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.labels);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.labels);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.labels);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.scope);    	non-compiled	[CE]  not  a  statement	41	None	replace
289	[BUG]  [BUGGY]  Namespace  refs  =  namespace.getReferencedNamespace();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  namespace.getReferencedNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  namespace.getReferencedNamespace();	  Namespace    refs    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	70	None	replace
290	[BUG]  [BUGGY]  Namespace  refs  =  namespace.getGlobalNamespace();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  namespace.getGlobalNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  namespace.getGlobalNamespace();	  Namespace    refs    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	70	None	replace
291	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.type);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.globalSets);    	non-compiled	[CE]  not  a  statement	47	None	replace
292	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace,  inlineAliasIfPossible(ref,  namespace));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace,  inlineAliasIfPossible(ref,  namespace));	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    namespace);    	non-compiled	[CE]  not  a  statement	19	None	replace
293	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets  -  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.localSets);    	non-compiled	[CE]  not  a  statement	38	None	replace
294	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets  -  1);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.localSets);    	non-compiled	[CE]  not  a  statement	17	None	replace
295	[BUG]  [BUGGY]  Name[]  refs  =  name.getReferenceNames();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.getReferenceNames();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.getReferenceNames();	  Name[]    refs    =    name.getNames();    	non-compiled	[CE]  not  a  statement	34	None	replace
296	[BUG]  [BUGGY]  Name[]  refs  =  name.namespace.getNames();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.namespace.getNames();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.namespace.getNames();	  Name[]    refs    =    name.getNames();    	non-compiled	[CE]  not  a  statement	34	None	replace
297	[BUG]  [BUGGY]  Namespace  refs  =  name.getReferencedNamespace();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  name.getReferencedNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  name.getReferencedNamespace();	  Namespace    refs    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	58	None	replace
298	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1  +  name.aliasingGets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1  +  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1  +  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets    -    1);    	non-compiled	[CE]  not  a  statement	7	None	replace
299	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values());  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values());	  List    <    Ref>    refs    =    Lists.newArrayList(0);    	non-compiled	[CE]  not  a  statement	10	None	replace
300	[BUG]  [BUGGY]  Name[]  refs  =  name.globalRefs();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.globalRefs();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.globalRefs();	  Name[]    refs    =    name.globalSets();    	non-compiled	[CE]  not  a  statement	30	None	replace
301	[BUG]  [BUGGY]  Name[]  refs  =  name.namespace();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.namespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.namespace();	  Name[]    refs    =    name.globalSets();    	non-compiled	[CE]  not  a  statement	30	None	replace
302	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.type,  name.localSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.type,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.type,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.type);    	non-compiled	[CE]  not  a  statement	28	None	replace
303	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.type);    	non-compiled	[CE]  not  a  statement	28	None	replace
304	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.aliasingGets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.aliasingGets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name,    name.refs);    	non-compiled	[CE]  not  a  statement	76	None	replace
305	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name,  namespace);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  nameMap.get(name,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.get(name,  namespace);	  Name    ref    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	57	None	replace
306	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.namespace);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  nameMap.get(name.namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.get(name.namespace);	  Name    ref    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	57	None	replace
307	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.name);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  nameMap.get(name.name);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.get(name.name);	  Name    ref    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	57	None	replace
308	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace),  collapsePropertiesOnExternTypes);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace),  collapsePropertiesOnExternTypes);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace),  collapsePropertiesOnExternTypes);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
309	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace,  inlineAliasIfPossible(ref,  namespace));  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace,  inlineAliasIfPossible(ref,  namespace));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
310	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.refs);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.refs);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.refs);    	non-compiled	[CE]  not  a  statement	46	None	replace
311	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(name,  name.aliasingGets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(name,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(name,  name.aliasingGets);	  Namespace    namespace    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	68	None	replace
312	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name);    	non-compiled	[CE]  not  a  statement	65	None	replace
313	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name);    	non-compiled	[CE]  not  a  statement	65	None	replace
314	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets  +  name.aliasingGets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets  +  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets  +  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(name.globalSets);    	non-compiled	[CE]  not  a  statement	61	None	replace
315	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets)+  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets)+  1;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets)+  1;	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(name.globalSets);    	non-compiled	[CE]  not  a  statement	61	None	replace
316	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.aliasingGets);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(1);    	non-compiled	[CE]  not  a  statement	72	None	replace
317	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets,  namespace);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
318	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs,  name.aliasingGets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
319	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.aliasingGets,  namespace);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.aliasingGets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.aliasingGets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
320	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name);    	non-compiled	[CE]  not  a  statement	75	None	replace
321	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name);    	non-compiled	[CE]  not  a  statement	75	None	replace
322	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootNames,  namespace);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootNames,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.rootNames,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    namespace);    	non-compiled	[CE]  not  a  statement	77	None	replace
323	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets  -  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.globalSets);    	non-compiled	[CE]  not  a  statement	37	None	replace
324	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.rootSets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.rootSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.rootSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.globalSets);    	non-compiled	[CE]  not  a  statement	37	None	replace
325	[BUG]  [BUGGY]  Name[]  refs  =  name.namespace.getReferences();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.namespace.getReferences();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.namespace.getReferences();	  Name[]    refs    =    name.getReferences();    	non-compiled	[CE]  not  a  statement	35	None	replace
326	[BUG]  [BUGGY]  Name[]  refs  =  name.references;  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.references;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.references;	  Name[]    refs    =    name.getReferences();    	non-compiled	[CE]  not  a  statement	35	None	replace
327	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.localSets);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayListWithNames(name.globalSets);    	non-compiled	[CE]  not  a  statement	60	None	replace
328	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.localNames);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.localNames);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.localNames);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.type);    	non-compiled	[CE]  not  a  statement	25	None	replace
329	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalNames);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalNames);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.globalNames);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    name.localNames);    	non-compiled	[CE]  not  a  statement	78	None	replace
330	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newLinkedList(name.aliasingGets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newLinkedList(name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newLinkedList(name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newLinkedList();    	non-compiled	[CE]  not  a  statement	9	None	replace
331	[BUG]  [BUGGY]  List  <  Ref>  refs  =  new  ArrayList  <  Ref>();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  new  ArrayList  <  Ref>();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  new  ArrayList  <  Ref>();	  List    <    Ref>    refs    =    Lists.newLinkedList();    	non-compiled	[CE]  not  a  statement	9	None	replace
332	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newLinkedList(name.localSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newLinkedList(name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newLinkedList(name.localSets);	  List    <    Ref>    refs    =    Lists.newLinkedList();    	non-compiled	[CE]  not  a  statement	9	None	replace
333	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.fields);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.fields);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.fields);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.type);    	non-compiled	[CE]  not  a  statement	40	None	replace
334	[BUG]  [BUGGY]  Name  ref  =  name.getFullName(namespace);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getFullName(namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getFullName(namespace);	  Name    ref    =    name.getFullName();    	non-compiled	[CE]  not  a  statement	56	None	replace
335	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	43	None	replace
336	[BUG]  [BUGGY]  Name  ref  =  name.getFunctionName(namespace);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getFunctionName(namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getFunctionName(namespace);	  Name    ref    =    name.getFunctionName();    	non-compiled	[CE]  not  a  statement	59	None	replace
337	[BUG]  [BUGGY]  Name  ref  =  name.getAliasingGets();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getAliasingGets();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getAliasingGets();	  Name    ref    =    name.getFunctionName();    	non-compiled	[CE]  not  a  statement	59	None	replace
338	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	20	None	replace
339	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  namespace);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets);    	non-compiled	[CE]  not  a  statement	8	None	replace
340	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.scope,  name.localSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.scope,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.scope,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.scope);    	non-compiled	[CE]  not  a  statement	29	None	replace
341	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.scope);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.rootSets,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.scope);    	non-compiled	[CE]  not  a  statement	29	None	replace
342	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  4);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  4);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  4);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	27	None	replace
343	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  -  2);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  -  2);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  -  2);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets    -    1);    	non-compiled	[CE]  not  a  statement	66	None	replace
344	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	53	None	replace
345	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(namespace,  name);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(namespace,  name);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(namespace,  name);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    namespace);    	non-compiled	[CE]  not  a  statement	62	None	replace
346	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace,  name.aliasingGets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    namespace);    	non-compiled	[CE]  not  a  statement	62	None	replace
347	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingSets,  name.globalSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingSets,  name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingSets,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets,    name.globalSets);    	non-compiled	[CE]  not  a  statement	1	None	replace
348	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets  +  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets  +  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	21	None	replace
349	[BUG]  [BUGGY]  Namespace  namespace  =  name.getRootName();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.getRootName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.getRootName();	  Namespace    namespace    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	32	None	replace
350	[BUG]  [BUGGY]  Namespace  namespace  =  name.getNamespaceReference();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  name.getNamespaceReference();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.getNamespaceReference();	  Namespace    namespace    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	32	None	replace
351	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace));	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	53	None	replace
352	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  nameSpace);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  nameSpace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  nameSpace);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	53	None	replace
353	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets)+  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets)+  1;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets)+  1;	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	13	None	replace
354	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  inlineAliasIfPossible(ref,  namespace));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  inlineAliasIfPossible(ref,  namespace));	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name);    	non-compiled	[CE]  not  a  statement	65	None	replace
355	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  name.scope);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  name.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
356	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  inlineAliasIfPossible(ref,  namespace));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  inlineAliasIfPossible(ref,  namespace));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
357	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  name.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  name.type);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	74	None	replace
358	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  nameMap);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  nameMap);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  nameMap);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    namespace);    	non-compiled	[CE]  not  a  statement	62	None	replace
359	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets)+  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets)+  1;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets)+  1;	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	20	None	replace
360	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets  -  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	20	None	replace
361	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope.aliasingGets);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	26	None	replace
362	[BUG]  [BUGGY]  Namespace  refs  =  name.refs.getNamespace();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  name.refs.getNamespace();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  name.refs.getNamespace();	  Namespace    refs    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	58	None	replace
363	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  2);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  2);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  2);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    -    1);    	non-compiled	[CE]  not  a  statement	63	None	replace
364	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.refs);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.refs);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.refs);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.type);    	non-compiled	[CE]  not  a  statement	25	None	replace
365	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  /  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  /  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  /  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	27	None	replace
366	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.values());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.values());  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.values());	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.refs);    	non-compiled	[CE]  not  a  statement	46	None	replace
367	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  namespace);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayListWithNames(name.globalSets);    	non-compiled	[CE]  not  a  statement	60	None	replace
368	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  -  1,  namespace);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  -  1,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  -  1,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets    -    1);    	non-compiled	[CE]  not  a  statement	66	None	replace
369	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  >  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  >  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  >  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets    -    1);    	non-compiled	[CE]  not  a  statement	66	None	replace
370	[BUG]  [BUGGY]  Name  ref  =  name.getFunctionName(null);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.getFunctionName(null);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getFunctionName(null);	  Name    ref    =    name.getFunctionName();    	non-compiled	[CE]  not  a  statement	59	None	replace
371	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.localSets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    name.localSets);    	non-compiled	[CE]  not  a  statement	52	None	replace
372	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets)+  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets)+  1;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets)+  1;	  List    <    Ref>    refs    =    Lists.newArrayList(name,    name.localSets);    	non-compiled	[CE]  not  a  statement	52	None	replace
373	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(namespace.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(namespace.globalSets,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(namespace.globalSets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	11	None	replace
374	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name,  name.localSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	11	None	replace
375	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets)+  1;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets)+  1;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets)+  1;	  List    <    Ref>    refs    =    Lists.newArrayListIfNull(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	11	None	replace
376	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets  -  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name.globalSets);    	non-compiled	[CE]  not  a  statement	48	None	replace
377	[BUG]  [BUGGY]  Set  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Set  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Set  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	16	None	replace
378	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.values);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.values);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.values);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.type);    	non-compiled	[CE]  not  a  statement	40	None	replace
379	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.refs);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.refs);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.refs);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.type);    	non-compiled	[CE]  not  a  statement	40	None	replace
380	[BUG]  [BUGGY]  Set  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Set  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Set  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name,    name.refs);    	non-compiled	[CE]  not  a  statement	76	None	replace
381	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.refs);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.refs);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name,    name.refs);    	non-compiled	[CE]  not  a  statement	76	None	replace
382	[BUG]  [BUGGY]  Name[]  refs  =  name.removeNames();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.removeNames();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.removeNames();	  Name[]    refs    =    name.getNames();    	non-compiled	[CE]  not  a  statement	34	None	replace
383	[BUG]  [BUGGY]  Name[]  refs  =  name.removeRefs();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.removeRefs();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.removeRefs();	  Name[]    refs    =    name.getNames();    	non-compiled	[CE]  not  a  statement	34	None	replace
384	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.localSets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.localSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets,    name.globalSets);    	non-compiled	[CE]  not  a  statement	15	None	replace
385	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets,  namespace);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets,  namespace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	2	None	replace
386	[BUG]  [BUGGY]  Name  ref  =  nameMap.remove(name);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  nameMap.remove(name);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.remove(name);	  Name    ref    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	57	None	replace
387	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name,  nameSpace);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  nameMap.get(name,  nameSpace);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.get(name,  nameSpace);	  Name    ref    =    nameMap.get(name);    	non-compiled	[CE]  not  a  statement	57	None	replace
388	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalNames);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalNames);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalNames);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.scope);    	non-compiled	[CE]  not  a  statement	23	None	replace
389	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets)+  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets)+  1;  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets)+  1;	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.localSets);    	non-compiled	[CE]  not  a  statement	17	None	replace
390	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  >  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  >  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  >  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    -    1);    	non-compiled	[CE]  not  a  statement	14	None	replace
391	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  nameMap);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  nameMap);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  nameMap);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    nameSpace);    	non-compiled	[CE]  not  a  statement	64	None	replace
392	[BUG]  [BUGGY]  Name[]  refs  =  name.removeAllRefs();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name[]  refs  =  name.removeAllRefs();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.removeAllRefs();	  Name[]    refs    =    name.globalSets();    	non-compiled	[CE]  not  a  statement	30	None	replace
393	[BUG]  [BUGGY]  List  <  Ref>  refs  =  new  ArrayList  <  Ref>(Lists.newLinkedList());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  new  ArrayList  <  Ref>(Lists.newLinkedList());  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  new  ArrayList  <  Ref>(Lists.newLinkedList());	  List    <    Ref>    refs    =    Lists.newLinkedList();    	non-compiled	[CE]  not  a  statement	9	None	replace
394	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets  -  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases,    name.globalSets);    	non-compiled	[CE]  not  a  statement	18	None	replace
395	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets  -  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets  -  1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    name.localSets);    	non-compiled	[CE]  not  a  statement	50	None	replace
396	[BUG]  [BUGGY]  Set  <  Ref>  refs  =  Lists.newArrayList(name.globalSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Set  <  Ref>  refs  =  Lists.newArrayList(name.globalSets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Set  <  Ref>  refs  =  Lists.newArrayList(name.globalSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.globalSets);    	non-compiled	[CE]  not  a  statement	47	None	replace
397	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newLinkedListWithCapacity(1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newLinkedListWithCapacity(1);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newLinkedListWithCapacity(1);	  List    <    Ref>    refs    =    Lists.newArrayListWithCapacity(1);    	non-compiled	[CE]  not  a  statement	72	None	replace
398	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.localNames);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.localNames);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.localNames);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    name.localNames);    	non-compiled	[CE]  not  a  statement	78	None	replace
399	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.localNames);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.localNames);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace.localNames);	  List    <    Ref>    refs    =    Lists.newArrayList(name,    name.localNames);    	non-compiled	[CE]  not  a  statement	78	None	replace
400	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  4);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  4);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  4);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	12	None	replace
401	[BUG]  [BUGGY]  Name  ref  =  name.removeFullName();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.removeFullName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.removeFullName();	  Name    ref    =    name.getFullName();    	non-compiled	[CE]  not  a  statement	56	None	replace
402	[BUG]  [BUGGY]  Name  ref  =  name.ref();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.ref();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.ref();	  Name    ref    =    name.getFullName();    	non-compiled	[CE]  not  a  statement	56	None	replace
403	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalNames);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalNames);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalNames);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.scope);    	non-compiled	[CE]  not  a  statement	41	None	replace
404	[BUG]  [BUGGY]  Namespace  refs  =  namespace.getFunctionName();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  refs  =  namespace.getFunctionName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  namespace.getFunctionName();	  Namespace    refs    =    namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	70	None	replace
405	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope.aliasingGets);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	39	None	replace
406	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  4);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  4);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  4);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets    +    1);    	non-compiled	[CE]  not  a  statement	5	None	replace
407	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(ref.scope);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(ref.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(ref.scope);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	71	None	replace
408	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(name.scope);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Namespace  namespace  =  nameMap.get(name.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(name.scope);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	71	None	replace
409	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.scope.aliasingGets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.scope.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.scope.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames,    name.aliasingGets);    	non-compiled	[CE]  not  a  statement	21	None	replace
410	[BUG]  [BUGGY]  Name  ref  =  name.removeName();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  Name  ref  =  name.removeName();  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.removeName();	  Name    ref    =    name.getName();    	non-compiled	[CE]  not  a  statement	33	None	replace
411	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace),  name.scope);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace),  name.scope);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace),  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
412	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  nameSpace,  inlineAliasIfPossible(ref,  namespace));  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  nameSpace,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  nameSpace,  inlineAliasIfPossible(ref,  namespace));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
413	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  inlineAliasIfPossible(ref,  namespace));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  inlineAliasIfPossible(ref,  namespace));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace,    inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  not  a  statement	73	None	replace
414	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace,  name.aliasingGets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {        [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace,  name.aliasingGets);  [BUGGY]      for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    namespace);    	non-compiled	[CE]  not  a  statement	44	None	replace
