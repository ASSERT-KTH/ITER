bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets);    	non-compiled	[CE]  not  a  statement	5	None	replace
2	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets);    	non-compiled	[CE]  not  a  statement	5	None	replace
3	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets);    	non-compiled	[CE]  not  a  statement	5	None	replace
4	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.localSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.localSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets);    	non-compiled	[CE]  not  a  statement	5	None	replace
5	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets);    	non-compiled	[CE]  not  a  statement	1	None	replace
6	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.type);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.type);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets);    	non-compiled	[CE]  not  a  statement	1	None	replace
7	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets);    	non-compiled	[CE]  not  a  statement	1	None	replace
8	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList();    	non-compiled	[CE]  not  a  statement	2	None	replace
9	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newLinkedList();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newLinkedList();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newLinkedList();	  List    <    Ref>    refs    =    Lists.newArrayList();    	non-compiled	[CE]  not  a  statement	2	None	replace
10	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(0);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(0);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(0);	  List    <    Ref>    refs    =    Lists.newArrayList();    	non-compiled	[CE]  not  a  statement	2	None	replace
11	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListIfNull(name.globalSets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList();    	non-compiled	[CE]  not  a  statement	2	None	replace
12	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	4	None	replace
13	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	4	None	replace
14	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  1);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	4	None	replace
15	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	4	None	replace
16	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	4	None	replace
17	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases);    	non-compiled	[CE]  not  a  statement	9	None	replace
18	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases);    	non-compiled	[CE]  not  a  statement	9	None	replace
19	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases);    	non-compiled	[CE]  not  a  statement	9	None	replace
20	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases);    	non-compiled	[CE]  not  a  statement	9	None	replace
21	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames);    	non-compiled	[CE]  not  a  statement	7	None	replace
22	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames);    	non-compiled	[CE]  not  a  statement	7	None	replace
23	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.scope);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.scope);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames);    	non-compiled	[CE]  not  a  statement	7	None	replace
24	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalNames);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames);    	non-compiled	[CE]  not  a  statement	7	None	replace
25	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.type);  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.type);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames);    	non-compiled	[CE]  not  a  statement	7	None	replace
26	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets);    	non-compiled	[CE]  not  a  statement	3	None	replace
27	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  1);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets);    	non-compiled	[CE]  not  a  statement	3	None	replace
28	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.type);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.type);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets);    	non-compiled	[CE]  not  a  statement	3	None	replace
29	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets);    	non-compiled	[CE]  not  a  statement	3	None	replace
30	[BUG]  [BUGGY]  Name[]  refs  =  name.globalSets();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Name[]  refs  =  name.globalSets();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.globalSets();	      	non-compiled	[CE]  not  a  statement	8	None	replace
31	[BUG]  [BUGGY]  Name[]  refs  =  name.getRefs();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Name[]  refs  =  name.getRefs();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.getRefs();	      	non-compiled	[CE]  not  a  statement	8	None	replace
32	[BUG]  [BUGGY]  Namespace  namespace  =  name.getNamespace();  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Namespace  namespace  =  name.getNamespace();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.getNamespace();	      	non-compiled	[CE]  not  a  statement	8	None	replace
33	[BUG]  [BUGGY]  Name  ref  =  name.getName();  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Name  ref  =  name.getName();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getName();	      	non-compiled	[CE]  not  a  statement	8	None	replace
34	[BUG]  [BUGGY]  Name[]  refs  =  name.getNames();  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Name[]  refs  =  name.getNames();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.getNames();	      	non-compiled	[CE]  not  a  statement	8	None	replace
35	[BUG]  [BUGGY]  Name[]  refs  =  name.getReferences();  [CE]  not  a  statement  [FE]                                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Name[]  refs  =  name.getReferences();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name[]  refs  =  name.getReferences();	      	non-compiled	[CE]  not  a  statement	8	None	replace
36	[BUG]  [BUGGY]  Name  ref  =  name.getReference();  [CE]  not  a  statement  [FE]                                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Name  ref  =  name.getReference();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getReference();	      	non-compiled	[CE]  not  a  statement	8	None	replace
37	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values);    	non-compiled	[CE]  not  a  statement	10	None	replace
38	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values);    	non-compiled	[CE]  not  a  statement	10	None	replace
39	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values);    	non-compiled	[CE]  not  a  statement	10	None	replace
40	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.type);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.type);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.type);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values);    	non-compiled	[CE]  not  a  statement	10	None	replace
41	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  name.scope);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values);    	non-compiled	[CE]  not  a  statement	10	None	replace
42	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  name.refs);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	11	None	replace
43	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	11	None	replace
44	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.globalSets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	11	None	replace
45	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	11	None	replace
46	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.refs);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.refs);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets,  name.refs);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	11	None	replace
47	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.globalSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs);    	non-compiled	[CE]  not  a  statement	6	None	replace
48	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs);    	non-compiled	[CE]  not  a  statement	6	None	replace
49	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.globalSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs);    	non-compiled	[CE]  not  a  statement	6	None	replace
50	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs);    	non-compiled	[CE]  not  a  statement	6	None	replace
51	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name.localSets);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs);    	non-compiled	[CE]  not  a  statement	6	None	replace
52	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localSets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.globalSets,    name.localSets);    	non-compiled	[CE]  not  a  statement	4	None	replace
53	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs);    	non-compiled	[CE]  not  a  statement	6	None	replace
54	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  1);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  1);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  +  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets);    	non-compiled	[CE]  not  a  statement	5	None	replace
55	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  namespace);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.values,  namespace);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.values,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.values);    	non-compiled	[CE]  not  a  statement	10	None	replace
56	[BUG]  [BUGGY]  Name  ref  =  name.getFullName();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Name  ref  =  name.getFullName();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getFullName();	      	non-compiled	[CE]  not  a  statement	8	None	replace
57	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Name  ref  =  nameMap.get(name);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  nameMap.get(name);	      	non-compiled	[CE]  not  a  statement	8	None	replace
58	[BUG]  [BUGGY]  Namespace  refs  =  name.getNamespace();  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Namespace  refs  =  name.getNamespace();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  name.getNamespace();	      	non-compiled	[CE]  not  a  statement	8	None	replace
59	[BUG]  [BUGGY]  Name  ref  =  name.getFunctionName();  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Name  ref  =  name.getFunctionName();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Name  ref  =  name.getFunctionName();	      	non-compiled	[CE]  not  a  statement	8	None	replace
60	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithNames(name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList();    	non-compiled	[CE]  not  a  statement	2	None	replace
61	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(name.globalSets);	  List    <    Ref>    refs    =    Lists.newArrayList();    	non-compiled	[CE]  not  a  statement	2	None	replace
62	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	11	None	replace
63	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  1);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  1);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localSets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localSets);    	non-compiled	[CE]  not  a  statement	3	None	replace
64	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  nameSpace);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  nameSpace);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  nameSpace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases);    	non-compiled	[CE]  not  a  statement	9	None	replace
65	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.allAliases,  name);	  List    <    Ref>    refs    =    Lists.newArrayList(name.allAliases);    	non-compiled	[CE]  not  a  statement	9	None	replace
66	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  -  1);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  -  1);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.aliasingGets  -  1);	  List    <    Ref>    refs    =    Lists.newArrayList(name.aliasingGets);    	non-compiled	[CE]  not  a  statement	5	None	replace
67	[BUG]  [BUGGY]  Namespace  namespace  =  namespace.getNamespace();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Namespace  namespace  =  namespace.getNamespace();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  namespace.getNamespace();	      	non-compiled	[CE]  not  a  statement	8	None	replace
68	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(name);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Namespace  namespace  =  nameMap.get(name);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(name);	      	non-compiled	[CE]  not  a  statement	8	None	replace
69	[BUG]  [BUGGY]  Namespace  namespace  =  name.namespace();  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Namespace  namespace  =  name.namespace();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  name.namespace();	      	non-compiled	[CE]  not  a  statement	8	None	replace
70	[BUG]  [BUGGY]  Namespace  refs  =  namespace.getNamespace();  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Namespace  refs  =  namespace.getNamespace();  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  refs  =  namespace.getNamespace();	      	non-compiled	[CE]  not  a  statement	8	None	replace
71	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(ref);  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  Namespace  namespace  =  nameMap.get(ref);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	Namespace  namespace  =  nameMap.get(ref);	      	non-compiled	[CE]  not  a  statement	8	None	replace
72	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(1);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(1);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayListWithCapacity(1);	  List    <    Ref>    refs    =    Lists.newArrayList();    	non-compiled	[CE]  not  a  statement	2	None	replace
73	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  inlineAliasIfPossible(ref,  namespace));	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	11	None	replace
74	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.refs,  namespace,  name.aliasingGets);	  List    <    Ref>    refs    =    Lists.newArrayList(name.refs,    namespace);    	non-compiled	[CE]  not  a  statement	11	None	replace
75	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name.refs,  name);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs);    	non-compiled	[CE]  not  a  statement	6	None	replace
76	[BUG]  [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	ArrayList  <  Ref>  refs  =  Lists.newArrayList(name,  name.refs);	  ArrayList    <    Ref>    refs    =    Lists.newArrayList(name.refs);    	non-compiled	[CE]  not  a  statement	6	None	replace
77	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  namespace);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  namespace);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name.localNames,  namespace);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames);    	non-compiled	[CE]  not  a  statement	7	None	replace
78	[BUG]  [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localNames);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {      [BUGGY]  List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localNames);  [BUGGY]    for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	List  <  Ref>  refs  =  Lists.newArrayList(name,  name.localNames);	  List    <    Ref>    refs    =    Lists.newArrayList(name.localNames);    	non-compiled	[CE]  not  a  statement	7	None	replace
