bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] String propAlias = appendPropForAlias(alias, p.name); [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { [BUGGY] String propAlias = appendPropForAlias(alias, p.name); [BUGGY] Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();    [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	823	823	8	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { [BUGGY] [BUGGY] String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();    [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	823	823	8	add	
3	[BUG] [BUGGY] Node nameNode = Node.newString(Token.NAME, propAlias); [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); [BUGGY] Node nameNode = Node.newString(Token.NAME, propAlias); [BUGGY] Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	824	824	8	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); [BUGGY] [BUGGY] Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	824	824	8	add	
5	[BUG] [BUGGY] Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); [BUGGY] Node newVar = new Node(Token.VAR, nameNode)    .copyInformationFromForTree(addAfter); [BUGGY] .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); [BUGGY] [BUGGY] Node newVar = new Node(Token.VAR, nameNode)    .copyInformationFromForTree(addAfter); .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	add	
7	[BUG] [BUGGY] parent.addChildAfter(newVar, addAfter); [FE] AssertionFailedError [CONTEXT] Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); [BUGGY] parent.addChildAfter(newVar, addAfter); [BUGGY] addAfter = newVar; numStubs++; compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	827	827	8	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); [BUGGY] [BUGGY] parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	827	827	8	add	
9	[BUG] [BUGGY] addAfter = newVar; [FE] AssertionFailedError [CONTEXT] Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); [BUGGY] addAfter = newVar; [BUGGY] numStubs++; compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	828	828	8	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); [BUGGY] [BUGGY] addAfter = newVar; numStubs++; compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	828	828	8	add	
11	[BUG] [BUGGY] numStubs++; [FE] AssertionFailedError [CONTEXT] int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; [BUGGY] numStubs++; [BUGGY] compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; [BUGGY] [BUGGY] numStubs++; compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	add	
13	[BUG] [BUGGY] compiler.reportCodeChange(); [FE] AssertionFailedError [CONTEXT] if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; [BUGGY] compiler.reportCodeChange(); [BUGGY]    if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } } } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; [BUGGY] [BUGGY] compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } } } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	830	830	8	add	
15	[BUG] [BUGGY] if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { [FE] AssertionFailedError [CONTEXT] Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();   [BUGGY] if (p.refs.get(0).node.getLastChild().getBooleanProp(    Node.IS_CONSTANT_NAME)) { [BUGGY] Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } } } return numStubs; } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();   [BUGGY] [BUGGY] if (p.refs.get(0).node.getLastChild().getBooleanProp(    Node.IS_CONSTANT_NAME)) { Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } } } return numStubs; } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	834	835	8	add	
17	[BUG] [BUGGY] List<Ref> refs = Lists.newArrayList(name.refs); [FE] AssertionFailedError [CONTEXT] if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {   [BUGGY] List<Ref> refs = Lists.newArrayList(name.refs); [BUGGY] for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {  if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } [CLASS] CollapseProperties 1 [METHOD] inlineAliases [RETURN_TYPE] void  GlobalNamespace namespace [VARIABLES] AbstractCompiler compiler Ref ref boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap GlobalNamespace namespace Deque workList Name name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {   [BUGGY] [BUGGY] List<Ref> refs = Lists.newArrayList(name.refs); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {  if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } [CLASS] CollapseProperties 1 [METHOD] inlineAliases [RETURN_TYPE] void  GlobalNamespace namespace [VARIABLES] AbstractCompiler compiler Ref ref boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap GlobalNamespace namespace Deque workList Name name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	168	168	8	add	
19	[BUG] [BUGGY] for (Ref ref : refs) { [FE] AssertionFailedError [CONTEXT] if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {   List<Ref> refs = Lists.newArrayList(name.refs); [BUGGY] for (Ref ref : refs) { [BUGGY] if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {  if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } [CLASS] CollapseProperties 1 [METHOD] inlineAliases [RETURN_TYPE] void  GlobalNamespace namespace [VARIABLES] AbstractCompiler compiler Ref ref boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap GlobalNamespace namespace Deque workList Name name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {   List<Ref> refs = Lists.newArrayList(name.refs); [BUGGY] [BUGGY] for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {  if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } [CLASS] CollapseProperties 1 [METHOD] inlineAliases [RETURN_TYPE] void  GlobalNamespace namespace [VARIABLES] AbstractCompiler compiler Ref ref boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap GlobalNamespace namespace Deque workList Name name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	add	
21	[BUG] [BUGGY] if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { [FE] AssertionFailedError [CONTEXT] if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {   List<Ref> refs = Lists.newArrayList(name.refs); for (Ref ref : refs) { [BUGGY] if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { [BUGGY]  if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } [CLASS] CollapseProperties 1 [METHOD] inlineAliases [RETURN_TYPE] void  GlobalNamespace namespace [VARIABLES] AbstractCompiler compiler Ref ref boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap GlobalNamespace namespace Deque workList Name name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {   List<Ref> refs = Lists.newArrayList(name.refs); for (Ref ref : refs) { [BUGGY] [BUGGY] if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {  if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } [CLASS] CollapseProperties 1 [METHOD] inlineAliases [RETURN_TYPE] void  GlobalNamespace namespace [VARIABLES] AbstractCompiler compiler Ref ref boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap GlobalNamespace namespace Deque workList Name name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	add	
24	[BUG] [BUGGY] flattenNameRef(alias, r.node, rParent, originalName); [FE] AssertionFailedError [CONTEXT] for (Ref r : n.refs) { Node rParent = r.node.getParent();      if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { [BUGGY] flattenNameRef(alias, r.node, rParent, originalName); [BUGGY] } } }    if (n.props != null) { for (Name p : n.props) { flattenPrefixes(alias, p, 1); [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	
25	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (Ref r : n.refs) { Node rParent = r.node.getParent();      if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { [BUGGY] [BUGGY] flattenNameRef(alias, r.node, rParent, originalName); } } }    if (n.props != null) { for (Name p : n.props) { flattenPrefixes(alias, p, 1); [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	add	
26	[BUG] [BUGGY] Node ref = NodeUtil.newName( compiler.getCodingConvention(), alias, n, originalName); [FE] AssertionFailedError [CONTEXT] private void flattenNameRef(String alias, Node n, Node parent, String originalName) {         [BUGGY] Node ref = NodeUtil.newName(  compiler.getCodingConvention(), alias, n, originalName); [BUGGY] compiler.getCodingConvention(), alias, n, originalName); NodeUtil.copyNameAnnotations(n.getLastChild(), ref); parent.replaceChild(n, ref); compiler.reportCodeChange(); } [CLASS] CollapseProperties 1 [METHOD] flattenNameRef [RETURN_TYPE] void  String alias Node n Node parent String originalName [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node n parent ref List globalNames refs String alias originalName Map nameMap  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24712082528608617	426	427	8	replace	
27	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void flattenNameRef(String alias, Node n, Node parent, String originalName) {         [BUGGY] [BUGGY] Node ref = NodeUtil.newName(  compiler.getCodingConvention(), alias, n, originalName); compiler.getCodingConvention(), alias, n, originalName); NodeUtil.copyNameAnnotations(n.getLastChild(), ref); parent.replaceChild(n, ref); compiler.reportCodeChange(); } [CLASS] CollapseProperties 1 [METHOD] flattenNameRef [RETURN_TYPE] void  String alias Node n Node parent String originalName [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node n parent ref List globalNames refs String alias originalName Map nameMap  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24712082528608617	426	427	8	add	
28	[BUG] [BUGGY] NodeUtil.copyNameAnnotations(n.getLastChild(), ref); [FE] AssertionFailedError [CONTEXT]         Node ref = NodeUtil.newName( compiler.getCodingConvention(), alias, n, originalName); [BUGGY] NodeUtil.copyNameAnnotations(n.getLastChild(), ref); [BUGGY] parent.replaceChild(n, ref); compiler.reportCodeChange(); } [CLASS] CollapseProperties 1 [METHOD] flattenNameRef [RETURN_TYPE] void  String alias Node n Node parent String originalName [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node n parent ref List globalNames refs String alias originalName Map nameMap  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24712082528608617	428	428	8	replace	
29	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]         Node ref = NodeUtil.newName( compiler.getCodingConvention(), alias, n, originalName); [BUGGY] [BUGGY] NodeUtil.copyNameAnnotations(n.getLastChild(), ref); parent.replaceChild(n, ref); compiler.reportCodeChange(); } [CLASS] CollapseProperties 1 [METHOD] flattenNameRef [RETURN_TYPE] void  String alias Node n Node parent String originalName [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node n parent ref List globalNames refs String alias originalName Map nameMap  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24712082528608617	428	428	8	add	
30	[BUG] [BUGGY] parent.replaceChild(n, ref); [FE] AssertionFailedError [CONTEXT]        Node ref = NodeUtil.newName( compiler.getCodingConvention(), alias, n, originalName); NodeUtil.copyNameAnnotations(n.getLastChild(), ref); [BUGGY] parent.replaceChild(n, ref); [BUGGY] compiler.reportCodeChange(); } [CLASS] CollapseProperties 1 [METHOD] flattenNameRef [RETURN_TYPE] void  String alias Node n Node parent String originalName [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node n parent ref List globalNames refs String alias originalName Map nameMap  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24712082528608617	429	429	8	replace	
31	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]        Node ref = NodeUtil.newName( compiler.getCodingConvention(), alias, n, originalName); NodeUtil.copyNameAnnotations(n.getLastChild(), ref); [BUGGY] [BUGGY] parent.replaceChild(n, ref); compiler.reportCodeChange(); } [CLASS] CollapseProperties 1 [METHOD] flattenNameRef [RETURN_TYPE] void  String alias Node n Node parent String originalName [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node n parent ref List globalNames refs String alias originalName Map nameMap  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24712082528608617	429	429	8	add	
32	[BUG] [BUGGY] compiler.reportCodeChange(); [FE] AssertionFailedError [CONTEXT]       Node ref = NodeUtil.newName( compiler.getCodingConvention(), alias, n, originalName); NodeUtil.copyNameAnnotations(n.getLastChild(), ref); parent.replaceChild(n, ref); [BUGGY] compiler.reportCodeChange(); [BUGGY] } [CLASS] CollapseProperties 1 [METHOD] flattenNameRef [RETURN_TYPE] void  String alias Node n Node parent String originalName [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node n parent ref List globalNames refs String alias originalName Map nameMap  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24712082528608617	430	430	8	replace	
33	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]       Node ref = NodeUtil.newName( compiler.getCodingConvention(), alias, n, originalName); NodeUtil.copyNameAnnotations(n.getLastChild(), ref); parent.replaceChild(n, ref); [BUGGY] [BUGGY] compiler.reportCodeChange(); } [CLASS] CollapseProperties 1 [METHOD] flattenNameRef [RETURN_TYPE] void  String alias Node n Node parent String originalName [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node n parent ref List globalNames refs String alias originalName Map nameMap  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24712082528608617	430	430	8	add	
34	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT]      Node ref = NodeUtil.newName( compiler.getCodingConvention(), alias, n, originalName); NodeUtil.copyNameAnnotations(n.getLastChild(), ref); parent.replaceChild(n, ref); compiler.reportCodeChange(); [BUGGY] } [BUGGY]  [CLASS] CollapseProperties 1 [METHOD] flattenNameRef [RETURN_TYPE] void  String alias Node n Node parent String originalName [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node n parent ref List globalNames refs String alias originalName Map nameMap  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24712082528608617	431	431	8	replace	
35	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]      Node ref = NodeUtil.newName( compiler.getCodingConvention(), alias, n, originalName); NodeUtil.copyNameAnnotations(n.getLastChild(), ref); parent.replaceChild(n, ref); compiler.reportCodeChange(); [BUGGY] [BUGGY] } [CLASS] CollapseProperties 1 [METHOD] flattenNameRef [RETURN_TYPE] void  String alias Node n Node parent String originalName [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node n parent ref List globalNames refs String alias originalName Map nameMap  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24712082528608617	431	431	8	add	
36	[BUG] [BUGGY] String originalName = n.fullName(); [FE] AssertionFailedError [CONTEXT] private void flattenReferencesTo(Name n, String alias) { if (n.refs != null) { [BUGGY] String originalName = n.fullName(); [BUGGY] for (Ref r : n.refs) { Node rParent = r.node.getParent();      if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	
37	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void flattenReferencesTo(Name n, String alias) { if (n.refs != null) { [BUGGY] [BUGGY] String originalName = n.fullName(); for (Ref r : n.refs) { Node rParent = r.node.getParent();      if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	add	
38	[BUG] [BUGGY] for (Ref r : n.refs) { [FE] AssertionFailedError [CONTEXT] private void flattenReferencesTo(Name n, String alias) { if (n.refs != null) { String originalName = n.fullName(); [BUGGY] for (Ref r : n.refs) { [BUGGY] Node rParent = r.node.getParent();      if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { flattenNameRef(alias, r.node, rParent, originalName); [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	
39	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void flattenReferencesTo(Name n, String alias) { if (n.refs != null) { String originalName = n.fullName(); [BUGGY] [BUGGY] for (Ref r : n.refs) { Node rParent = r.node.getParent();      if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { flattenNameRef(alias, r.node, rParent, originalName); [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	add	
40	[BUG] [BUGGY] Node rParent = r.node.getParent(); [FE] AssertionFailedError [CONTEXT] private void flattenReferencesTo(Name n, String alias) { if (n.refs != null) { String originalName = n.fullName(); for (Ref r : n.refs) { [BUGGY] Node rParent = r.node.getParent(); [BUGGY]       if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { flattenNameRef(alias, r.node, rParent, originalName); } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	
41	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void flattenReferencesTo(Name n, String alias) { if (n.refs != null) { String originalName = n.fullName(); for (Ref r : n.refs) { [BUGGY] [BUGGY] Node rParent = r.node.getParent();      if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { flattenNameRef(alias, r.node, rParent, originalName); } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	add	
42	[BUG] [BUGGY] if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { [FE] AssertionFailedError [CONTEXT] if (n.refs != null) { String originalName = n.fullName(); for (Ref r : n.refs) { Node rParent = r.node.getParent();      [BUGGY] if (!NodeUtil.isObjectLitKey(r.node, rParent) &&   (r.getTwin() == null || r.isSet())) { [BUGGY] (r.getTwin() == null || r.isSet())) { flattenNameRef(alias, r.node, rParent, originalName); } } }    if (n.props != null) { [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	replace	
43	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (n.refs != null) { String originalName = n.fullName(); for (Ref r : n.refs) { Node rParent = r.node.getParent();      [BUGGY] [BUGGY] if (!NodeUtil.isObjectLitKey(r.node, rParent) &&   (r.getTwin() == null || r.isSet())) { (r.getTwin() == null || r.isSet())) { flattenNameRef(alias, r.node, rParent, originalName); } } }    if (n.props != null) { [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	327	328	8	add	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { flattenNameRef(alias, r.node, rParent, originalName); } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	331	331	8	replace	
45	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { flattenNameRef(alias, r.node, rParent, originalName); } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	331	331	8	add	
46	[BUG] [BUGGY] for (Name p : n.props) { [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { [BUGGY] for (Name p : n.props) { [BUGGY] if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();  [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2286647801900118	821	821	8	replace	
47	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { [BUGGY] [BUGGY] for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();  [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2286647801900118	821	821	8	add	
48	[BUG] [BUGGY] if (p.needsToBeStubbed()) { [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { [BUGGY] if (p.needsToBeStubbed()) { [BUGGY] String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();   [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2286647801900118	822	822	8	replace	
49	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { [BUGGY] [BUGGY] if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange();   [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2286647801900118	822	822	8	add	
50	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] numStubs++; compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } [BUGGY] } [BUGGY] } return numStubs; } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2286647801900118	839	839	8	replace	
51	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] numStubs++; compiler.reportCodeChange();   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } [BUGGY] [BUGGY] } } return numStubs; } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2286647801900118	839	839	8	add	
52	[BUG] [BUGGY] flattenReferencesTo(p, propAlias); [FE] AssertionFailedError [CONTEXT] private void flattenReferencesToCollapsibleDescendantNames( Name n, String alias) { if (n.props == null) return; for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { [BUGGY] flattenReferencesTo(p, propAlias); [BUGGY] } flattenReferencesToCollapsibleDescendantNames(p, propAlias); } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.22360679774997896	302	302	8	replace	
53	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void flattenReferencesToCollapsibleDescendantNames( Name n, String alias) { if (n.props == null) return; for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { [BUGGY] [BUGGY] flattenReferencesTo(p, propAlias); } flattenReferencesToCollapsibleDescendantNames(p, propAlias); } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.22360679774997896	302	302	8	add	
54	[BUG] [BUGGY] if (n.refs != null) { [FE] AssertionFailedError [CONTEXT] private void flattenReferencesTo(Name n, String alias) { [BUGGY] if (n.refs != null) { [BUGGY] String originalName = n.fullName(); for (Ref r : n.refs) { Node rParent = r.node.getParent();      if (!NodeUtil.isObjectLitKey(r.node, rParent) && [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.22360679774997896	317	317	8	replace	
55	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void flattenReferencesTo(Name n, String alias) { [BUGGY] [BUGGY] if (n.refs != null) { String originalName = n.fullName(); for (Ref r : n.refs) { Node rParent = r.node.getParent();      if (!NodeUtil.isObjectLitKey(r.node, rParent) && [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.22360679774997896	317	317	8	add	
56	[BUG] [BUGGY] if (n.props != null) { [FE] AssertionFailedError [CONTEXT] if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { flattenNameRef(alias, r.node, rParent, originalName); } } }    [BUGGY] if (n.props != null) { [BUGGY] for (Name p : n.props) { flattenPrefixes(alias, p, 1); } } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.22360679774997896	337	337	8	replace	
57	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) { flattenNameRef(alias, r.node, rParent, originalName); } } }    [BUGGY] [BUGGY] if (n.props != null) { for (Name p : n.props) { flattenPrefixes(alias, p, 1); } } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesTo [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler Ref r boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node rParent List globalNames refs String alias originalName Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.22360679774997896	337	337	8	add	
59	[BUG] [BUGGY] updateObjLitOrFunctionDeclaration(n, alias); [FE] AssertionFailedError [CONTEXT] private void collapseDeclarationOfNameAndDescendants(Name n, String alias) { boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();  if (n.canCollapse() && canCollapseChildNames) { [BUGGY] updateObjLitOrFunctionDeclaration(n, alias); [BUGGY] } if (n.props != null) { for (Name p : n.props) {  collapseDeclarationOfNameAndDescendants( p, appendPropForAlias(alias, p.name)); if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && [CLASS] CollapseProperties 1 [METHOD] collapseDeclarationOfNameAndDescendants [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	446	446	8	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void collapseDeclarationOfNameAndDescendants(Name n, String alias) { boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();  if (n.canCollapse() && canCollapseChildNames) { [BUGGY] [BUGGY] updateObjLitOrFunctionDeclaration(n, alias); } if (n.props != null) { for (Name p : n.props) {  collapseDeclarationOfNameAndDescendants( p, appendPropForAlias(alias, p.name)); if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && [CLASS] CollapseProperties 1 [METHOD] collapseDeclarationOfNameAndDescendants [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	446	446	8	add	
61	[BUG] [BUGGY] switch (n.declaration.node.getParent().getType()) { [FE] AssertionFailedError [CONTEXT] private void updateObjLitOrFunctionDeclaration(Name n, String alias) { [BUGGY] switch (n.declaration.node.getParent().getType()) { [BUGGY] case Token.ASSIGN: updateObjLitOrFunctionDeclarationAtAssignNode(n, alias); break; case Token.VAR: updateObjLitOrFunctionDeclarationAtVarNode(n); break; case Token.FUNCTION: updateFunctionDeclarationAtFunctionNode(n); break; } [CLASS] CollapseProperties 1 [METHOD] updateObjLitOrFunctionDeclaration [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	553	553	8	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void updateObjLitOrFunctionDeclaration(Name n, String alias) { [BUGGY] [BUGGY] switch (n.declaration.node.getParent().getType()) { case Token.ASSIGN: updateObjLitOrFunctionDeclarationAtAssignNode(n, alias); break; case Token.VAR: updateObjLitOrFunctionDeclarationAtVarNode(n); break; case Token.FUNCTION: updateFunctionDeclarationAtFunctionNode(n); break; } [CLASS] CollapseProperties 1 [METHOD] updateObjLitOrFunctionDeclaration [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	553	553	8	add	
64	[BUG] [BUGGY] Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { [BUGGY] Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); [BUGGY] Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	817	817	8	replace	
65	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { [BUGGY] [BUGGY] Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	817	817	8	add	
66	[BUG] [BUGGY] Preconditions.checkNotNull(addAfter); [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); [BUGGY] Preconditions.checkNotNull(addAfter); [BUGGY] int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	818	818	8	replace	
67	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); [BUGGY] [BUGGY] Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	818	818	8	add	
68	[BUG] [BUGGY] int numStubs = 0; [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); [BUGGY] int numStubs = 0; [BUGGY] if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	819	819	8	replace	
69	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); [BUGGY] [BUGGY] int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	819	819	8	add	
70	[BUG] [BUGGY] if (n.props != null) { [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; [BUGGY] if (n.props != null) { [BUGGY] for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange(); [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	820	820	8	replace	
71	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; [BUGGY] [BUGGY] if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange(); [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	820	820	8	add	
72	[BUG] [BUGGY] return numStubs; [FE] AssertionFailedError [CONTEXT]   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } } } [BUGGY] return numStubs; [BUGGY] } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	841	841	8	replace	
73	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } } } [BUGGY] [BUGGY] return numStubs; } [CLASS] CollapseProperties 1 [METHOD] addStubsForUndeclaredProperties [RETURN_TYPE] int  Name n String alias Node parent Node addAfter [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node addAfter nameNode newVar parent List globalNames refs String alias propAlias Map nameMap int numStubs Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.21442250696755896	841	841	8	add	
74	[BUG] [BUGGY] for (Name p : n.props) { [FE] AssertionFailedError [CONTEXT] private void flattenReferencesToCollapsibleDescendantNames( Name n, String alias) { if (n.props == null) return; [BUGGY] for (Name p : n.props) { [BUGGY] String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { flattenReferencesTo(p, propAlias); } flattenReferencesToCollapsibleDescendantNames(p, propAlias); } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	
75	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void flattenReferencesToCollapsibleDescendantNames( Name n, String alias) { if (n.props == null) return; [BUGGY] [BUGGY] for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { flattenReferencesTo(p, propAlias); } flattenReferencesToCollapsibleDescendantNames(p, propAlias); } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	add	
76	[BUG] [BUGGY] String propAlias = appendPropForAlias(alias, p.name); [FE] AssertionFailedError [CONTEXT] private void flattenReferencesToCollapsibleDescendantNames( Name n, String alias) { if (n.props == null) return; for (Name p : n.props) { [BUGGY] String propAlias = appendPropForAlias(alias, p.name); [BUGGY]  if (p.canCollapse()) { flattenReferencesTo(p, propAlias); } flattenReferencesToCollapsibleDescendantNames(p, propAlias); } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	replace	
77	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void flattenReferencesToCollapsibleDescendantNames( Name n, String alias) { if (n.props == null) return; for (Name p : n.props) { [BUGGY] [BUGGY] String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { flattenReferencesTo(p, propAlias); } flattenReferencesToCollapsibleDescendantNames(p, propAlias); } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	299	299	8	add	
78	[BUG] [BUGGY] if (p.canCollapse()) { [FE] AssertionFailedError [CONTEXT] private void flattenReferencesToCollapsibleDescendantNames( Name n, String alias) { if (n.props == null) return; for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); [BUGGY] if (p.canCollapse()) { [BUGGY] flattenReferencesTo(p, propAlias); } flattenReferencesToCollapsibleDescendantNames(p, propAlias); } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	
79	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void flattenReferencesToCollapsibleDescendantNames( Name n, String alias) { if (n.props == null) return; for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); [BUGGY] [BUGGY] if (p.canCollapse()) { flattenReferencesTo(p, propAlias); } flattenReferencesToCollapsibleDescendantNames(p, propAlias); } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	add	
80	[BUG] [BUGGY] flattenReferencesToCollapsibleDescendantNames(p, propAlias); [FE] AssertionFailedError [CONTEXT] Name n, String alias) { if (n.props == null) return; for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { flattenReferencesTo(p, propAlias); } [BUGGY] flattenReferencesToCollapsibleDescendantNames(p, propAlias); [BUGGY] } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	305	305	8	replace	
81	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Name n, String alias) { if (n.props == null) return; for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { flattenReferencesTo(p, propAlias); } [BUGGY] [BUGGY] flattenReferencesToCollapsibleDescendantNames(p, propAlias); } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	305	305	8	add	
82	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] if (n.props == null) return; for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { flattenReferencesTo(p, propAlias); } flattenReferencesToCollapsibleDescendantNames(p, propAlias); [BUGGY] } [BUGGY] } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	
83	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (n.props == null) return; for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { flattenReferencesTo(p, propAlias); } flattenReferencesToCollapsibleDescendantNames(p, propAlias); [BUGGY] [BUGGY] } } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	add	
84	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { flattenReferencesTo(p, propAlias); } flattenReferencesToCollapsibleDescendantNames(p, propAlias); } [BUGGY] } [BUGGY]  [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	307	307	8	replace	
85	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { flattenReferencesTo(p, propAlias); } flattenReferencesToCollapsibleDescendantNames(p, propAlias); } [BUGGY] [BUGGY] } [CLASS] CollapseProperties 1 [METHOD] flattenReferencesToCollapsibleDescendantNames [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes initialized inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias propAlias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	307	307	8	add	
86	[BUG] [BUGGY] for (Name p : n.props) { [FE] AssertionFailedError [CONTEXT] private void collapseDeclarationOfNameAndDescendants(Name n, String alias) { boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();  if (n.canCollapse() && canCollapseChildNames) { updateObjLitOrFunctionDeclaration(n, alias); } if (n.props != null) { [BUGGY] for (Name p : n.props) { [BUGGY]  collapseDeclarationOfNameAndDescendants( p, appendPropForAlias(alias, p.name)); if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) { updateSimpleDeclaration( appendPropForAlias(alias, p.name), p, p.declaration); [CLASS] CollapseProperties 1 [METHOD] collapseDeclarationOfNameAndDescendants [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	450	450	8	replace	
87	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void collapseDeclarationOfNameAndDescendants(Name n, String alias) { boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();  if (n.canCollapse() && canCollapseChildNames) { updateObjLitOrFunctionDeclaration(n, alias); } if (n.props != null) { [BUGGY] [BUGGY] for (Name p : n.props) {  collapseDeclarationOfNameAndDescendants( p, appendPropForAlias(alias, p.name)); if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) { updateSimpleDeclaration( appendPropForAlias(alias, p.name), p, p.declaration); [CLASS] CollapseProperties 1 [METHOD] collapseDeclarationOfNameAndDescendants [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	450	450	8	add	
88	[BUG] [BUGGY] collapseDeclarationOfNameAndDescendants( p, appendPropForAlias(alias, p.name)); [FE] AssertionFailedError [CONTEXT] boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();  if (n.canCollapse() && canCollapseChildNames) { updateObjLitOrFunctionDeclaration(n, alias); } if (n.props != null) { for (Name p : n.props) {  [BUGGY] collapseDeclarationOfNameAndDescendants(   p, appendPropForAlias(alias, p.name)); [BUGGY] p, appendPropForAlias(alias, p.name)); if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) { updateSimpleDeclaration( appendPropForAlias(alias, p.name), p, p.declaration); } } [CLASS] CollapseProperties 1 [METHOD] collapseDeclarationOfNameAndDescendants [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	452	453	8	replace	
89	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();  if (n.canCollapse() && canCollapseChildNames) { updateObjLitOrFunctionDeclaration(n, alias); } if (n.props != null) { for (Name p : n.props) {  [BUGGY] [BUGGY] collapseDeclarationOfNameAndDescendants(   p, appendPropForAlias(alias, p.name)); p, appendPropForAlias(alias, p.name)); if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) { updateSimpleDeclaration( appendPropForAlias(alias, p.name), p, p.declaration); } } [CLASS] CollapseProperties 1 [METHOD] collapseDeclarationOfNameAndDescendants [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	452	453	8	add	
90	[BUG] [BUGGY] if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null &&  p.declaration.node.getParent() != null && [FE] AssertionFailedError [CONTEXT] if (n.canCollapse() && canCollapseChildNames) { updateObjLitOrFunctionDeclaration(n, alias); } if (n.props != null) { for (Name p : n.props) {  collapseDeclarationOfNameAndDescendants( p, appendPropForAlias(alias, p.name)); [BUGGY] if (!p.inExterns && canCollapseChildNames && p.declaration != null &&   p.declaration.node != null &&      p.declaration.node.getParent() != null && [BUGGY] p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) { updateSimpleDeclaration( appendPropForAlias(alias, p.name), p, p.declaration); } } } } [CLASS] CollapseProperties 1 [METHOD] collapseDeclarationOfNameAndDescendants [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	replace	
91	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (n.canCollapse() && canCollapseChildNames) { updateObjLitOrFunctionDeclaration(n, alias); } if (n.props != null) { for (Name p : n.props) {  collapseDeclarationOfNameAndDescendants( p, appendPropForAlias(alias, p.name)); [BUGGY] [BUGGY] if (!p.inExterns && canCollapseChildNames && p.declaration != null &&   p.declaration.node != null &&      p.declaration.node.getParent() != null && p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) { updateSimpleDeclaration( appendPropForAlias(alias, p.name), p, p.declaration); } } } } [CLASS] CollapseProperties 1 [METHOD] collapseDeclarationOfNameAndDescendants [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	455	457	8	add	
92	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] collapseDeclarationOfNameAndDescendants( p, appendPropForAlias(alias, p.name)); if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) { updateSimpleDeclaration( appendPropForAlias(alias, p.name), p, p.declaration); } [BUGGY] } [BUGGY] } } [CLASS] CollapseProperties 1 [METHOD] collapseDeclarationOfNameAndDescendants [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	462	462	8	replace	
93	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] collapseDeclarationOfNameAndDescendants( p, appendPropForAlias(alias, p.name)); if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) { updateSimpleDeclaration( appendPropForAlias(alias, p.name), p, p.declaration); } [BUGGY] [BUGGY] } } } [CLASS] CollapseProperties 1 [METHOD] collapseDeclarationOfNameAndDescendants [RETURN_TYPE] void  Name n String alias [VARIABLES] AbstractCompiler compiler boolean canCollapseChildNames collapsePropertiesOnExternTypes initialized inlineAliases isObjKey isQName DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs String alias Map nameMap Name n p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	462	462	8	add	
94	[BUG] [BUGGY] if (prop.indexOf('$') != -1) { [FE] AssertionFailedError [CONTEXT] private static String appendPropForAlias(String root, String prop) { [BUGGY] if (prop.indexOf('$') != -1) { [BUGGY]    prop = prop.replaceAll("\\$", "\\$0"); } return root + '$' + prop; } [CLASS] CollapseProperties 1 [METHOD] appendPropForAlias [RETURN_TYPE] String  String root String prop [VARIABLES] AbstractCompiler compiler List globalNames refs boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName String prop root Map nameMap DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	845	845	8	replace	
95	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static String appendPropForAlias(String root, String prop) { [BUGGY] [BUGGY] if (prop.indexOf('$') != -1) {    prop = prop.replaceAll("\\$", "\\$0"); } return root + '$' + prop; } [CLASS] CollapseProperties 1 [METHOD] appendPropForAlias [RETURN_TYPE] String  String root String prop [VARIABLES] AbstractCompiler compiler List globalNames refs boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName String prop root Map nameMap DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	845	845	8	add	
96	[BUG] [BUGGY] return root + '$' + prop; [FE] AssertionFailedError [CONTEXT] private static String appendPropForAlias(String root, String prop) { if (prop.indexOf('$') != -1) {    prop = prop.replaceAll("\\$", "\\$0"); } [BUGGY] return root + '$' + prop; [BUGGY] } [CLASS] CollapseProperties 1 [METHOD] appendPropForAlias [RETURN_TYPE] String  String root String prop [VARIABLES] AbstractCompiler compiler List globalNames refs boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName String prop root Map nameMap DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	851	851	8	replace	
97	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static String appendPropForAlias(String root, String prop) { if (prop.indexOf('$') != -1) {    prop = prop.replaceAll("\\$", "\\$0"); } [BUGGY] [BUGGY] return root + '$' + prop; } [CLASS] CollapseProperties 1 [METHOD] appendPropForAlias [RETURN_TYPE] String  String root String prop [VARIABLES] AbstractCompiler compiler List globalNames refs boolean canCollapseChildNames collapsePropertiesOnExternTypes discardKeys initialized inlineAliases isJsIdentifier isObjKey isObjLit isQName String prop root Map nameMap DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	851	851	8	add	
98	[BUG] [BUGGY] namespace = new GlobalNamespace(compiler, root); [FE] AssertionFailedError [CONTEXT] public void process(Node externs, Node root) { GlobalNamespace namespace; if (collapsePropertiesOnExternTypes) { namespace = new GlobalNamespace(compiler, externs, root); } else { [BUGGY] namespace = new GlobalNamespace(compiler, root); [BUGGY] } if (inlineAliases) { inlineAliases(namespace); } nameMap = namespace.getNameIndex(); globalNames = namespace.getNameForest(); checkNamespaces(); for (Name n : globalNames) { [CLASS] CollapseProperties 1 [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node externs root List globalNames Map nameMap GlobalNamespace namespace Name n  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20306923302672383	121	121	8	replace	
99	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void process(Node externs, Node root) { GlobalNamespace namespace; if (collapsePropertiesOnExternTypes) { namespace = new GlobalNamespace(compiler, externs, root); } else { [BUGGY] [BUGGY] namespace = new GlobalNamespace(compiler, root); } if (inlineAliases) { inlineAliases(namespace); } nameMap = namespace.getNameIndex(); globalNames = namespace.getNameForest(); checkNamespaces(); for (Name n : globalNames) { [CLASS] CollapseProperties 1 [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node externs root List globalNames Map nameMap GlobalNamespace namespace Name n  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20306923302672383	121	121	8	add	
