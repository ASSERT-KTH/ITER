bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
2	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  refs,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  refs,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  refs,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
3	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
4	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  false);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  false);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
5	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  null);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  null);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
6	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  refs);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  refs);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
7	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  n.refs);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  n.refs);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
8	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  true);	  flattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
9	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  false);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  false);	  flattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
10	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	12	None	replace
11	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	12	None	replace
12	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  UNSAFE_THIS,  rParent);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  UNSAFE_THIS,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  UNSAFE_THIS,  rParent);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	12	None	replace
13	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	12	None	replace
14	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  rParent);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  rParent);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    rParent);    	non-compiled	[CE]  not  a  statement	69	None	replace
15	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    rParent);    	non-compiled	[CE]  not  a  statement	69	None	replace
16	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.twin);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.twin);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.twin);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    rParent);    	non-compiled	[CE]  not  a  statement	69	None	replace
17	[BUG]  [BUGGY]  flattenNameRef(alias,  r.name,  UNKNOWN_EXPR_TYPE,  r.node);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.name,  UNKNOWN_EXPR_TYPE,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.name,  UNKNOWN_EXPR_TYPE,  r.node);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
18	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.name,  UNKNOWN_EXPR_TYPE,  r.node);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.name,  UNKNOWN_EXPR_TYPE,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.name,  UNKNOWN_EXPR_TYPE,  r.node);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
19	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  UNKNOWN_EXPR_TYPE);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  UNKNOWN_EXPR_TYPE);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.name,  UNKNOWN_EXPR_TYPE);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
20	[BUG]  [BUGGY]  flattenNameRef(alias,  r.name,  r.node,  UNKNOWN_EXPR_TYPE);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.name,  r.node,  UNKNOWN_EXPR_TYPE);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.name,  r.node,  UNKNOWN_EXPR_TYPE);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
21	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.name);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
22	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNKNOWN_EXPR_TYPE,  r.name,  r.type);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNKNOWN_EXPR_TYPE,  r.name,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNKNOWN_EXPR_TYPE,  r.name,  r.type);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
23	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  3);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  3);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  3);	  flattenPrefixes(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
24	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  2);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  2);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  2);	  flattenPrefixes(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
25	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  3);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  3);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  3);	  flattenPrefixes(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
26	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  2);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  2);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  2);	  flattenPrefixes(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
27	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  4);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  4);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  4);	  flattenPrefixes(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
28	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  this);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  this);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  this);	  flattenObjectRef(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	58	None	replace
29	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  originalName,  null);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  originalName,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  originalName,  null);	  flattenObjectRef(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	58	None	replace
30	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  localNames);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  localNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  localNames);	  flattenObjectRef(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	58	None	replace
31	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  null,  r.type);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  null,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  null,  r.type);	  flattenObjectRef(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	58	None	replace
32	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  parent);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  parent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  parent);	  flattenObjectRef(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	58	None	replace
33	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  flattenPrefixes);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  flattenPrefixes);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  flattenPrefixes);	  FlattenNameRef(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	17	None	replace
34	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  2);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  2);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  2);	  FlattenNameRef(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	17	None	replace
35	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  4);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  4);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  4);	  FlattenNameRef(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	17	None	replace
36	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  5);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  5);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  5);	  FlattenNameRef(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	17	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.THIS  &&!NodeUtil.isObjectLitKey(r.node,  rParent));	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  rParent);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  rParent);	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node.getString());  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node.getString());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node.getString());	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
42	[BUG]  [BUGGY]  FlattenRef(alias,  r.getName(),  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.getName(),  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.getName(),  r.node,  rParent,  true);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
43	[BUG]  [BUGGY]  FlattenRef(r.node,  alias,  true);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(r.node,  alias,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(r.node,  alias,  true);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
44	[BUG]  [BUGGY]  FlattenRef(alias,  n.node,  rParent,  true);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  n.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  n.node,  rParent,  true);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
45	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  null);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  null);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
46	[BUG]  [BUGGY]  FlattenRef(alias,  n,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  n,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  n,  r.node,  rParent,  true);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
47	[BUG]  [BUGGY]  FlattenRef(alias,  rParent,  r.node,  true);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  rParent,  r.node,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  rParent,  r.node,  true);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
48	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);	  flattenNameRef(alias,    r.node,    rParent,    DEFAULT_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	20	None	replace
49	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);	  flattenNameRef(alias,    r.node,    rParent,    DEFAULT_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	20	None	replace
50	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);	  flattenNameRef(alias,    r.node,    rParent,    DEFAULT_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	20	None	replace
51	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);	  flattenNameRef(alias,    r.node,    rParent,    DEFAULT_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	20	None	replace
52	[BUG]  [BUGGY]  FlattenNameRef(r.node,  alias,  false);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(r.node,  alias,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(r.node,  alias,  false);	  FlattenNameRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	92	None	replace
53	[BUG]  [BUGGY]  FlattenNameRef(alias,  n.node,  rParent,  false);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n.node,  rParent,  false);	  FlattenNameRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	92	None	replace
54	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  null);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  null);	  FlattenNameRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	92	None	replace
55	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  false,  r.originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  false,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  false,  r.originalName);	  FlattenNameRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	92	None	replace
56	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  false,  r.refs);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  false,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  false,  r.refs);	  FlattenNameRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	92	None	replace
57	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  false);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  rParent,  false);	  FlattenNameRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	92	None	replace
58	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  localNames);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  localNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  localNames);	  FlattenPrefixes(alias,    r.node,    rParent,    refs);    	non-compiled	[CE]  not  a  statement	3	None	replace
59	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  flattenReferences);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  flattenReferences);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  flattenReferences);	  FlattenPrefixes(alias,    r.node,    rParent,    refs);    	non-compiled	[CE]  not  a  statement	3	None	replace
60	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  1);	  flattenObjectRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	59	None	replace
61	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0);	  flattenObjectRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	59	None	replace
62	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  true);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  true);	  flattenObjectRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	59	None	replace
63	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  3);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  3);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  3);	  flattenObjectRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	59	None	replace
64	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n.props);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n.props);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n.props);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
65	[BUG]  [BUGGY]  flattenNameRef(alias,  n.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
66	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  n.refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  n.refs);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
67	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  r.node,  UNKNOWN_EXPR_TYPE,  r.refs);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  r.node,  UNKNOWN_EXPR_TYPE,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  r.node,  UNKNOWN_EXPR_TYPE,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
68	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n.type);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
69	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.refs);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
70	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  UNKNOWN_EXPR_TYPE);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  UNKNOWN_EXPR_TYPE);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  UNKNOWN_EXPR_TYPE);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	60	None	replace
71	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  UNSAFE_THIS,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	60	None	replace
72	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  UNKNOWN_EXPR_TYPE);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  UNKNOWN_EXPR_TYPE);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  UNKNOWN_EXPR_TYPE);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	60	None	replace
73	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  UNSAFE_THIS,  nameMap);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  UNSAFE_THIS,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  UNSAFE_THIS,  nameMap);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	60	None	replace
74	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  0);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  0);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	60	None	replace
75	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  flattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	50	None	replace
76	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  flattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	50	None	replace
77	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  UNSAFE_THIS,  rParent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  UNSAFE_THIS,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  UNSAFE_THIS,  rParent);	  flattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	50	None	replace
78	[BUG]  [BUGGY]  flattenPrefixes(alias,  n,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  n,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  n,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);	  flattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	50	None	replace
79	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_THIS,  rParent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_THIS,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  UNSAFE_THIS,  rParent);	  flattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	50	None	replace
80	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  2);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  2);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  2);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    0);    	non-compiled	[CE]  not  a  statement	77	None	replace
81	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  0);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  0);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    0);    	non-compiled	[CE]  not  a  statement	77	None	replace
82	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  3);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  3);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  3);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    0);    	non-compiled	[CE]  not  a  statement	77	None	replace
83	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0,  r.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    0);    	non-compiled	[CE]  not  a  statement	77	None	replace
84	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  1,  0);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  1,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  1,  0);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    0);    	non-compiled	[CE]  not  a  statement	77	None	replace
85	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  r.name,  rParent);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  r.name,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  r.name,  rParent);	  FlattenPrefixes(alias,    r.node,    originalName,    rParent);    	non-compiled	[CE]  not  a  statement	120	None	replace
86	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  r.type,  rParent);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  r.type,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  r.type,  rParent);	  FlattenPrefixes(alias,    r.node,    originalName,    rParent);    	non-compiled	[CE]  not  a  statement	120	None	replace
87	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  r.getName(),  rParent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  r.getName(),  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  r.getName(),  rParent);	  FlattenPrefixes(alias,    r.node,    originalName,    rParent);    	non-compiled	[CE]  not  a  statement	120	None	replace
88	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  r.originalName,  r.node);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  r.originalName,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  r.originalName,  r.node);	  FlattenPrefixes(alias,    r.node,    originalName,    rParent);    	non-compiled	[CE]  not  a  statement	120	None	replace
89	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  null,  rParent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  null,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  null,  rParent);	  FlattenPrefixes(alias,    r.node,    originalName,    rParent);    	non-compiled	[CE]  not  a  statement	120	None	replace
90	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  r.node);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  r.node);	  FlattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	65	None	replace
91	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent);	  FlattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	65	None	replace
92	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	65	None	replace
93	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);	  FlattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	65	None	replace
94	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  rParent);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  rParent);	  FlattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	65	None	replace
95	[BUG]  [BUGGY]  NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  }  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  }	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r    	non-compiled	[CE]  not  a  statement	35	None	replace
96	[BUG]  [BUGGY]  NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r    	non-compiled	[CE]  not  a  statement	35	None	replace
97	[BUG]  [BUGGY]  NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r    	non-compiled	[CE]  not  a  statement	35	None	replace
98	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  }  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  }  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  }	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r    	non-compiled	[CE]  not  a  statement	35	None	replace
99	[BUG]  [BUGGY]  NodeUtil.isFunction(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  [CE]  not  a  statement  [FE]                                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isFunction(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isFunction(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r    	non-compiled	[CE]  not  a  statement	35	None	replace
100	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  [CE]  not  a  statement  [FE]                                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r    	non-compiled	[CE]  not  a  statement	35	None	replace
101	[BUG]  [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  }  [CE]  not  a  statement  [FE]                                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  }  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r  }	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r    	non-compiled	[CE]  not  a  statement	35	None	replace
102	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  refs);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  refs);	  flattenPrefixes(alias,    r.node,    rParent,    globalName);    	non-compiled	[CE]  not  a  statement	96	None	replace
103	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES);	  flattenPrefixes(alias,    r.node,    rParent,    globalName);    	non-compiled	[CE]  not  a  statement	96	None	replace
104	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  globalName,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  globalName,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  globalName,  originalName);	  flattenPrefixes(alias,    r.node,    rParent,    globalName);    	non-compiled	[CE]  not  a  statement	96	None	replace
105	[BUG]  [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  globalNames);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenObjectRef(alias,  r.node,  rParent,  globalNames);	  flattenObjectRef(alias,    r.node,    rParent,    refs);    	non-compiled	[CE]  not  a  statement	115	None	replace
106	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  globalNames);	  flattenObjectRef(alias,    r.node,    rParent,    refs);    	non-compiled	[CE]  not  a  statement	115	None	replace
107	[BUG]  [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenObjectRef(alias,  r.node,  rParent,  true);	  flattenObjectRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	72	None	replace
108	[BUG]  [BUGGY]  FlattenPropertyRef(alias,  r.node,  rParent,  false);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPropertyRef(alias,  r.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPropertyRef(alias,  r.node,  rParent,  false);	  flattenObjectRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	72	None	replace
109	[BUG]  [BUGGY]  FlattenTwinRef(alias,  r.node,  rParent,  false);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenTwinRef(alias,  r.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenTwinRef(alias,  r.node,  rParent,  false);	  flattenObjectRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	72	None	replace
110	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  false,  r.refs);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  false,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  false,  r.refs);	  flattenObjectRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	72	None	replace
111	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  n.refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  n.refs);	  flattenNameRef(alias,    r.node,    rParent,    nameMap,    n.refs);    	non-compiled	[CE]  not  a  statement	109	None	replace
112	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.refs,  originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.refs,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.refs,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    nameMap,    n.refs);    	non-compiled	[CE]  not  a  statement	109	None	replace
113	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.props);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.props);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.props);	  flattenNameRef(alias,    r.node,    rParent,    nameMap,    n.refs);    	non-compiled	[CE]  not  a  statement	109	None	replace
114	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.localNames);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.localNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.localNames);	  flattenNameRef(alias,    r.node,    rParent,    nameMap,    n.refs);    	non-compiled	[CE]  not  a  statement	109	None	replace
115	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  n.refs);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  originalName,  n.refs);	  flattenNameRef(alias,    r.node,    rParent,    nameMap,    n.refs);    	non-compiled	[CE]  not  a  statement	109	None	replace
116	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  n.refs);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  refs,  n.refs);	  flattenNameRef(alias,    r.node,    rParent,    nameMap,    n.refs);    	non-compiled	[CE]  not  a  statement	109	None	replace
117	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  localNames);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  localNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  localNames);	  flattenPrefixes(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	45	None	replace
118	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  nameMap,  n);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  nameMap,  n);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  nameMap,  n);	  flattenPrefixes(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	45	None	replace
119	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  globalNames);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  originalName,  globalNames);	  flattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	106	None	replace
120	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  globalNames);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  globalNames);	  flattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	106	None	replace
121	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  globalNames);	  flattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	106	None	replace
122	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  r.refs,  globalNames);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  r.refs,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  originalName,  r.refs,  globalNames);	  flattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	106	None	replace
123	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  1);	  flattenRef(alias,    r.node,    rParent,    0);    	non-compiled	[CE]  not  a  statement	94	None	replace
124	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  1);	  flattenRef(alias,    r.node,    rParent,    0);    	non-compiled	[CE]  not  a  statement	94	None	replace
125	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  2);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  2);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  2);	  flattenRef(alias,    r.node,    rParent,    0);    	non-compiled	[CE]  not  a  statement	94	None	replace
126	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  0);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  0);	  flattenRef(alias,    r.node,    rParent,    0);    	non-compiled	[CE]  not  a  statement	94	None	replace
127	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	42	None	replace
128	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	42	None	replace
129	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	42	None	replace
130	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  url);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  url);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  url);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	42	None	replace
131	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.name);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.name);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	42	None	replace
132	[BUG]  [BUGGY]  NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r,    	non-compiled	[CE]  not  a  statement	32	None	replace
133	[BUG]  [BUGGY]  NodeUtil.isFunction(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isFunction(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isFunction(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r,    	non-compiled	[CE]  not  a  statement	32	None	replace
134	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isAssignmentOp(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isAssignmentOp(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r,    	non-compiled	[CE]  not  a  statement	32	None	replace
135	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isFunctionDeclaration(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isFunctionDeclaration(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r,    	non-compiled	[CE]  not  a  statement	32	None	replace
136	[BUG]  [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r,    	non-compiled	[CE]  not  a  statement	32	None	replace
137	[BUG]  [BUGGY]  NodeUtil.isPropertyName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isPropertyName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isPropertyName(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r,    	non-compiled	[CE]  not  a  statement	32	None	replace
138	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  globalName,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  globalName,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  globalName,  originalName);	  FlattenPrefixes(alias,    r.node,    rParent,    globalName);    	non-compiled	[CE]  not  a  statement	80	None	replace
139	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  globalName,  refs);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  globalName,  refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  globalName,  refs);	  FlattenPrefixes(alias,    r.node,    rParent,    globalName);    	non-compiled	[CE]  not  a  statement	80	None	replace
140	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  alias);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    nameMap);    	non-compiled	[CE]  not  a  statement	79	None	replace
141	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  nameMap);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  nameMap);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    nameMap);    	non-compiled	[CE]  not  a  statement	79	None	replace
142	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  localNames);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  localNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  localNames);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    nameMap);    	non-compiled	[CE]  not  a  statement	79	None	replace
143	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  refs);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  refs);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	41	None	replace
144	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	41	None	replace
145	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  1);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    1);    	non-compiled	[CE]  not  a  statement	22	None	replace
146	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  4);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  4);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  4);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    1);    	non-compiled	[CE]  not  a  statement	22	None	replace
147	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0,  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0,  1);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    1);    	non-compiled	[CE]  not  a  statement	22	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  rParent);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  rParent);	  Preconditions.checkArgument(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	111	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  r.node);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  r.node);	  Preconditions.checkArgument(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	111	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  r.node.getString());  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  r.node.getString());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  r.node.getString());	  Preconditions.checkArgument(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	111	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  r.name);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  r.name);	  Preconditions.checkArgument(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	111	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkArgument(n.node.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(n.node.getType()  ==  Token.NAME);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(n.node.getType()  ==  Token.NAME);	  Preconditions.checkArgument(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	111	None	replace
153	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  originalName,  rParent,  nameMap);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  originalName,  rParent,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  originalName,  rParent,  nameMap);	  FlattenPrefixes(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	4	None	replace
154	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  nameMap,  originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  nameMap,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  nameMap,  originalName);	  FlattenPrefixes(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	4	None	replace
155	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  nameMap,  r.type);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  nameMap,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  nameMap,  r.type);	  FlattenPrefixes(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	4	None	replace
156	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  true,  r.originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  true,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  true,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.originalName);    	non-compiled	[CE]  not  a  statement	116	None	replace
157	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  true,  r.originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  true,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  true,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.originalName);    	non-compiled	[CE]  not  a  statement	116	None	replace
158	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  r.name);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.originalName);    	non-compiled	[CE]  not  a  statement	116	None	replace
159	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.url);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.url);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  r.url);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.originalName);    	non-compiled	[CE]  not  a  statement	116	None	replace
160	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  false,  r.originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  false,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  r.node,  rParent,  false,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.originalName);    	non-compiled	[CE]  not  a  statement	116	None	replace
161	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  url);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  url);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  url);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	78	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT  ||  r.node.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT  ||  r.node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT  ||  r.node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(r.node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	83	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(n.node.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(n.node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(n.node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(r.node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	83	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT  &&!NodeUtil.isObjectLitKey(r.node,  rParent));	  Preconditions.checkState(r.node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	83	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()!=  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()!=  Token.EXPR_RESULT);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(r.node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	83	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node.getString());  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node.getString());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node.getString());	  Preconditions.checkState(r.node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	83	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  rParent);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  rParent);	  Preconditions.checkState(r.node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	83	None	replace
168	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  n);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  n);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  n);	  FlattenPrefixes(alias,    r.node,    rParent,    UNKNOWN_SYNTHETIC);    	non-compiled	[CE]  not  a  statement	7	None	replace
169	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  rParent);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  rParent);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	68	None	replace
170	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.node);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.node);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	68	None	replace
171	[BUG]  [BUGGY]  FlattenNameRef(r.node,  alias,  UNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(r.node,  alias,  UNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(r.node,  alias,  UNSAFE_NAMESPACE_WARNING,  r.node);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	68	None	replace
172	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.uNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.uNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.uNSAFE_NAMESPACE_WARNING,  r.node);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	68	None	replace
173	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  rParent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  rParent);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	68	None	replace
174	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  INVALID_SIGNATURES);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  INVALID_SIGNATURES);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  INVALID_SIGNATURES);	  flattenNameRef(alias,    r.node,    rParent,    INVALID_SIGNATURES);    	non-compiled	[CE]  not  a  statement	103	None	replace
175	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  INVALID_SIGNATURES,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  INVALID_SIGNATURES,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  INVALID_SIGNATURES,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    INVALID_SIGNATURES);    	non-compiled	[CE]  not  a  statement	103	None	replace
176	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  INVALID_SIGNATURES);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  INVALID_SIGNATURES);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  INVALID_SIGNATURES);	  flattenNameRef(alias,    r.node,    rParent,    INVALID_SIGNATURES);    	non-compiled	[CE]  not  a  statement	103	None	replace
177	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  true,  r.type);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  true,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  true,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.type);    	non-compiled	[CE]  not  a  statement	64	None	replace
178	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  true,  r.type);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  true,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  true,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.type);    	non-compiled	[CE]  not  a  statement	64	None	replace
179	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.type);    	non-compiled	[CE]  not  a  statement	64	None	replace
180	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  false,  r.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  false,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  r.node,  rParent,  false,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.type);    	non-compiled	[CE]  not  a  statement	64	None	replace
181	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.uNSAFE_THIS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.uNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.uNSAFE_THIS);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.type);    	non-compiled	[CE]  not  a  statement	64	None	replace
182	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  false,  r.type);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  false,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  false,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.type);    	non-compiled	[CE]  not  a  statement	64	None	replace
183	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  globalNames,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  globalNames,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  globalNames,  originalName);	  FlattenPrefixes(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	1	None	replace
184	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  globalNames,  refs);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  globalNames,  refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  globalNames,  refs);	  FlattenPrefixes(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	1	None	replace
185	[BUG]  [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);	  FlattenUtil.flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	104	None	replace
186	[BUG]  [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);	  FlattenUtil.flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	104	None	replace
187	[BUG]  [BUGGY]  FlattenUtil.flattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS);	  FlattenUtil.flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	104	None	replace
188	[BUG]  [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);	  FlattenUtil.flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	104	None	replace
189	[BUG]  [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  globalNames);	  FlattenUtil.flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	104	None	replace
190	[BUG]  [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  3);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  3);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  3);	  FlattenUtil.flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	104	None	replace
191	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  true);	  FlattenPrefixes(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	5	None	replace
192	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  1);	  FlattenPrefixes(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	5	None	replace
193	[BUG]  [BUGGY]  FlattenPrefixes(alias,  n,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  n,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  n,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);	  FlattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	52	None	replace
194	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  r.node);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  r.node);	  FlattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	52	None	replace
195	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);	  FlattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	52	None	replace
196	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  rParent);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  rParent);	  FlattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	52	None	replace
197	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  nameMap,  rParent);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  nameMap,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  nameMap,  rParent);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
198	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  originalName,  rParent,  alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  originalName,  rParent,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  originalName,  rParent,  alias);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
199	[BUG]  [BUGGY]  FlattenNameRef(r.node,  alias,  originalName,  rParent,  nameMap);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(r.node,  alias,  originalName,  rParent,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(r.node,  alias,  originalName,  rParent,  nameMap);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
200	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  originalName,  rParent);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  originalName,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  originalName,  rParent);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
201	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  nameMap,  r.type,  rParent);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  nameMap,  r.type,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  nameMap,  r.type,  rParent);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
202	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  nameMap,  r.name);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  nameMap,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  nameMap,  r.name);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
203	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  localNames);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  localNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  rParent,  localNames);	  flattenNameRef(alias,    r.node,    rParent,    localNameMap);    	non-compiled	[CE]  not  a  statement	82	None	replace
204	[BUG]  [BUGGY]  FlattenNameRef(r.node,  alias,  localNameMap);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(r.node,  alias,  localNameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(r.node,  alias,  localNameMap);	  flattenNameRef(alias,    r.node,    rParent,    localNameMap);    	non-compiled	[CE]  not  a  statement	82	None	replace
205	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  localNameMap,  r.localNames);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  localNameMap,  r.localNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  localNameMap,  r.localNames);	  flattenNameRef(alias,    r.node,    rParent,    localNameMap);    	non-compiled	[CE]  not  a  statement	82	None	replace
206	[BUG]  [BUGGY]  FlattenNameRef(localNames,  r.node,  rParent,  alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(localNames,  r.node,  rParent,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(localNames,  r.node,  rParent,  alias);	  flattenNameRef(alias,    r.node,    rParent,    localNames);    	non-compiled	[CE]  not  a  statement	47	None	replace
207	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  localNames,  originalName);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  localNames,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  localNames,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    localNames);    	non-compiled	[CE]  not  a  statement	47	None	replace
208	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  4);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  4);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  4);	  flattenNameRef(alias,    r.node,    rParent,    2);    	non-compiled	[CE]  not  a  statement	10	None	replace
209	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.name);	  flattenNameRef(alias,    r.node,    UNSAFE_THIS,    rParent);    	non-compiled	[CE]  not  a  statement	51	None	replace
210	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.type);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.type);	  flattenNameRef(alias,    r.node,    UNSAFE_THIS,    rParent);    	non-compiled	[CE]  not  a  statement	51	None	replace
211	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.getTwin());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.getTwin());	  flattenNameRef(alias,    r.node,    UNSAFE_THIS,    rParent);    	non-compiled	[CE]  not  a  statement	51	None	replace
212	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.twin);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.twin);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.twin);	  flattenNameRef(alias,    r.node,    UNSAFE_THIS,    rParent);    	non-compiled	[CE]  not  a  statement	51	None	replace
213	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.refs);	  flattenNameRef(alias,    r.node,    UNSAFE_THIS,    rParent);    	non-compiled	[CE]  not  a  statement	51	None	replace
214	[BUG]  [BUGGY]  n.removeChild(r.node,  rParent);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  n.removeChild(r.node,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	n.removeChild(r.node,  rParent);	  n.removeChild(r.node);    	non-compiled	[CE]  not  a  statement	112	None	replace
215	[BUG]  [BUGGY]  n.replaceChild(r.node,  rParent);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  n.replaceChild(r.node,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	n.replaceChild(r.node,  rParent);	  n.removeChild(r.node);    	non-compiled	[CE]  not  a  statement	112	None	replace
216	[BUG]  [BUGGY]  n.addChildToFront(r.node);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  n.addChildToFront(r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	n.addChildToFront(r.node);	  n.removeChild(r.node);    	non-compiled	[CE]  not  a  statement	112	None	replace
217	[BUG]  [BUGGY]  n.removeChild(r,  r.node);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  n.removeChild(r,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	n.removeChild(r,  r.node);	  n.removeChild(r.node);    	non-compiled	[CE]  not  a  statement	112	None	replace
218	[BUG]  [BUGGY]  r.node.removeChild(r.node);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  r.node.removeChild(r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	r.node.removeChild(r.node);	  n.removeChild(r.node);    	non-compiled	[CE]  not  a  statement	112	None	replace
219	[BUG]  [BUGGY]  r.removeChild(r.node);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  r.removeChild(r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	r.removeChild(r.node);	  n.removeChild(r.node);    	non-compiled	[CE]  not  a  statement	112	None	replace
220	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {  return;  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {  return;  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {  return;	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    return;    	non-compiled	[CE]  not  a  statement	34	None	replace
221	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    return;    	non-compiled	[CE]  not  a  statement	34	None	replace
222	[BUG]  [BUGGY]  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    return;    	non-compiled	[CE]  not  a  statement	34	None	replace
223	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS,  alias));  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS,  alias));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_THIS,  alias));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
224	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  NAMESPACE_REDEFINED_WARNING,  alias));  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  NAMESPACE_REDEFINED_WARNING,  alias));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  NAMESPACE_REDEFINED_WARNING,  alias));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
225	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  NAMESPACE_REDEFINED_WARNING,  originalName));  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  NAMESPACE_REDEFINED_WARNING,  originalName));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  NAMESPACE_REDEFINED_WARNING,  originalName));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
226	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
227	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNKNOWN_SYNTHETIC_ERROR,  originalName));  [CE]  not  a  statement  [FE]                                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNKNOWN_SYNTHETIC_ERROR,  originalName));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNKNOWN_SYNTHETIC_ERROR,  originalName));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
228	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNKNOWN_SYNTHETIC_WARNING,  originalName));  [CE]  not  a  statement  [FE]                                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNKNOWN_SYNTHETIC_WARNING,  originalName));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNKNOWN_SYNTHETIC_WARNING,  originalName));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
229	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS,  nameMap));  [CE]  not  a  statement  [FE]                                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS,  nameMap));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_THIS,  nameMap));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.THIS  &&!NodeUtil.isObjectLitKey(r.node,  rParent));	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS,  rParent);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.THIS,  rParent);	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()!=  Token.THIS);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()!=  Token.THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()!=  Token.THIS);	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.THIS);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.THIS  ||  r.node.getType()  ==  Token.THIS);	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(n.node.getType()  ==  Token.THIS);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(n.node.getType()  ==  Token.THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(n.node.getType()  ==  Token.THIS);	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
236	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
237	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_EXPR_TYPE,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_EXPR_TYPE,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_EXPR_TYPE,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
238	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNKNOWN_EXPR_TYPE);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNKNOWN_EXPR_TYPE);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  UNKNOWN_EXPR_TYPE);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
239	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  nameMap);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  nameMap);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
240	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  UNSAFE_THIS);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
241	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  url);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  url);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  url);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
242	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  false,  r.originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  false,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  false,  r.originalName);	  flattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	27	None	replace
243	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  false,  r.type);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  false,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  false,  r.type);	  flattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	27	None	replace
244	[BUG]  [BUGGY]  flattenPrefixes(alias,  n.node,  rParent,  false);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  n.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  n.node,  rParent,  false);	  flattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	27	None	replace
245	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  flattenObjectRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	56	None	replace
246	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_THIS,  rParent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_THIS,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  UNSAFE_THIS,  rParent);	  flattenObjectRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	56	None	replace
247	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_THIS,  rParent,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_THIS,  rParent,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  UNSAFE_THIS,  rParent,  NAMESPACE_REDEFINED_WARNING);	  flattenObjectRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	56	None	replace
248	[BUG]  [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS);	  flattenObjectRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	56	None	replace
249	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  r.node);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  r.node);	  flattenObjectRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	56	None	replace
250	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
251	[BUG]  [BUGGY]  flattenNameRef(alias,  r.type,  r.node,  UNKNOWN_EXPR_TYPE,  r.node);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.type,  r.node,  UNKNOWN_EXPR_TYPE,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.type,  r.node,  UNKNOWN_EXPR_TYPE,  r.node);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
252	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  r.type);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
253	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.type);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
254	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.type,  r.node,  UNKNOWN_EXPR_TYPE,  r.node);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.type,  r.node,  UNKNOWN_EXPR_TYPE,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.type,  r.node,  UNKNOWN_EXPR_TYPE,  r.node);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
255	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type,  UNSAFE_THIS);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
256	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);	  flattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
257	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);	  flattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
258	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  0);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  0);	  flattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
259	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);	  flattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
260	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);	  flattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
261	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  nameMap,  n);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  nameMap,  n);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  nameMap,  n);	  flattenObjectRef(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	57	None	replace
262	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  3);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  3);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  3);	  flattenRef(alias,    r.node,    rParent,    3);    	non-compiled	[CE]  not  a  statement	95	None	replace
263	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  4);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  4);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  4);	  flattenRef(alias,    r.node,    rParent,    3);    	non-compiled	[CE]  not  a  statement	95	None	replace
264	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	101	None	replace
265	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES,  originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	101	None	replace
266	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	101	None	replace
267	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	44	None	replace
268	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	44	None	replace
269	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	44	None	replace
270	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	44	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME,  rParent);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.NAME,  rParent);	  Preconditions.checkState(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	85	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.node);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.node);	  Preconditions.checkState(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	85	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent));	  Preconditions.checkState(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	85	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(n.node.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(n.node.getType()  ==  Token.NAME);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(n.node.getType()  ==  Token.NAME);	  Preconditions.checkState(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	85	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.node.getString());  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.node.getString());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.node.getString());	  Preconditions.checkState(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	85	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()!=  Token.NAME);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()!=  Token.NAME);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()!=  Token.NAME);	  Preconditions.checkState(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	85	None	replace
277	[BUG]  [BUGGY]  FlattenNameRef(r.node,  alias,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(r.node,  alias,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(r.node,  alias,  UNSAFE_NAMESPACE_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	67	None	replace
278	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	67	None	replace
279	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	67	None	replace
280	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	67	None	replace
281	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
282	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
283	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  UNSAFE_THIS);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
284	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  nameMap);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  nameMap);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
285	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNKNOWN_SIGNATURES);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNKNOWN_SIGNATURES);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  UNKNOWN_SIGNATURES);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
286	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  true,  r.refs);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  true,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  true,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.refs);    	non-compiled	[CE]  not  a  statement	117	None	replace
287	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  true,  r.refs);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  true,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  true,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.refs);    	non-compiled	[CE]  not  a  statement	117	None	replace
288	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  false,  r.refs);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  false,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  r.node,  rParent,  false,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.refs);    	non-compiled	[CE]  not  a  statement	117	None	replace
289	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  true,  r.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  true,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  true,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.refs);    	non-compiled	[CE]  not  a  statement	117	None	replace
290	[BUG]  [BUGGY]  flattenNameRef(alias,  n.node,  rParent,  false,  r.refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n.node,  rParent,  false,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n.node,  rParent,  false,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.refs);    	non-compiled	[CE]  not  a  statement	117	None	replace
291	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  true,  r.refs);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  true,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  true,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.refs);    	non-compiled	[CE]  not  a  statement	117	None	replace
292	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC);	  flattenPrefixes(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	13	None	replace
293	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    flattenPrefixes(alias,    r,    1);    	non-compiled	[CE]  not  a  statement	33	None	replace
294	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  2);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  2);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  2);	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    flattenPrefixes(alias,    r,    1);    	non-compiled	[CE]  not  a  statement	33	None	replace
295	[BUG]  [BUGGY]  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    flattenPrefixes(alias,    r,    1);    	non-compiled	[CE]  not  a  statement	33	None	replace
296	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    flattenPrefixes(alias,    r,    1);    	non-compiled	[CE]  not  a  statement	33	None	replace
297	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  3);  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  3);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  3);	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    flattenPrefixes(alias,    r,    1);    	non-compiled	[CE]  not  a  statement	33	None	replace
298	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  4);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  4);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  4);	  FlattenPrefixes(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	11	None	replace
299	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  5);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  5);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  5);	  FlattenPrefixes(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	11	None	replace
300	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()!=  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	31	None	replace
301	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	31	None	replace
302	[BUG]  [BUGGY]  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	31	None	replace
303	[BUG]  [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	31	None	replace
304	[BUG]  [BUGGY]  NodeUtil.isPropertyKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isPropertyKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isPropertyKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	31	None	replace
305	[BUG]  [BUGGY]  FlattenNameRef(r.node,  alias,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(r.node,  alias,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(r.node,  alias,  true);	  FlattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	24	None	replace
306	[BUG]  [BUGGY]  FlattenNameRef(alias,  n.node,  rParent,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n.node,  rParent,  true);	  FlattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	24	None	replace
307	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  rParent,  true);	  FlattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	24	None	replace
308	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.name,  rParent,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.name,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.name,  rParent,  true);	  FlattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	24	None	replace
309	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  false);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  false);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    true);    	non-compiled	[CE]  not  a  statement	21	None	replace
310	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  false);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  false);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    true);    	non-compiled	[CE]  not  a  statement	21	None	replace
311	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  true);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    true);    	non-compiled	[CE]  not  a  statement	21	None	replace
312	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  true);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    true);    	non-compiled	[CE]  not  a  statement	21	None	replace
313	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  true);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  true);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    true);    	non-compiled	[CE]  not  a  statement	21	None	replace
314	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  originalName);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
315	[BUG]  [BUGGY]  FlattenRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS,  originalName);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
316	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
317	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
318	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  globalNames);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  globalNames);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
319	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS,  originalName);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
320	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  true);	  FlattenPrefixes(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	2	None	replace
321	[BUG]  [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectLitKey(alias,  r.node,  rParent,  true);	  flattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	25	None	replace
322	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  null);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  null);	  flattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	25	None	replace
323	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.isSet());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.isSet());	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
324	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.isSet());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.isSet());	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
325	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  null,  r.isSet());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  null,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  originalName,  null,  r.isSet());	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
326	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.isSet());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.isSet());	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
327	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.getTwin());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  null,  r.getTwin());	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
328	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  null,  r.isSet());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  null,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  refs,  null,  r.isSet());	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
329	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.getName(),  r.node,  rParent,  false);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.getName(),  r.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.getName(),  r.node,  rParent,  false);	  FlattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	26	None	replace
330	[BUG]  [BUGGY]  FlattenPrefixes(alias,  n.node,  rParent,  false);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  n.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  n.node,  rParent,  false);	  FlattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	26	None	replace
331	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  false,  r.originalName);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  false,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  false,  r.originalName);	  FlattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	26	None	replace
332	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  false,  r.refs);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  false,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  false,  r.refs);	  FlattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	26	None	replace
333	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  false,  r.type);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  false,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  false,  r.type);	  FlattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	26	None	replace
334	[BUG]  [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectLitKey(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);	  flattenObjectLitKey(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	14	None	replace
335	[BUG]  [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);	  flattenObjectLitKey(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	14	None	replace
336	[BUG]  [BUGGY]  FlattenTwinKey(alias,  r.node,  rParent,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenTwinKey(alias,  r.node,  rParent,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenTwinKey(alias,  r.node,  rParent,  UNSAFE_THIS);	  flattenObjectLitKey(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	14	None	replace
337	[BUG]  [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectLitKey(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC);	  flattenObjectLitKey(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	14	None	replace
338	[BUG]  [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  true);	  flattenObjectLitKey(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	14	None	replace
339	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  rParent);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenRefs,  rParent);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
340	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.type);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenRefs,  r.type);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
341	[BUG]  [BUGGY]  FlattenPrefixes(alias,  flattenRefs,  r.node,  rParent);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  flattenRefs,  r.node,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  flattenRefs,  r.node,  rParent);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
342	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.getTwin());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenRefs,  r.getTwin());	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
343	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenRefs,  r.refs);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
344	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.isSet());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenRefs,  r.isSet());	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
345	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenRefs);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
346	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  null,  r.type);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  null,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  null,  r.type);	  flattenPrefixes(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	39	None	replace
347	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	16	None	replace
348	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS,  originalName);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	16	None	replace
349	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  UNSAFE_THIS);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	16	None	replace
350	[BUG]  [BUGGY]  FlattenNameRef(r.node,  alias,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(r.node,  alias,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(r.node,  alias,  UNSAFE_THIS);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	53	None	replace
351	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  true);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	53	None	replace
352	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	86	None	replace
353	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNKNOWN_SYNTHETIC_WARNING,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNKNOWN_SYNTHETIC_WARNING,  UNSAFE_THIS));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNKNOWN_SYNTHETIC_WARNING,  UNSAFE_THIS));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	86	None	replace
354	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS,  READ_NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS,  READ_NAMESPACE_REDEFINED_WARNING));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_THIS,  READ_NAMESPACE_REDEFINED_WARNING));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	86	None	replace
355	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS,  UNKNOWN_SYNTHETIC));  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS,  UNKNOWN_SYNTHETIC));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_THIS,  UNKNOWN_SYNTHETIC));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	86	None	replace
356	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  UNKNOWN_SIGNATURES);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  UNKNOWN_SIGNATURES);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  UNKNOWN_SIGNATURES);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	19	None	replace
357	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0,  UNSAFE_THIS);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	19	None	replace
358	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  UNSAFE_THIS,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	19	None	replace
359	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	48	None	replace
360	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	48	None	replace
361	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  n);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  n);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  n);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	48	None	replace
362	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
363	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  rParent,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  rParent,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  rParent,  NAMESPACE_REDEFINED_WARNING));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
364	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  r.node,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  r.node,  UNSAFE_THIS));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  r.node,  UNSAFE_THIS));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
365	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  rParent,  UNSAFE_THIS,  originalName));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  rParent,  UNSAFE_THIS,  originalName));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  rParent,  UNSAFE_THIS,  originalName));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
366	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  NAMESPACE_REDEFINED_WARNING,  rParent,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  NAMESPACE_REDEFINED_WARNING,  rParent,  UNSAFE_THIS));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  NAMESPACE_REDEFINED_WARNING,  rParent,  UNSAFE_THIS));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
367	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  rParent,  UNSAFE_THIS,  nameMap));  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  rParent,  UNSAFE_THIS,  nameMap));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  rParent,  UNSAFE_THIS,  nameMap));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
368	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  NAMESPACE_REDEFINED_WARNING,  r.node,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  NAMESPACE_REDEFINED_WARNING,  r.node,  UNSAFE_THIS));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  NAMESPACE_REDEFINED_WARNING,  r.node,  UNSAFE_THIS));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
369	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  this);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  this);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  this);	  FlattenPrefixes(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	6	None	replace
370	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  parent);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  parent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  parent);	  FlattenPrefixes(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	6	None	replace
371	[BUG]  [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  false);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectLitKey(alias,  r.node,  rParent,  false);	  flattenRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	93	None	replace
372	[BUG]  [BUGGY]  FlattenRef(r.node,  alias,  false);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(r.node,  alias,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(r.node,  alias,  false);	  flattenRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	93	None	replace
373	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.type,  UNKNOWN_EXPR_TYPE,  r.node);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.type,  UNKNOWN_EXPR_TYPE,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.type,  UNKNOWN_EXPR_TYPE,  r.node);	  FlattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	100	None	replace
374	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  r.type,  UNKNOWN_EXPR_TYPE);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  r.type,  UNKNOWN_EXPR_TYPE);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  r.type,  UNKNOWN_EXPR_TYPE);	  FlattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	100	None	replace
375	[BUG]  [BUGGY]  FlattenNameRef(r.node,  alias,  UNKNOWN_EXPR_TYPE,  r.type);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(r.node,  alias,  UNKNOWN_EXPR_TYPE,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(r.node,  alias,  UNKNOWN_EXPR_TYPE,  r.type);	  FlattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	100	None	replace
376	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.type);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.type);	  FlattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	100	None	replace
377	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNKNOWN_EXPR_TYPE,  r.type,  rParent);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNKNOWN_EXPR_TYPE,  r.type,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNKNOWN_EXPR_TYPE,  r.type,  rParent);	  FlattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	100	None	replace
378	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  NAMESPACE_REDEFINED_WARNING);	  flattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	43	None	replace
379	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	43	None	replace
380	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  UNSAFE_THIS);	  flattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	43	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  &&!NodeUtil.isObjectLitKey(r.node,  rParent));	  Preconditions.checkState(r.node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	88	None	replace
382	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  r.node);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  r.node);	  Preconditions.checkState(r.node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	88	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  ||  r.node.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  ||  r.node.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  ||  r.node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(r.node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	88	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  rParent);  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  rParent);	  Preconditions.checkState(r.node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	88	None	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()!=  Token.GETPROP);  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()!=  Token.GETPROP);	  Preconditions.checkState(r.node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	88	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkState(r.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]                                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.getType()  ==  Token.GETPROP);	  Preconditions.checkState(r.node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	88	None	replace
387	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||!NodeUtil.isObjectLitKey(r.node,  rParent));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||!NodeUtil.isObjectLitKey(r.node,  rParent));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||!NodeUtil.isObjectLitKey(r.node,  rParent));	  Preconditions.checkState(r.node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	87	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  &&!NodeUtil.isObjectLitKey(r.node,  rParent));	  Preconditions.checkState(r.node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	87	None	replace
389	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()!=  Token.FUNCTION);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()!=  Token.FUNCTION);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()!=  Token.FUNCTION);	  Preconditions.checkState(r.node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	87	None	replace
390	[BUG]  [BUGGY]  Preconditions.checkState(n.node.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(n.node.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(n.node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(r.node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	87	None	replace
391	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION,  rParent);  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION,  rParent);	  Preconditions.checkState(r.node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	87	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||  r.node.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||  r.node.getType()  ==  Token.NAME);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||  r.node.getType()  ==  Token.NAME);	  Preconditions.checkState(r.node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	87	None	replace
393	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.node);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.node);	  FlattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	119	None	replace
394	[BUG]  [BUGGY]  FlattenNameRef(n,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(n,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(n,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);	  FlattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	119	None	replace
395	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.node);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  r.node);	  FlattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	119	None	replace
396	[BUG]  [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  false);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenObjectRef(alias,  r.node,  rParent,  false);	  flattenObjectRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	73	None	replace
397	[BUG]  [BUGGY]  FlattenPropertyRef(alias,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPropertyRef(alias,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPropertyRef(alias,  r.node,  rParent,  true);	  flattenObjectRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	73	None	replace
398	[BUG]  [BUGGY]  FlattenTwinRef(alias,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenTwinRef(alias,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenTwinRef(alias,  r.node,  rParent,  true);	  flattenObjectRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	73	None	replace
399	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.getName(),  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.getName(),  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.getName(),  r.node,  rParent,  true);	  flattenObjectRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	73	None	replace
400	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  globalNames,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  globalNames,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  globalNames,  originalName);	  flattenObjectRef(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	55	None	replace
401	[BUG]  [BUGGY]  FlattenNameRef(r.node,  alias,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(r.node,  alias,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(r.node,  alias,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	49	None	replace
402	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	49	None	replace
403	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.originalName);    	non-compiled	[CE]  not  a  statement	76	None	replace
404	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  null,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.originalName);    	non-compiled	[CE]  not  a  statement	76	None	replace
405	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.originalName);    	non-compiled	[CE]  not  a  statement	76	None	replace
406	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  null,  r.originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  null,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  refs,  null,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.originalName);    	non-compiled	[CE]  not  a  statement	76	None	replace
407	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  null,  r.originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  null,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  r.node,  rParent,  null,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.originalName);    	non-compiled	[CE]  not  a  statement	76	None	replace
408	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  null,  r.originalName);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  null,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  null,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.originalName);    	non-compiled	[CE]  not  a  statement	76	None	replace
409	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.getTwin());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.getTwin());	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.getTwin());    	non-compiled	[CE]  not  a  statement	70	None	replace
410	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent.getTwin());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent.getTwin());	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.getTwin());    	non-compiled	[CE]  not  a  statement	70	None	replace
411	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.getTwin());    	non-compiled	[CE]  not  a  statement	70	None	replace
412	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  r.getTwin());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  originalName,  r.getTwin());	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.getTwin());    	non-compiled	[CE]  not  a  statement	70	None	replace
413	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent.getTwin());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent.getTwin());	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.getTwin());    	non-compiled	[CE]  not  a  statement	70	None	replace
414	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node.getTwin());  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node.getTwin());	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.getTwin());    	non-compiled	[CE]  not  a  statement	70	None	replace
415	[BUG]  [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  originalName);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenObjectRef(alias,  r.node,  rParent,  originalName);	  flattenObjectRef(alias,    r.node,    rParent,    globalName);    	non-compiled	[CE]  not  a  statement	71	None	replace
416	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  globalName,  n);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  globalName,  n);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  globalName,  n);	  flattenObjectRef(alias,    r.node,    rParent,    globalName);    	non-compiled	[CE]  not  a  statement	71	None	replace
417	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  globalName,  originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  globalName,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  globalName,  originalName);	  flattenObjectRef(alias,    r.node,    rParent,    globalName);    	non-compiled	[CE]  not  a  statement	71	None	replace
418	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_THIS);	  flattenObjectRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	54	None	replace
419	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);	  flattenObjectRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	54	None	replace
420	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  true);	  flattenObjectRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	54	None	replace
421	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  n);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  n);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  n);	  flattenObjectRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	54	None	replace
422	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.type,  UNKNOWN_EXPR_TYPE);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.type,  UNKNOWN_EXPR_TYPE);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.type,  UNKNOWN_EXPR_TYPE);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	98	None	replace
423	[BUG]  [BUGGY]  flattenNameRef(alias,  r.type,  UNKNOWN_EXPR_TYPE,  r.node);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.type,  UNKNOWN_EXPR_TYPE,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.type,  UNKNOWN_EXPR_TYPE,  r.node);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	98	None	replace
424	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  this);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  this);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  this);	  flattenNameRef(alias,    r.node,    rParent,    this);    	non-compiled	[CE]  not  a  statement	75	None	replace
425	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  this);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  this);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  this);	  flattenNameRef(alias,    r.node,    rParent,    this);    	non-compiled	[CE]  not  a  statement	75	None	replace
426	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  globalNames,  originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  globalNames,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  globalNames,  originalName);	  flattenPrefixes(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	38	None	replace
427	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	30	None	replace
428	[BUG]  [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isLitKey(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	30	None	replace
429	[BUG]  [BUGGY]  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	30	None	replace
430	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.getName(),  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.getName(),  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.getName(),  r.node,  rParent,  true);	  FlattenPrefixes(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	81	None	replace
431	[BUG]  [BUGGY]  FlattenPrefixes(alias,  n,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  n,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  n,  r.node,  rParent,  true);	  FlattenPrefixes(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	81	None	replace
432	[BUG]  [BUGGY]  FlattenPrefixes(alias,  n.node,  rParent,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  n.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  n.node,  rParent,  true);	  FlattenPrefixes(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	81	None	replace
433	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.twin,  rParent,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.twin,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.twin,  rParent,  true);	  FlattenPrefixes(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	81	None	replace
434	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  null,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  null,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  null,  true);	  FlattenPrefixes(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	81	None	replace
435	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  refs,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	37	None	replace
436	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  null);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  null);	  flattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	37	None	replace
437	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  n);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  n);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  n);	  flattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	37	None	replace
438	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  n.name);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  n.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  n.name);	  flattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	37	None	replace
439	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  nameMap);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  nameMap);	  FlattenNameRef(nameMap,    r.node,    rParent,    alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
440	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent);	  FlattenNameRef(nameMap,    r.node,    rParent,    alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
441	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  rParent,  UNSAFE_THIS);	  FlattenNameRef(nameMap,    r.node,    rParent,    alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
442	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  rParent,  originalName);	  FlattenNameRef(nameMap,    r.node,    rParent,    alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
443	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  n,  r.node,  rParent,  alias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  n,  r.node,  rParent,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  n,  r.node,  rParent,  alias);	  FlattenNameRef(nameMap,    r.node,    rParent,    alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
444	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  originalName,  alias);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  originalName,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  originalName,  alias);	  FlattenNameRef(nameMap,    r.node,    rParent,    alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
445	[BUG]  [BUGGY]  FlattenNameRef(n,  nameMap,  r.node,  rParent,  alias);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(n,  nameMap,  r.node,  rParent,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(n,  nameMap,  r.node,  rParent,  alias);	  FlattenNameRef(nameMap,    r.node,    rParent,    alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
446	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC);	  FlattenNameRef(alias,    r.node,    rParent,    originalName);    	non-compiled	[CE]  not  a  statement	108	None	replace
447	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	66	None	replace
448	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	66	None	replace
449	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	66	None	replace
450	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  null);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  null);	  flattenNameRef(alias,    r.node,    rParent,    originalName,    null);    	non-compiled	[CE]  not  a  statement	40	None	replace
451	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  null);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  nameMap,  null);	  flattenNameRef(alias,    r.node,    rParent,    originalName,    null);    	non-compiled	[CE]  not  a  statement	40	None	replace
452	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  originalName,  null);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  originalName,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  originalName,  null);	  flattenNameRef(alias,    r.node,    rParent,    originalName,    null);    	non-compiled	[CE]  not  a  statement	40	None	replace
453	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  null);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  refs,  null);	  flattenNameRef(alias,    r.node,    rParent,    originalName,    null);    	non-compiled	[CE]  not  a  statement	40	None	replace
454	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  null,  r.global);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  null,  r.global);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  originalName,  null,  r.global);	  flattenNameRef(alias,    r.node,    rParent,    originalName,    null);    	non-compiled	[CE]  not  a  statement	40	None	replace
455	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  null,  r.type);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  null,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  originalName,  null,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    originalName,    null);    	non-compiled	[CE]  not  a  statement	40	None	replace
456	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
457	[BUG]  [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isLitKey(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
458	[BUG]  [BUGGY]  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isName(r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
459	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  refs,  rParent,  globalNames);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	105	None	replace
460	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  globalNames);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	105	None	replace
461	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  nameMap,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  nameMap,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  nameMap,  rParent,  globalNames);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	105	None	replace
462	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  globalNames,  rParent);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  globalNames,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  globalNames,  rParent);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	105	None	replace
463	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  originalName,  globalNames);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  originalName,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  originalName,  globalNames);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	105	None	replace
464	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  rParent,  flattenPrefixes);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  rParent,  flattenPrefixes);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  rParent,  flattenPrefixes);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	105	None	replace
465	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  rParent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenNames,  rParent);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenNames);    	non-compiled	[CE]  not  a  statement	122	None	replace
466	[BUG]  [BUGGY]  FlattenPrefixes(flattenNames,  r.node,  rParent,  alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(flattenNames,  r.node,  rParent,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(flattenNames,  r.node,  rParent,  alias);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenNames);    	non-compiled	[CE]  not  a  statement	122	None	replace
467	[BUG]  [BUGGY]  FlattenPrefixes(alias,  flattenNames,  r.node,  rParent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  flattenNames,  r.node,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  flattenNames,  r.node,  rParent);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenNames);    	non-compiled	[CE]  not  a  statement	122	None	replace
468	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  r.type);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenNames,  r.type);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenNames);    	non-compiled	[CE]  not  a  statement	122	None	replace
469	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  r.getTwin());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenNames,  r.getTwin());	  FlattenPrefixes(alias,    r.node,    rParent,    flattenNames);    	non-compiled	[CE]  not  a  statement	122	None	replace
470	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  r.refs);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenNames,  r.refs);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenNames);    	non-compiled	[CE]  not  a  statement	122	None	replace
471	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  r.isSet());  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenNames,  r.isSet());	  FlattenPrefixes(alias,    r.node,    rParent,    flattenNames);    	non-compiled	[CE]  not  a  statement	122	None	replace
472	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  null);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenNames,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenNames,  null);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenNames);    	non-compiled	[CE]  not  a  statement	122	None	replace
473	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.name,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.name,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.name,  r.node,  rParent,  true);	  FlattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	24	None	replace
474	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  rParent,  true);	  FlattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	24	None	replace
475	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  null,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  null,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  null,  true);	  FlattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	24	None	replace
476	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  false,  r.type);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  false,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  false,  r.type);	  flattenObjectRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	72	None	replace
477	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  null,  r.originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  null,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  null,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.originalName);    	non-compiled	[CE]  not  a  statement	76	None	replace
478	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  null,  r.name);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.originalName);    	non-compiled	[CE]  not  a  statement	76	None	replace
479	[BUG]  [BUGGY]  flattenNameRef(alias,  r.name,  r.node,  UNKNOWN_EXPR_TYPE,  r.name);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.name,  r.node,  UNKNOWN_EXPR_TYPE,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.name,  r.node,  UNKNOWN_EXPR_TYPE,  r.name);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
480	[BUG]  [BUGGY]  FlattenNameRef(r.name,  r.node,  UNKNOWN_EXPR_TYPE,  alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(r.name,  r.node,  UNKNOWN_EXPR_TYPE,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(r.name,  r.node,  UNKNOWN_EXPR_TYPE,  alias);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
481	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  null,  r.isSet());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  null,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  null,  r.isSet());	  flattenPrefixes(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	39	None	replace
482	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.isSet());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  r.isSet());	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
483	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.type);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  null,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
484	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.refs.size());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.refs.size());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  null,  r.refs.size());	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
485	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node);	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
486	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  -1);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  -1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  -1);	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
487	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  0);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  0);	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
488	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  localNameMap);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  localNameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  localNameMap);	  FlattenPrefixes(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	4	None	replace
489	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  nameMap,  null);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  nameMap,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  nameMap,  null);	  FlattenPrefixes(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	4	None	replace
490	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  true);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    true);    	non-compiled	[CE]  not  a  statement	21	None	replace
491	[BUG]  [BUGGY]  flattenRef(alias,  r.parent,  r.node,  false);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.parent,  r.node,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.parent,  r.node,  false);	  flattenRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	93	None	replace
492	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  false,  r.type);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  false,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  false,  r.type);	  flattenRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	93	None	replace
493	[BUG]  [BUGGY]  FlattenPrefixes(alias,  n,  r.node,  rParent,  false);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  n,  r.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  n,  r.node,  rParent,  false);	  FlattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	26	None	replace
494	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(r.node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	87	None	replace
495	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION,  r.node);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION,  r.node);	  Preconditions.checkState(r.node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	87	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||  r.node.getTwin()!=  null);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||  r.node.getTwin()!=  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||  r.node.getTwin()!=  null);	  Preconditions.checkState(r.node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	87	None	replace
497	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	65	None	replace
498	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	65	None	replace
499	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());	  FlattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	65	None	replace
500	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);	  FlattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	52	None	replace
501	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);	  FlattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	52	None	replace
502	[BUG]  [BUGGY]  FlattenPrefixes(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  FlattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	52	None	replace
503	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  UNKNOWN_EXPR_TYPE);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  UNKNOWN_EXPR_TYPE);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  nameMap,  UNKNOWN_EXPR_TYPE);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    nameMap);    	non-compiled	[CE]  not  a  statement	79	None	replace
504	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  nameMap,  UNKNOWN_EXPR_TYPE,  r.node);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  nameMap,  UNKNOWN_EXPR_TYPE,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  nameMap,  UNKNOWN_EXPR_TYPE,  r.node);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    nameMap);    	non-compiled	[CE]  not  a  statement	79	None	replace
505	[BUG]  [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  0);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectLitKey(alias,  r.node,  rParent,  0);	  flattenObjectLitKey(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	14	None	replace
506	[BUG]  [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  null);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectLitKey(alias,  r.node,  rParent,  null);	  flattenObjectLitKey(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	14	None	replace
507	[BUG]  [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  3);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  3);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectLitKey(alias,  r.node,  rParent,  3);	  flattenObjectLitKey(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	14	None	replace
508	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.originalName,  r.type);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.originalName,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  r.originalName,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.originalName);    	non-compiled	[CE]  not  a  statement	116	None	replace
509	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  }	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	31	None	replace
510	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  throw  new  IllegalArgumentException( " ");	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	31	None	replace
511	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	30	None	replace
512	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()!=  null  ||  r.isSet()))  {	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	30	None	replace
513	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  ||  (r.getTwin()!=  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  ||  (r.getTwin()!=  null  ||  r.isSet()))  {  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)  ||  (r.getTwin()!=  null  ||  r.isSet()))  {	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()!=    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	30	None	replace
514	[BUG]  [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  false);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  false);	  FlattenUtil.flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	104	None	replace
515	[BUG]  [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  flattenPrefixes);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  flattenPrefixes);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  flattenPrefixes);	  FlattenUtil.flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	104	None	replace
516	[BUG]  [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  0);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  0);	  FlattenUtil.flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	104	None	replace
517	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNKNOWN_EXPR_TYPE,  r.node);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNKNOWN_EXPR_TYPE,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  UNKNOWN_EXPR_TYPE,  r.node);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
518	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  refs,  UNKNOWN_EXPR_TYPE,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  refs,  UNKNOWN_EXPR_TYPE,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  refs,  UNKNOWN_EXPR_TYPE,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
519	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  0);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  0);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
520	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  URI);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  URI);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  URI);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
521	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node);	  Preconditions.checkState(r.node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	83	None	replace
522	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(r.node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	83	None	replace
523	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  r.twin,  rParent);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  r.twin,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  r.twin,  rParent);	  FlattenPrefixes(alias,    r.node,    originalName,    rParent);    	non-compiled	[CE]  not  a  statement	120	None	replace
524	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  r.originalName,  r.getTwin());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  r.originalName,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  r.originalName,  r.getTwin());	  FlattenPrefixes(alias,    r.node,    originalName,    rParent);    	non-compiled	[CE]  not  a  statement	120	None	replace
525	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  nameMap,  rParent,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  nameMap,  rParent,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  nameMap,  rParent,  originalName);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
526	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  originalName,  nameMap);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  originalName,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  originalName,  nameMap);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
527	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  originalName,  rParent,  nameMap);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  originalName,  rParent,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  originalName,  rParent,  nameMap);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
528	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  UNKNOWN_SIGNATURES);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	101	None	replace
529	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  localNameMap);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  localNameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  localNameMap);	  flattenPrefixes(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	45	None	replace
530	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    flattenPrefixes(alias,    r,    1);    	non-compiled	[CE]  not  a  statement	33	None	replace
531	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);  }  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenPrefixes(alias,  r,  1);  }	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    flattenPrefixes(alias,    r,    1);    	non-compiled	[CE]  not  a  statement	33	None	replace
532	[BUG]  [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  true);	  flattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
533	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenRefs,  1);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
534	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  null);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenRefs,  null);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
535	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.root);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.root);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenRefs,  r.root);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
536	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  0);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  0);	  flattenObjectRef(alias,    r.node,    rParent,    twin);    	non-compiled	[CE]  not  a  statement	74	None	replace
537	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  flattenPrefixes,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  flattenPrefixes,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  flattenPrefixes,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
538	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  flattenNames,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  flattenNames,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  flattenNames,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
539	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  r.type);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  globalNames,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  globalNames,  r.type);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
540	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    return;    	non-compiled	[CE]  not  a  statement	34	None	replace
541	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n,  r.node)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    return;    	non-compiled	[CE]  not  a  statement	34	None	replace
542	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.getTwin());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.getTwin());	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.getTwin());    	non-compiled	[CE]  not  a  statement	70	None	replace
543	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.getParent());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.getParent());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.getParent());	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.getTwin());    	non-compiled	[CE]  not  a  statement	70	None	replace
544	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  globalNames);	  flattenNameRef(alias,    r.node,    rParent,    localNames);    	non-compiled	[CE]  not  a  statement	47	None	replace
545	[BUG]  [BUGGY]  FlattenNameRef(r.node,  alias,  localNames);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(r.node,  alias,  localNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(r.node,  alias,  localNames);	  flattenNameRef(alias,    r.node,    rParent,    localNames);    	non-compiled	[CE]  not  a  statement	47	None	replace
546	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(label,  r.node,  rParent)&&  (r.getTwin()  ==  null  ||  r.isSet()))  {	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
547	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  URI);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  URI);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  URI);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	78	None	replace
548	[BUG]  [BUGGY]  FlattenRef(r,  alias,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(r,  alias,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(r,  alias,  r.node,  rParent,  true);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
549	[BUG]  [BUGGY]  FlattenRef(alias,  r.parent,  r.node,  true);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.parent,  r.node,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.parent,  r.node,  true);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
550	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  null,  true);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  null,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  null,  true);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
551	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  null);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  null);	  flattenNameRef(alias,    r.node,    rParent,    originalName,    null);    	non-compiled	[CE]  not  a  statement	40	None	replace
552	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  null);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  null);	  flattenNameRef(alias,    r.node,    rParent,    originalName,    null);    	non-compiled	[CE]  not  a  statement	40	None	replace
553	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  n,  null);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  n,  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  n,  null);	  flattenNameRef(alias,    r.node,    rParent,    originalName,    null);    	non-compiled	[CE]  not  a  statement	40	None	replace
554	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	85	None	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.name);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.name);	  Preconditions.checkState(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	85	None	replace
556	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
557	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  1);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
558	[BUG]  [BUGGY]  FlattenUtil.flattenObjectRef(alias,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenObjectRef(alias,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenObjectRef(alias,  r.node,  rParent,  true);	  flattenObjectRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	73	None	replace
559	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.parent,  r.node,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.parent,  r.node,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.parent,  r.node,  true);	  flattenObjectRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	73	None	replace
560	[BUG]  [BUGGY]  n.addChildToBack(r.node);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  n.addChildToBack(r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	n.addChildToBack(r.node);	  n.removeChild(r.node);    	non-compiled	[CE]  not  a  statement	112	None	replace
561	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  0);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  0);	  FlattenPrefixes(alias,    r.node,    rParent,    UNKNOWN_SYNTHETIC);    	non-compiled	[CE]  not  a  statement	7	None	replace
562	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNameMap);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNameMap);	  flattenNameRef(alias,    r.node,    rParent,    localNameMap);    	non-compiled	[CE]  not  a  statement	82	None	replace
563	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  localNameMap,  n);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  localNameMap,  n);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  localNameMap,  n);	  flattenNameRef(alias,    r.node,    rParent,    localNameMap);    	non-compiled	[CE]  not  a  statement	82	None	replace
564	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  localNameMap,  r.type);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  localNameMap,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  localNameMap,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    localNameMap);    	non-compiled	[CE]  not  a  statement	82	None	replace
565	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  -1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  -1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.NAME,  -1);	  Preconditions.checkArgument(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	111	None	replace
566	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node);	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
567	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.THIS);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(n.getType()  ==  Token.THIS);	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
568	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS  ||  r.node.getTwin()  ==  null);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS  ||  r.node.getTwin()  ==  null);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.THIS  ||  r.node.getTwin()  ==  null);	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
569	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.node);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  r.node);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.refs);    	non-compiled	[CE]  not  a  statement	117	None	replace
570	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.node,  r.refs);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.node,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  r.node,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.refs);    	non-compiled	[CE]  not  a  statement	117	None	replace
571	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.refs,  r.originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.refs,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  r.refs,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.refs);    	non-compiled	[CE]  not  a  statement	117	None	replace
572	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  null,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.refs);    	non-compiled	[CE]  not  a  statement	117	None	replace
573	[BUG]  [BUGGY]  flattenRef(alias,  r.parent,  r.node,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.parent,  r.node,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.parent,  r.node,  true);	  flattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	25	None	replace
574	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.name,  rParent,  globalNames);	  flattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	106	None	replace
575	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  refs,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  refs,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  refs,  rParent,  globalNames);	  flattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	106	None	replace
576	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);	  flattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	50	None	replace
577	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  rParent);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  rParent);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	67	None	replace
578	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_WARNING,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_WARNING,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  DEFAULT_NAMESPACE_WARNING,  UNSAFE_THIS);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	19	None	replace
579	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r,    	non-compiled	[CE]  not  a  statement	32	None	replace
580	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  localNameMap,  n.refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  localNameMap,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  localNameMap,  n.refs);	  flattenNameRef(alias,    r.node,    rParent,    nameMap,    n.refs);    	non-compiled	[CE]  not  a  statement	109	None	replace
581	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  refs,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  refs,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  refs,  UNSAFE_THIS,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	44	None	replace
582	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  false,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  false,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  false,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	44	None	replace
583	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  localNameMap);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  localNameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  localNameMap);	  flattenObjectRef(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	57	None	replace
584	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.node);	  flattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	43	None	replace
585	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  UNSAFE_THIS);	  flattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	43	None	replace
586	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.toString());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.toString());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.toString());	  flattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	43	None	replace
587	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.node);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	16	None	replace
588	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  false,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  false,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  false,  UNSAFE_THIS);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	16	None	replace
589	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	16	None	replace
590	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.toString());  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.toString());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.toString());	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	16	None	replace
591	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  alias));  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  alias));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  alias));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
592	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  originalName));  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  originalName));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  originalName));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
593	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.name));  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.name));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.name));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
594	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  r.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	37	None	replace
595	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  r.toString());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  r.toString());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  r.toString());	  flattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	37	None	replace
596	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  r.name);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  globalNames,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  globalNames,  r.name);	  flattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	37	None	replace
597	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.parent,  r.node,  false);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.parent,  r.node,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.parent,  r.node,  false);	  flattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	27	None	replace
598	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  false,  r.node);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  false,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  false,  r.node);	  flattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	27	None	replace
599	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  nameMap);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  nameMap);	  flattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
600	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  UNSAFE_NAMESPACE_WARNING,  rParent);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  UNSAFE_NAMESPACE_WARNING,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  originalName,  UNSAFE_NAMESPACE_WARNING,  rParent);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    rParent);    	non-compiled	[CE]  not  a  statement	69	None	replace
601	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.name);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    rParent);    	non-compiled	[CE]  not  a  statement	69	None	replace
602	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.getTwin()));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.getTwin()));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.getTwin()));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	86	None	replace
603	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.node));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.node));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.node));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	86	None	replace
604	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	49	None	replace
605	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  nameMap);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  nameMap);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	49	None	replace
606	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  n.refs);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  n.refs);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
607	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  n.refs,  UNKNOWN_EXPR_TYPE);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  n.refs,  UNKNOWN_EXPR_TYPE);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  n.refs,  UNKNOWN_EXPR_TYPE);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
608	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  n,  UNKNOWN_EXPR_TYPE,  r.refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  n,  UNKNOWN_EXPR_TYPE,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  n,  UNKNOWN_EXPR_TYPE,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
609	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n,  r.refs);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
610	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n.refs,  r.type);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n.refs,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  n.refs,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
611	[BUG]  [BUGGY]  flattenNameRef(alias,  r.name,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.name,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.name,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
612	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  r.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
613	[BUG]  [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r    	non-compiled	[CE]  not  a  statement	35	None	replace
614	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  flattenPrefixes,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  flattenPrefixes,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  flattenPrefixes,  UNSAFE_THIS);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
615	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  refs,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  refs,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  refs,  UNSAFE_THIS,  originalName);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
616	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  false,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  false,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  false,  originalName);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
617	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  UNSAFE_THIS);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
618	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  r.node,  UNSAFE_THIS,  originalName));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  r.node,  UNSAFE_THIS,  originalName));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  r.node,  UNSAFE_THIS,  originalName));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
619	[BUG]  [BUGGY]  Context.report(JSError.make(r.sourceName,  r.node,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.sourceName,  r.node,  UNSAFE_THIS));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.sourceName,  r.node,  UNSAFE_THIS));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
620	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS,  rParent);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS,  rParent);	  flattenNameRef(alias,    r.node,    UNSAFE_THIS,    rParent);    	non-compiled	[CE]  not  a  statement	51	None	replace
621	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(r.node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	88	None	replace
622	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  -1);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  -1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  -1);	  Preconditions.checkState(r.node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	88	None	replace
623	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  &&!NodeUtil.mayHaveSideEffects(r.node));  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  &&!NodeUtil.mayHaveSideEffects(r.node));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  &&!NodeUtil.mayHaveSideEffects(r.node));	  Preconditions.checkState(r.node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	88	None	replace
624	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  -1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  -1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  -1);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	60	None	replace
625	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.parent,  r.node,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.parent,  r.node,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.parent,  r.node,  true);	  FlattenPrefixes(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	81	None	replace
626	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);	  flattenObjectRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	56	None	replace
627	[BUG]  [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);	  flattenObjectRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	56	None	replace
628	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);	  flattenObjectRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	56	None	replace
629	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);	  flattenObjectRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	56	None	replace
630	[BUG]  [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  flattenObjectRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	56	None	replace
631	[BUG]  [BUGGY]  flattenNameRef(alias,  r.name,  r.node,  rParent,  false,  r.type);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.name,  r.node,  rParent,  false,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.name,  r.node,  rParent,  false,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.type);    	non-compiled	[CE]  not  a  statement	64	None	replace
632	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.sourceName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.sourceName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.sourceName);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.type);    	non-compiled	[CE]  not  a  statement	64	None	replace
633	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  0);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  0);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    0);    	non-compiled	[CE]  not  a  statement	77	None	replace
634	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	68	None	replace
635	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	12	None	replace
636	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	12	None	replace
637	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	12	None	replace
638	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	12	None	replace
639	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  1);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    1);    	non-compiled	[CE]  not  a  statement	22	None	replace
640	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  0);	  FlattenPrefixes(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	5	None	replace
641	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);	  FlattenPrefixes(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	5	None	replace
642	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.type);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  r.type);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	98	None	replace
643	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.node);	  FlattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	119	None	replace
644	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  originalName);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  originalName);	  FlattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	119	None	replace
645	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  flattenPrefixes);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  rParent,  flattenPrefixes);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  rParent,  flattenPrefixes);	  FlattenNameRef(nameMap,    r.node,    rParent,    alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
646	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  true,  r.originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  true,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  true,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    true);    	non-compiled	[CE]  not  a  statement	21	None	replace
647	[BUG]  [BUGGY]  flattenObject(alias,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObject(alias,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObject(alias,  r.node,  rParent,  true);	  flattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	25	None	replace
648	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  refs);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  refs);	  flattenNameRef(alias,    r.node,    rParent,    refs);    	non-compiled	[CE]  not  a  statement	36	None	replace
649	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  n.refs);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  n.refs);	  flattenNameRef(alias,    r.node,    rParent,    refs);    	non-compiled	[CE]  not  a  statement	36	None	replace
650	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  nameMap,  n.refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  nameMap,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  r.node,  rParent,  nameMap,  n.refs);	  flattenNameRef(alias,    r.node,    rParent,    nameMap,    n.refs);    	non-compiled	[CE]  not  a  statement	109	None	replace
651	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  nameMap,  n.refs,  originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  nameMap,  n.refs,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  nameMap,  n.refs,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    nameMap,    n.refs);    	non-compiled	[CE]  not  a  statement	109	None	replace
652	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  rParent,  nameMap,  r.node);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  rParent,  nameMap,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  rParent,  nameMap,  r.node);	  flattenNameRef(alias,    r.node,    rParent,    nameMap,    n.refs);    	non-compiled	[CE]  not  a  statement	109	None	replace
653	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.namespace);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.namespace);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  nameMap,  n.namespace);	  flattenNameRef(alias,    r.node,    rParent,    nameMap,    n.refs);    	non-compiled	[CE]  not  a  statement	109	None	replace
654	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  originalName);	  FlattenPrefixes(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	5	None	replace
655	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  r.originalName);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  r.originalName);	  FlattenPrefixes(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	5	None	replace
656	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.NAME  &&!NodeUtil.isObjectLitKey(r.node,  rParent));	  Preconditions.checkArgument(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	111	None	replace
657	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	111	None	replace
658	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()!=  Token.NAME);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()!=  Token.NAME);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()!=  Token.NAME);	  Preconditions.checkArgument(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	111	None	replace
659	[BUG]  [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenObjectRef(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);	  flattenObjectRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	54	None	replace
660	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  refs,  rParent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  refs,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  refs,  rParent);	  FlattenPrefixes(alias,    r.node,    rParent,    refs);    	non-compiled	[CE]  not  a  statement	3	None	replace
661	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  UNKNOWN_SYNTHETIC,  originalName);	  FlattenPrefixes(alias,    r.node,    rParent,    UNKNOWN_SYNTHETIC);    	non-compiled	[CE]  not  a  statement	7	None	replace
662	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  rParent,  localNames);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  rParent,  localNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  originalName,  rParent,  localNames);	  flattenNameRef(alias,    r.node,    rParent,    localNames);    	non-compiled	[CE]  not  a  statement	47	None	replace
663	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  rParent,  localNames);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  rParent,  localNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  rParent,  localNames);	  flattenNameRef(alias,    r.node,    rParent,    localNames);    	non-compiled	[CE]  not  a  statement	47	None	replace
664	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  localNames,  rParent);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  localNames,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  localNames,  rParent);	  flattenNameRef(alias,    r.node,    rParent,    localNames);    	non-compiled	[CE]  not  a  statement	47	None	replace
665	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  localNames,  r.type);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  localNames,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  localNames,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    localNames);    	non-compiled	[CE]  not  a  statement	47	None	replace
666	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.node,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.node,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  r.node,  NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	65	None	replace
667	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	65	None	replace
668	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	65	None	replace
669	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  false,  r.type,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.type);    	non-compiled	[CE]  not  a  statement	64	None	replace
670	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  true);	  FlattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	24	None	replace
671	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  twin,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  twin,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  twin,  true);	  FlattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	24	None	replace
672	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  UNKNOWN_SIGNATURES,  originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  UNKNOWN_SIGNATURES,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  refs,  UNKNOWN_SIGNATURES,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
673	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  rParent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  rParent);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
674	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNKNOWN_SIGNATURES,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNKNOWN_SIGNATURES,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  rParent,  UNKNOWN_SIGNATURES,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
675	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  refs,  UNKNOWN_SIGNATURES,  originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  refs,  UNKNOWN_SIGNATURES,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  refs,  UNKNOWN_SIGNATURES,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
676	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  alias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  alias);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	102	None	replace
677	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	49	None	replace
678	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	49	None	replace
679	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  rParent,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	49	None	replace
680	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	49	None	replace
681	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  UNSAFE_NAMESPACE_REDEFINED_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	49	None	replace
682	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);	  flattenNameRef(alias,    r.node,    rParent,    DEFAULT_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	20	None	replace
683	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  DEFAULT_NAMESPACE_REDEFINED_WARNING);	  flattenNameRef(alias,    r.node,    rParent,    DEFAULT_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	20	None	replace
684	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  DEFAULT_NAMESPACE_REDEFINED_WARNING,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    DEFAULT_NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	20	None	replace
685	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  INVALID_SIGNATURES,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  INVALID_SIGNATURES,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  INVALID_SIGNATURES,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    INVALID_SIGNATURES);    	non-compiled	[CE]  not  a  statement	103	None	replace
686	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  originalName,  n,  rParent);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  originalName,  n,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  originalName,  n,  rParent);	  FlattenPrefixes(alias,    r.node,    originalName,    rParent);    	non-compiled	[CE]  not  a  statement	120	None	replace
687	[BUG]  [BUGGY]  FlattenPrefixes(alias,  n,  originalName,  r.node);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  n,  originalName,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  n,  originalName,  r.node);	  FlattenPrefixes(alias,    r.node,    originalName,    rParent);    	non-compiled	[CE]  not  a  statement	120	None	replace
688	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  false,  r.originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  false,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  false,  r.originalName);	  flattenRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	93	None	replace
689	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  false,  r.refs);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  false,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  false,  r.refs);	  flattenRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	93	None	replace
690	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  ||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  ||  (r.getTwin()  ==  null  ||  r.isSet()))  {  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)  ||  (r.getTwin()  ==  null  ||  r.isSet()))  {	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
691	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  originalName,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  originalName,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  originalName,  rParent,  globalNames);	  FlattenPrefixes(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	1	None	replace
692	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  refs,  globalNames);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  refs,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  refs,  globalNames);	  FlattenPrefixes(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	1	None	replace
693	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  globalNames,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  globalNames,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  refs,  globalNames,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
694	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  globalNames,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  globalNames,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  globalNames,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	63	None	replace
695	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  r.originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  NAMESPACE_REDEFINED_WARNING,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.originalName);    	non-compiled	[CE]  not  a  statement	76	None	replace
696	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.originalName,  r.type);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.originalName,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  null,  r.originalName,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.originalName);    	non-compiled	[CE]  not  a  statement	76	None	replace
697	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.originalName,  r.uNSAFE_THIS);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.originalName,  r.uNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  null,  r.originalName,  r.uNSAFE_THIS);	  flattenNameRef(alias,    r.node,    rParent,    null,    r.originalName);    	non-compiled	[CE]  not  a  statement	76	None	replace
698	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node.getFirstChild());  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node.getFirstChild());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node.getFirstChild());	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
699	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node.getName());  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node.getName());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node.getName());	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
700	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node.getString());  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node.getString());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.THIS,  r.node.getString());	  Preconditions.checkState(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	113	None	replace
701	[BUG]  [BUGGY]  FlattenPrefixes(flattenRefs,  r.node,  rParent,  alias);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(flattenRefs,  r.node,  rParent,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(flattenRefs,  r.node,  rParent,  alias);	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
702	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.getName());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  flattenRefs,  r.getName());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  flattenRefs,  r.getName());	  FlattenPrefixes(alias,    r.node,    rParent,    flattenRefs);    	non-compiled	[CE]  not  a  statement	121	None	replace
703	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  nameMap));  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  nameMap));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  nameMap));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
704	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNKNOWN_EXTERNS_ERROR,  originalName));  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNKNOWN_EXTERNS_ERROR,  originalName));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNKNOWN_EXTERNS_ERROR,  originalName));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS,    originalName));    	non-compiled	[CE]  not  a  statement	89	None	replace
705	[BUG]  [BUGGY]  FlattenPrefixes(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  n,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING);	  FlattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	52	None	replace
706	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  originalName);	  FlattenPrefixes(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	52	None	replace
707	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  false);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  false);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  false);	  FlattenNameRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	92	None	replace
708	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  nameMap,  UNKNOWN_EXPR_TYPE,  r.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  nameMap,  UNKNOWN_EXPR_TYPE,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  nameMap,  UNKNOWN_EXPR_TYPE,  r.name);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    nameMap);    	non-compiled	[CE]  not  a  statement	79	None	replace
709	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  nameMap,  UNKNOWN_EXPR_TYPE,  r.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  nameMap,  UNKNOWN_EXPR_TYPE,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  nameMap,  UNKNOWN_EXPR_TYPE,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    nameMap);    	non-compiled	[CE]  not  a  statement	79	None	replace
710	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  alias);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  alias);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	101	None	replace
711	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  url);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  url);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  url);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	101	None	replace
712	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  URI);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  URI);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  URI);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    originalName);    	non-compiled	[CE]  not  a  statement	101	None	replace
713	[BUG]  [BUGGY]  FlattenUtil.flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS);	  flattenObjectLitKey(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	14	None	replace
714	[BUG]  [BUGGY]  FlattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  originalName);	  flattenObjectLitKey(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	14	None	replace
715	[BUG]  [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectLitKey(alias,  r.node,  rParent,  UNSAFE_THIS,  nameMap);	  flattenObjectLitKey(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	14	None	replace
716	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  nameMap,  rParent);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  nameMap,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  nameMap,  rParent);	  FlattenPrefixes(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	4	None	replace
717	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  nameMap,  n.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  nameMap,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  nameMap,  n.refs);	  FlattenPrefixes(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	4	None	replace
718	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  flattenPrefixes);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  flattenPrefixes);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  flattenPrefixes);	  FlattenPrefixes(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	6	None	replace
719	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  null,  r.originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  null,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  null,  r.originalName);	  FlattenPrefixes(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	6	None	replace
720	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.node,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.node,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.node,  UNSAFE_NAMESPACE_WARNING);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	68	None	replace
721	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  r.node);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.name,  r.node);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	68	None	replace
722	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.uNSAFE_THIS,  r.node);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.uNSAFE_THIS,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.uNSAFE_THIS,  r.node);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	68	None	replace
723	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  UNSAFE_THIS,  true);	  flattenPrefixes(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	13	None	replace
724	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  n,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  n,  UNSAFE_THIS));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  n,  UNSAFE_THIS));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	86	None	replace
725	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.getName()));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.getName()));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  r.getName()));	  Context.report(JSError.make(r,    n,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	86	None	replace
726	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	42	None	replace
727	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	42	None	replace
728	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	42	None	replace
729	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  UNSAFE_THIS,  originalName));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  UNSAFE_THIS,  originalName));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  UNSAFE_THIS,  originalName));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
730	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  XMODULE_NAMESPACE_WARNING,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  XMODULE_NAMESPACE_WARNING,  UNSAFE_THIS));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  XMODULE_NAMESPACE_WARNING,  UNSAFE_THIS));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
731	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  XMODULE_REF,  rParent,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  XMODULE_REF,  rParent,  UNSAFE_THIS));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  XMODULE_REF,  rParent,  UNSAFE_THIS));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
732	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  UNSAFE_NAMESPACE_WARNING,  r.node));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  UNSAFE_NAMESPACE_WARNING,  r.node));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  UNSAFE_NAMESPACE_WARNING,  r.node));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
733	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  XMODULE_REFERENCE_WARNING,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  XMODULE_REFERENCE_WARNING,  UNSAFE_THIS));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  XMODULE_REFERENCE_WARNING,  UNSAFE_THIS));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
734	[BUG]  [BUGGY]  Context.report(JSError.make(r.node,  UNSAFE_THIS,  rParent));  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Context.report(JSError.make(r.node,  UNSAFE_THIS,  rParent));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Context.report(JSError.make(r.node,  UNSAFE_THIS,  rParent));	  Context.report(JSError.make(r.node,    rParent,    UNSAFE_THIS));    	non-compiled	[CE]  not  a  statement	84	None	replace
735	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.node.getName());  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.node.getName());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.NAME,  r.node.getName());	  Preconditions.checkState(r.node.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	85	None	replace
736	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  rParent.getTwin());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  rParent.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node,  rParent.getTwin());	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.getTwin());    	non-compiled	[CE]  not  a  statement	70	None	replace
737	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_THIS,  r.type);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  UNSAFE_THIS,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  UNSAFE_THIS,  r.type);	  FlattenPrefixes(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	2	None	replace
738	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  null,  r.isSet());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  null,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  null,  r.isSet());	  flattenObjectRef(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	58	None	replace
739	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  null,  r.originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  null,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  null,  r.originalName);	  flattenObjectRef(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	58	None	replace
740	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.type);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	43	None	replace
741	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.isSet());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.isSet());	  flattenNameRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	43	None	replace
742	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  false,  r.originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  false,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  false,  r.originalName);	  flattenObjectRef(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	72	None	replace
743	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  originalName);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  originalName);	  flattenObjectRef(alias,    r.node,    rParent,    globalName);    	non-compiled	[CE]  not  a  statement	71	None	replace
744	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  originalName,  rParent);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  originalName,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  originalName,  rParent);	  flattenObjectRef(alias,    r.node,    rParent,    globalName);    	non-compiled	[CE]  not  a  statement	71	None	replace
745	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  0);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  0);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  0);	  FlattenNameRef(alias,    r.node,    rParent,    0);    	non-compiled	[CE]  not  a  statement	91	None	replace
746	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  alias,  rParent);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  alias,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  alias,  rParent);	  FlattenNameRef(nameMap,    r.node,    rParent,    alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
747	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  alias,  r.node,  rParent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  alias,  r.node,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  alias,  r.node,  rParent);	  FlattenNameRef(nameMap,    r.node,    rParent,    alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
748	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  true);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  r.node,  rParent,  true);	  flattenNameRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
749	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;  }  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  return;  }	  NodeUtil.isObjectLitKey(r.node,    rParent)&&    (r.getTwin()    ==    null    ||    r.isSet()))    {    return;    	non-compiled	[CE]  not  a  statement	34	None	replace
750	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
751	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  refs,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  refs,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  refs,  UNSAFE_THIS,  originalName);	  FlattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	118	None	replace
752	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  null,  r.isSet());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  null,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  r.node,  rParent,  null,  r.isSet());	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
753	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.isTwin());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.isTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  null,  r.isTwin());	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
754	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.isImmutableValue());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  null,  r.isImmutableValue());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  null,  r.isImmutableValue());	  flattenNameRef(alias,    r.node,    rParent,    null,    r.isSet());    	non-compiled	[CE]  not  a  statement	110	None	replace
755	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  -1,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  -1,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  -1,  true);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
756	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  originalName,  true);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  originalName,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  originalName,  true);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
757	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  twin,  true);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  twin,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  twin,  true);	  FlattenRef(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
758	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  alias);	  flattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
759	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  url);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  url);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  url);	  flattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
760	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  urlName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  urlName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_THIS,  urlName);	  flattenRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
761	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  false,  r.refs);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  false,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  originalName,  false,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    false,    r.refs);    	non-compiled	[CE]  not  a  statement	117	None	replace
762	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  r.node,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  r.node,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  r.node,  UNSAFE_NAMESPACE_WARNING);	  FlattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	119	None	replace
763	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.node);	  FlattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    r.node);    	non-compiled	[CE]  not  a  statement	119	None	replace
764	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  this,  originalName);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  this,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  this,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    this);    	non-compiled	[CE]  not  a  statement	75	None	replace
765	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.type);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	53	None	replace
766	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  rParent,  UNSAFE_THIS);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	53	None	replace
767	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.name);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_THIS,  r.name);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	53	None	replace
768	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.parent,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.parent,  UNSAFE_THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  r.parent,  UNSAFE_THIS);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	53	None	replace
769	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  refs,  globalNames,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  refs,  globalNames,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  refs,  globalNames,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	37	None	replace
770	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  rParent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  originalName,  rParent);	  flattenNameRef(alias,    r.node,    rParent,    globalNames,    originalName);    	non-compiled	[CE]  not  a  statement	37	None	replace
771	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  UNSAFE_THIS,  originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  UNSAFE_THIS,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  refs,  UNSAFE_THIS,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	44	None	replace
772	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS,  r.type);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS,  r.type);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS,    originalName);    	non-compiled	[CE]  not  a  statement	44	None	replace
773	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  false,  r.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  false,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  false,  r.refs);	  flattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	27	None	replace
774	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  false,  r.getName());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  rParent,  false,  r.getName());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  rParent,  false,  r.getName());	  FlattenPrefixes(alias,    r.node,    rParent,    false);    	non-compiled	[CE]  not  a  statement	26	None	replace
775	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(n,  rParent))  {  flattenPrefixes(alias,  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(n,  rParent))  {  flattenPrefixes(alias,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(n,  rParent))  {  flattenPrefixes(alias,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r    	non-compiled	[CE]  not  a  statement	35	None	replace
776	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(n,  rParent))  {  flattenPrefixes(alias,  r  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(n,  rParent))  {  flattenPrefixes(alias,  r  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(n,  rParent))  {  flattenPrefixes(alias,  r	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r    	non-compiled	[CE]  not  a  statement	35	None	replace
777	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  r.type);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	19	None	replace
778	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  r.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  r.name);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	19	None	replace
779	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  r.node,  UNKNOWN_EXPR_TYPE,  n.refs);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  r.node,  UNKNOWN_EXPR_TYPE,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  r.node,  UNKNOWN_EXPR_TYPE,  n.refs);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
780	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  n,  UNKNOWN_EXPR_TYPE,  r.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  n,  UNKNOWN_EXPR_TYPE,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  n,  UNKNOWN_EXPR_TYPE,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
781	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  rParent,  UNKNOWN_EXPR_TYPE,  r.node);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  rParent,  UNKNOWN_EXPR_TYPE,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  rParent,  UNKNOWN_EXPR_TYPE,  r.node);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
782	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  n,  UNKNOWN_EXPR_TYPE,  r.refs);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  n,  UNKNOWN_EXPR_TYPE,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  n,  UNKNOWN_EXPR_TYPE,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    n.refs);    	non-compiled	[CE]  not  a  statement	62	None	replace
783	[BUG]  [BUGGY]  n.removeChild(r.node,  r.node);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  n.removeChild(r.node,  r.node);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	n.removeChild(r.node,  r.node);	  n.removeChild(r.node);    	non-compiled	[CE]  not  a  statement	112	None	replace
784	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type,  r.originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
785	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.type,  UNKNOWN_EXPR_TYPE,  r.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.type,  UNKNOWN_EXPR_TYPE,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.type,  UNKNOWN_EXPR_TYPE,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
786	[BUG]  [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  n,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  n,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
787	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type,  r.sourceName);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type,  r.sourceName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  r.type,  r.sourceName);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	61	None	replace
788	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  alias);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  alias);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	78	None	replace
789	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  UNKNOWN_EXPR_TYPE,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  refs,  UNKNOWN_EXPR_TYPE,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  refs,  UNKNOWN_EXPR_TYPE,  originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	78	None	replace
790	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS,  rParent);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  UNSAFE_THIS,  rParent);	  flattenNameRef(alias,    r.node,    UNSAFE_THIS,    rParent);    	non-compiled	[CE]  not  a  statement	51	None	replace
791	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_THIS,  rParent,  originalName);	  flattenNameRef(alias,    r.node,    UNSAFE_THIS,    rParent);    	non-compiled	[CE]  not  a  statement	51	None	replace
792	[BUG]  [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  refs);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenUtil.flattenNameRef(alias,  r.node,  rParent,  refs);	  FlattenUtil.flattenNameRef(alias,    r.node,    rParent,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	104	None	replace
793	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node.getName());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node.getName());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node.getName());	  Preconditions.checkState(r.node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	83	None	replace
794	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node.getFirstChild());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node.getFirstChild());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.EXPR_RESULT,  r.node.getFirstChild());	  Preconditions.checkState(r.node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	83	None	replace
795	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  nameMap,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  nameMap,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  nameMap,  rParent,  globalNames);	  flattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	106	None	replace
796	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  n,  globalNames);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  n,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  originalName,  n,  globalNames);	  flattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	106	None	replace
797	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  rParent,  refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  originalName,  rParent,  refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  originalName,  rParent,  refs);	  flattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	106	None	replace
798	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  NAMESPACE_REDEFINED_WARNING,  UNSAFE_NAMESPACE_WARNING);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	66	None	replace
799	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.originalName);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.originalName);	  flattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	66	None	replace
800	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNKNOWN_EXPR_TYPE,  r.type,  r.originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNKNOWN_EXPR_TYPE,  r.type,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNKNOWN_EXPR_TYPE,  r.type,  r.originalName);	  FlattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.type);    	non-compiled	[CE]  not  a  statement	100	None	replace
801	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  rParent,  nameMap);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  rParent,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  refs,  rParent,  nameMap);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
802	[BUG]  [BUGGY]  FlattenNameRef(nameMap,  r.node,  originalName,  r.parent,  nameMap);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(nameMap,  r.node,  originalName,  r.parent,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(nameMap,  r.node,  originalName,  r.parent,  nameMap);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
803	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  n,  nameMap);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  n,  nameMap);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  n,  nameMap);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	107	None	replace
804	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  n.refs);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  n.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  n.refs);	  flattenObjectRef(alias,    r.node,    rParent,    refs);    	non-compiled	[CE]  not  a  statement	115	None	replace
805	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  rParent,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  rParent,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  rParent,  UNSAFE_NAMESPACE_WARNING);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	67	None	replace
806	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.type);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.type);	  FlattenNameRef(alias,    r.node,    rParent,    UNSAFE_NAMESPACE_WARNING);    	non-compiled	[CE]  not  a  statement	67	None	replace
807	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  r.type);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.GETPROP,  r.type);	  Preconditions.checkState(r.node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	88	None	replace
808	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  &&!NodeUtil.isName(r.node,  rParent));  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  &&!NodeUtil.isName(r.node,  rParent));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.GETPROP  &&!NodeUtil.isName(r.node,  rParent));	  Preconditions.checkState(r.node.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  not  a  statement	88	None	replace
809	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  -1,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  -1,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  -1,  true);	  FlattenPrefixes(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	81	None	replace
810	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  twin,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  twin,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  twin,  true);	  FlattenPrefixes(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	81	None	replace
811	[BUG]  [BUGGY]  FlattenPrefixes(alias,  r.node,  originalName,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenPrefixes(alias,  r.node,  originalName,  true);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenPrefixes(alias,  r.node,  originalName,  true);	  FlattenPrefixes(alias,    r.node,    rParent,    true);    	non-compiled	[CE]  not  a  statement	81	None	replace
812	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  alias);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  alias);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  alias);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
813	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  UNKNOWN_EXPR_TYPE,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  UNKNOWN_EXPR_TYPE,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  refs,  UNKNOWN_EXPR_TYPE,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
814	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  rParent,  UNKNOWN_EXPR_TYPE,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    UNKNOWN_EXPR_TYPE,    originalName);    	non-compiled	[CE]  not  a  statement	97	None	replace
815	[BUG]  [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  null,  r.originalName);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenPrefixes(alias,  r.node,  rParent,  null,  r.originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenPrefixes(alias,  r.node,  rParent,  null,  r.originalName);	  flattenPrefixes(alias,    r.node,    rParent,    null);    	non-compiled	[CE]  not  a  statement	39	None	replace
816	[BUG]  [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n,  r.node,  rParent,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n,  r.node,  rParent,  originalName);	  FlattenNameRef(alias,    r.node,    rParent,    originalName);    	non-compiled	[CE]  not  a  statement	108	None	replace
817	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.isSet());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  r.isSet());	  FlattenNameRef(alias,    r.node,    rParent,    originalName);    	non-compiled	[CE]  not  a  statement	108	None	replace
818	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  localNameMap,  r.localNames);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  localNameMap,  r.localNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  localNameMap,  r.localNames);	  flattenNameRef(alias,    r.node,    rParent,    localNameMap);    	non-compiled	[CE]  not  a  statement	82	None	replace
819	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  localNameMap,  r.root);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  localNameMap,  r.root);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  localNameMap,  r.root);	  flattenNameRef(alias,    r.node,    rParent,    localNameMap);    	non-compiled	[CE]  not  a  statement	82	None	replace
820	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  localNameMap,  r.refs);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  localNameMap,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  localNameMap,  r.refs);	  flattenNameRef(alias,    r.node,    rParent,    localNameMap);    	non-compiled	[CE]  not  a  statement	82	None	replace
821	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  localNameMap,  rParent);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  localNameMap,  rParent);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  localNameMap,  rParent);	  flattenNameRef(alias,    r.node,    rParent,    localNameMap);    	non-compiled	[CE]  not  a  statement	82	None	replace
822	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  localNameMap,  r.type);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  localNameMap,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  localNameMap,  r.type);	  flattenNameRef(alias,    r.node,    rParent,    localNameMap);    	non-compiled	[CE]  not  a  statement	82	None	replace
823	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  n,  globalNames);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  n,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  n,  globalNames);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	105	None	replace
824	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  originalName,  rParent,  globalNames);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  originalName,  rParent,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  refs,  originalName,  rParent,  globalNames);	  FlattenNameRef(alias,    r.node,    originalName,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	105	None	replace
825	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.name,  r.node,  UNKNOWN_EXPR_TYPE);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.name,  r.node,  UNKNOWN_EXPR_TYPE);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.name,  r.node,  UNKNOWN_EXPR_TYPE);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
826	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  r.type);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.name,  r.type);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
827	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  r.exp);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  r.exp);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.name,  r.exp);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
828	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  r.refs);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  r.name,  r.refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  r.name,  r.refs);	  flattenNameRef(alias,    r.node,    UNKNOWN_EXPR_TYPE,    r.name);    	non-compiled	[CE]  not  a  statement	99	None	replace
829	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent,  originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  rParent,  originalName);	  flattenNameRef(alias,    r.node,    UNSAFE_NAMESPACE_WARNING,    rParent);    	non-compiled	[CE]  not  a  statement	69	None	replace
830	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  originalName);	  flattenObjectRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	59	None	replace
831	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  UNKNOWN_SIGNATURES,  -1);	  flattenObjectRef(alias,    r.node,    rParent,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  not  a  statement	59	None	replace
832	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node.getName());  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node.getName());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node.getName());	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
833	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()!=  Token.THIS);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()!=  Token.THIS);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()!=  Token.THIS);	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
834	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.name);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.name);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.name);	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
835	[BUG]  [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node.getFirstChild());  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node.getFirstChild());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkArgument(r.node.getType()  ==  Token.THIS,  r.node.getFirstChild());	  Preconditions.checkArgument(r.node.getType()    ==    Token.THIS);    	non-compiled	[CE]  not  a  statement	114	None	replace
836	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  UNSAFE_NAMESPACE_WARNING,  r.getTwin());	  flattenObjectRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING);    	non-compiled	[CE]  not  a  statement	56	None	replace
837	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.node,  globalNames);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  originalName,  r.node,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  originalName,  r.node,  globalNames);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	41	None	replace
838	[BUG]  [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  globalNames);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  r.node,  refs,  globalNames);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  r.node,  refs,  globalNames);	  FlattenNameRef(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	41	None	replace
839	[BUG]  [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  refs);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  refs);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenObjectRef(alias,  r.node,  rParent,  refs);	  flattenObjectRef(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	55	None	replace
840	[BUG]  [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  globalNames,  originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenObjectRef(alias,  r.node,  rParent,  globalNames,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenObjectRef(alias,  r.node,  rParent,  globalNames,  originalName);	  flattenObjectRef(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	55	None	replace
841	[BUG]  [BUGGY]  FlattenRef(alias,  r.node,  rParent,  globalNames,  originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenRef(alias,  r.node,  rParent,  globalNames,  originalName);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenRef(alias,  r.node,  rParent,  globalNames,  originalName);	  flattenObjectRef(alias,    r.node,    rParent,    globalNames);    	non-compiled	[CE]  not  a  statement	55	None	replace
842	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isVarDeclaration(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isVarDeclaration(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent))  {  flattenPrefixes(alias,  r,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r,    	non-compiled	[CE]  not  a  statement	32	None	replace
843	[BUG]  [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(n,  rParent))  {  flattenPrefixes(alias,  r,  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(n,  rParent))  {  flattenPrefixes(alias,  r,  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	NodeUtil.isObjectLitKey(n,  r.node)&&!NodeUtil.isObjectLitKey(n,  rParent))  {  flattenPrefixes(alias,  r,	  NodeUtil.isObjectLitKey(r.node,    rParent)&&!NodeUtil.isObjectLitKey(r.node,    rParent))    {    flattenPrefixes(alias,    r,    	non-compiled	[CE]  not  a  statement	32	None	replace
844	[BUG]  [BUGGY]  FlattenNameRef(alias,  n.node,  rParent,  1);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  FlattenNameRef(alias,  n.node,  rParent,  1);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	FlattenNameRef(alias,  n.node,  rParent,  1);	  FlattenNameRef(alias,    r.node,    rParent,    1);    	non-compiled	[CE]  not  a  statement	17	None	replace
845	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.type);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.type);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.type);	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	16	None	replace
846	[BUG]  [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.isSet());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.isSet());  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenRef(alias,  r.node,  rParent,  UNSAFE_NAMESPACE_WARNING,  r.isSet());	  flattenRef(alias,    r.node,    rParent,    NAMESPACE_REDEFINED_WARNING,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	16	None	replace
847	[BUG]  [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||  r.node.getName().equals(r.node.getString()));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||  r.node.getName().equals(r.node.getString()));  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	Preconditions.checkState(r.node.getType()  ==  Token.FUNCTION  ||  r.node.getName().equals(r.node.getString()));	  Preconditions.checkState(r.node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	87	None	replace
848	[BUG]  [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  baseUri);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenObjectRef(alias,  r.node,  rParent,  baseUri);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenObjectRef(alias,  r.node,  rParent,  baseUri);	  flattenObjectRef(alias,    r.node,    rParent,    nameMap);    	non-compiled	[CE]  not  a  statement	57	None	replace
849	[BUG]  [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  n);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {      [BUGGY]  flattenNameRef(alias,  r.node,  rParent,  originalName,  n);  [BUGGY]      }  }  }    if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  flattenPrefixes(alias,  p,  1);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2519763153394848	329	329	8	replace	flattenNameRef(alias,  r.node,  rParent,  originalName,  n);	  flattenNameRef(alias,    r.node,    rParent,    originalName,    null);    	non-compiled	[CE]  not  a  statement	40	None	replace
