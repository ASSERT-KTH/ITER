bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  numStubs  =  nameMap.size();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  nameMap.size();  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameMap.size();	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  int  numStubs  =  parent.numStubs;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  parent.numStubs;  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.numStubs;	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  int  numStubs  =  addAfter.length();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  addAfter.length();  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  addAfter.length();	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  int  numStubs  =  parent.numStubs();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  parent.numStubs();  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.numStubs();	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  int  numStubs  =  addAfter.size();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  addAfter.size();  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  addAfter.size();	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  int  numStubs++;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs++;  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs++;	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]    [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	  	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  int  numStubs  =  nameNode.size();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  nameNode.size();  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.size();	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndex();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndex();  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndex();	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndex();  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndex();	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().size();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().size();  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().size();	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
12	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf('.');  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf('.');  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndexOf('.');	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ");  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ");  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ");	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
14	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf( "numStubs ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf( "numStubs ");  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndexOf( "numStubs ");	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
15	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.');  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.');  [BUGGY]  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf('.');	numStubs++;  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
