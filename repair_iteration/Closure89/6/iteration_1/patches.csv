bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  numStubs  =  parent.length();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.length();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.length();	  int    numStubs    =    addAfter.length();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  int  numStubs  =  nameNode.length();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.length();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.length();	  int    numStubs    =    addAfter.length();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  int  numStubs  =  addAfter.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  addAfter.length()  -  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  addAfter.length()  -  1;	  int    numStubs    =    addAfter.length();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  int  numStubs  =  parent.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.size();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.size();	  int    numStubs    =    addAfter.length();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  int  numStubs  =  nameMap.length();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameMap.length();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameMap.length();	  int    numStubs    =    addAfter.length();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  int  numStubs  =  addAfter.length()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  addAfter.length()  +  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  addAfter.length()  +  1;	  int    numStubs    =    addAfter.length();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  int  numStubs  =  n.numStubs;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  n.numStubs;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  n.numStubs;	  int    numStubs    =    parent.numStubs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  int  numStubs  =  parent.numStubs  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.numStubs  -  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.numStubs  -  1;	  int    numStubs    =    parent.numStubs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  int  numStubs  =  nameNode.numStubs;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.numStubs;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.numStubs;	  int    numStubs    =    parent.numStubs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  int  numStubs  =  addAfter.numStubs;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  addAfter.numStubs;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  addAfter.numStubs;	  int    numStubs    =    parent.numStubs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  int  numStubs  =  parent.numStubs  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.numStubs  +  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.numStubs  +  1;	  int    numStubs    =    parent.numStubs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  int  numStubs  =  parent.numStubs  -  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.numStubs  -  2;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.numStubs  -  2;	  int    numStubs    =    parent.numStubs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  int  numStubs  =  node.numStubs;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  node.numStubs;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  node.numStubs;	  int    numStubs    =    parent.numStubs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
14	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf(propAlias);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf(propAlias);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndexOf(propAlias);	  int    numStubs    =    nameNode.getLastChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  int  numStubs  =  parent.getLastChild().getIndexOf( "numStubs ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.getLastChild().getIndexOf( "numStubs ");  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.getLastChild().getIndexOf( "numStubs ");	  int    numStubs    =    nameNode.getLastChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  int  numStubs  =  parent.getFirstChild().getIndexOf( "numStubs ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.getFirstChild().getIndexOf( "numStubs ");  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.getFirstChild().getIndexOf( "numStubs ");	  int    numStubs    =    nameNode.getLastChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
17	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf(propAlias);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf(propAlias);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf(propAlias);	  int    numStubs    =    nameNode.getLastChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf( "addAfter ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf( "addAfter ");  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndexOf( "addAfter ");	  int    numStubs    =    nameNode.getLastChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
19	[BUG]  [BUGGY]  int  numStubs  =  0;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  0;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  0;	  int    numStubs++;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  int  numStubs  =  names.size();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  names.size();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  names.size();	  int    numStubs    =    addAfter.size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
21	[BUG]  [BUGGY]  int  numStubs  =  addAfter.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  addAfter.size()  -  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  addAfter.size()  -  1;	  int    numStubs    =    addAfter.size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
22	[BUG]  [BUGGY]  int  numStubs  =  newVar.size();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  newVar.size();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  newVar.size();	  int    numStubs    =    addAfter.size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
23	[BUG]  [BUGGY]  int  numStubs  =  nameMap.size()  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameMap.size()  -  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameMap.size()  -  1;	  int    numStubs    =    nameMap.size();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
24	[BUG]  [BUGGY]  int  numStubs  =  nameMap.size()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameMap.size()  +  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameMap.size()  +  1;	  int    numStubs    =    nameMap.size();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  int  numStubs  =  nameMap.size()  -  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameMap.size()  -  2;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameMap.size()  -  2;	  int    numStubs    =    nameMap.size();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  addAfter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  NodeUtil.removeChild(parent,  addAfter);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	NodeUtil.removeChild(parent,  addAfter);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  addAfter);  parent.addChildAfter(newVar,  addAfter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  NodeUtil.removeChild(parent,  addAfter);  parent.addChildAfter(newVar,  addAfter);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	NodeUtil.removeChild(parent,  addAfter);  parent.addChildAfter(newVar,  addAfter);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  newVar,  addAfter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  newVar,  addAfter);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	NodeTraversal.traverse(compiler,  nameNode,  newVar,  addAfter);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  parent.replaceChild(n,  addAfter);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  parent.replaceChild(n,  addAfter);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	parent.replaceChild(n,  addAfter);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  addAfter);  parent.addChildToFront(newVar);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  NodeUtil.removeChild(parent,  addAfter);  parent.addChildToFront(newVar);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	NodeUtil.removeChild(parent,  addAfter);  parent.addChildToFront(newVar);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  parent.replaceChild(n,  newVar);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  parent.replaceChild(n,  newVar);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	parent.replaceChild(n,  newVar);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  Node  p  =  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  Node  p  =  parent.getParent();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	Node  p  =  parent.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOfSupported( "numStubs ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOfSupported( "numStubs ");  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOfSupported( "numStubs ");	  int    numStubs    =    nameNode.getFirstChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
34	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "addAfter ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "addAfter ");  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf( "addAfter ");	  int    numStubs    =    nameNode.getFirstChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
35	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  addAfter);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  addAfter);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  addAfter);	  int    numStubs    =    nameNode.getLastChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
36	[BUG]  [BUGGY]  int  numStubs  =  parent.getLastChild().getIndexOf('.');  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.getLastChild().getIndexOf('.');  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.getLastChild().getIndexOf('.');	  int    numStubs    =    nameNode.getLastChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
37	[BUG]  [BUGGY]  int  numStubs  =  parent.getFirstChild().getIndexOf('.');  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.getFirstChild().getIndexOf('.');  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.getFirstChild().getIndexOf('.');	  int    numStubs    =    nameNode.getLastChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  parent);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  parent);	  int    numStubs    =    nameNode.getLastChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  int  numStubs  =  nameNode.size()  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.size()  -  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.size()  -  1;	  int    numStubs    =    nameNode.size();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  int  numStubs  =  nameNode.size()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.size()  +  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.size()  +  1;	  int    numStubs    =    nameNode.size();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  int  numStubs  =  nameNode.size()  -  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.size()  -  2;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.size()  -  2;	  int    numStubs    =    nameNode.size();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  int  numStubs  =  parent.getLastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.getLastChild().getIndex();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.getLastChild().getIndex();	  int    numStubs    =    nameNode.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
43	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndex()  -  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndex()  -  1;	  int    numStubs    =    nameNode.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
44	[BUG]  [BUGGY]  int  numStubs  =  parent.getFirstChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.getFirstChild().getIndex();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.getFirstChild().getIndex();	  int    numStubs    =    nameNode.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
45	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndex()  +  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndex()  +  1;	  int    numStubs    =    nameNode.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().size();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getLastChild().size();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().size();	  int    numStubs    =    nameNode.getFirstChild().size();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
47	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().size()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().size()  -  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().size()  -  1;	  int    numStubs    =    nameNode.getFirstChild().size();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
48	[BUG]  [BUGGY]  int  numStubs  =  parent.getFirstChild().size();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.getFirstChild().size();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.getFirstChild().size();	  int    numStubs    =    nameNode.getFirstChild().size();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().size()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().size()  +  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().size()  +  1;	  int    numStubs    =    nameNode.getFirstChild().size();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().size()  -  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().size()  -  2;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().size()  -  2;	  int    numStubs    =    nameNode.getFirstChild().size();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
51	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndex()  -  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndex()  -  1;	  int    numStubs    =    nameNode.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndex()  +  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndex()  +  1;	  int    numStubs    =    nameNode.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndex()  *  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndex()  *  2;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndex()  *  2;	  int    numStubs    =    nameNode.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  addAfter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  addAfter);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  addAfter);	  int    numStubs    =    nameNode.getFirstChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
55	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  parent);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  parent);	  int    numStubs    =    nameNode.getFirstChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOfSupported('.');  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOfSupported('.');  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOfSupported('.');	  int    numStubs    =    nameNode.getFirstChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
57	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  1);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  1);	  int    numStubs    =    nameNode.getFirstChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
58	[BUG]  [BUGGY]  int  numStubs  =  nameNode.numStubs();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.numStubs();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.numStubs();	  int    numStubs    =    parent.numStubs();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  int  numStubs  =  addAfter.numStubs();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  addAfter.numStubs();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  addAfter.numStubs();	  int    numStubs    =    parent.numStubs();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  int  numStubs  =  parent.numStubs()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.numStubs()  -  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.numStubs()  -  1;	  int    numStubs    =    parent.numStubs();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
61	[BUG]  [BUGGY]  int  numStubs  =  n.numStubs();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  n.numStubs();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  n.numStubs();	  int    numStubs    =    parent.numStubs();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
62	[BUG]  [BUGGY]  int  numStubs  =  parent.numStubs()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.numStubs()  +  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.numStubs()  +  1;	  int    numStubs    =    parent.numStubs();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
63	[BUG]  [BUGGY]  int  numStubs  =  newVar.numStubs();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  newVar.numStubs();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  newVar.numStubs();	  int    numStubs    =    parent.numStubs();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
64	[BUG]  [BUGGY]  int  numStubs  =  parent.numStubs()  -  2;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.numStubs()  -  2;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.numStubs()  -  2;	  int    numStubs    =    parent.numStubs();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  int  numStubs  =  name.length();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  name.length();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  name.length();	  int    numStubs    =    addAfter.length();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
66	[BUG]  [BUGGY]  int  numStubs  =  names.length();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  names.length();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  names.length();	  int    numStubs    =    addAfter.length();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
67	[BUG]  [BUGGY]  int  numStubs  =  newVar.length();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  newVar.length();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  newVar.length();	  int    numStubs    =    addAfter.length();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
68	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  0);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  0);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  0);	  int    numStubs    =    nameNode.getLastChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
69	[BUG]  [BUGGY]  int  numStubs  =  names.getLastChild().getIndexOf('.');  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  names.getLastChild().getIndexOf('.');  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  names.getLastChild().getIndexOf('.');	  int    numStubs    =    nameNode.getLastChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
70	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getCount();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getCount();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getCount();	  int    numStubs++;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
71	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  newVar,  globalNames);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  newVar,  globalNames);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	NodeTraversal.traverse(compiler,  nameNode,  newVar,  globalNames);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
73	[BUG]  [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  false);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  newVar,  numStubs);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  newVar,  numStubs);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	NodeTraversal.traverse(compiler,  nameNode,  newVar,  numStubs);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newVar,  numStubs);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newVar,  numStubs);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	NodeTraversal.traverse(compiler,  parent,  newVar,  numStubs);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
76	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndex(parent);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndex(parent);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndex(parent);	  int    numStubs    =    nameNode.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
77	[BUG]  [BUGGY]  int  numStubs  =  nameMap.size()  /  2;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameMap.size()  /  2;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameMap.size()  /  2;	  int    numStubs    =    nameMap.size();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
78	[BUG]  [BUGGY]  int  numStubs  =  name.size();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  name.size();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  name.size();	  int    numStubs    =    addAfter.size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
79	[BUG]  [BUGGY]  int  numStubs  =  nameNodes.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNodes.size();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNodes.size();	  int    numStubs    =    addAfter.size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
80	[BUG]  [BUGGY]  int  numStubs  =  this.addAfter.size();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  this.addAfter.size();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  this.addAfter.size();	  int    numStubs    =    addAfter.size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
81	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  0);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  0);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  0);	  int    numStubs    =    nameNode.getFirstChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
82	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  1);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  1);	  int    numStubs    =    nameNode.getFirstChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
83	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf( "numStubs ",  0);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf( "numStubs ",  0);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndexOf( "numStubs ",  0);	  int    numStubs    =    nameNode.getLastChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
84	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( ".numStubs ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( ".numStubs ");  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf( ".numStubs ");	  int    numStubs    =    nameNode.getLastChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
85	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  0);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  0);	  int    numStubs    =    nameNode.getFirstChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
86	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  -1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  -1);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf('.',  -1);	  int    numStubs    =    nameNode.getFirstChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
87	[BUG]  [BUGGY]  int  numStubs  =  n.parent.numStubs();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  n.parent.numStubs();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  n.parent.numStubs();	  int    numStubs    =    parent.numStubs();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
88	[BUG]  [BUGGY]  int  numStubs  =  n.getStubs();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  n.getStubs();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  n.getStubs();	  int    numStubs    =    parent.numStubs();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
89	[BUG]  [BUGGY]  int  numStubs  =  nameNode.lastIndexOf('.');  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.lastIndexOf('.');  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.lastIndexOf('.');	  int    numStubs    =    nameNode.size();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
90	[BUG]  [BUGGY]  int  numStubs  =  propAlias.length();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  propAlias.length();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  propAlias.length();	  int    numStubs    =    addAfter.length();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
91	[BUG]  [BUGGY]  int  numStubs  =  propAlias.numStubs;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  propAlias.numStubs;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  propAlias.numStubs;	  int    numStubs    =    parent.numStubs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
92	[BUG]  [BUGGY]  int  numStubs  =  p.numStubs;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  p.numStubs;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  p.numStubs;	  int    numStubs    =    parent.numStubs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
93	[BUG]  [BUGGY]  int  numStubs  =  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  1;  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  1;	  int    numStubs++;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
94	[BUG]  [BUGGY]  int  numStubs  =  parent.numChildren();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  parent.numChildren();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  parent.numChildren();	  int    numStubs++;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
95	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  -1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  -1);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getLastChild().getIndexOf('.',  -1);	  int    numStubs    =    nameNode.getLastChild().getIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
96	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( ".Stubs ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( ".Stubs ");  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf( ".Stubs ");	  int    numStubs    =    nameNode.getLastChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
97	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  numStubs);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  numStubs);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  numStubs);	  int    numStubs    =    nameNode.getLastChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
98	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getColumnIndex();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getColumnIndex();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getColumnIndex();	  int    numStubs    =    nameNode.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
99	[BUG]  [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  -1);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  -1);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  nameNode.getFirstChild().getIndexOf( "numStubs ",  -1);	  int    numStubs    =    nameNode.getFirstChild().getIndexOf(   "numStubs   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
100	[BUG]  [BUGGY]  int  numStubs  =  n.size();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  int  numStubs  =  n.size();  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	int  numStubs  =  n.size();	  int    numStubs    =    addAfter.size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
101	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  p);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  NodeUtil.removeChild(parent,  p);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	NodeUtil.removeChild(parent,  p);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
102	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  p.name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  NodeUtil.removeChild(parent,  p.name);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	NodeUtil.removeChild(parent,  p.name);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
103	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(nameNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);  Node  newVar  =  new  Node(Token.VAR,  nameNode)  .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;    [BUGGY]  NodeUtil.copyNameAnnotations(nameNode);  [BUGGY]    compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,  true);  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	829	829	8	replace	NodeUtil.copyNameAnnotations(nameNode);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
