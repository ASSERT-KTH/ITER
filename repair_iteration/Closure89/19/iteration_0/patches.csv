bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.names)  {  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  [BUGGY]  for(Ref  r  :  n.refs.names)  {  [BUGGY]  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.names)  {	for  (Ref  r  :  n.refs)  {  	non-compiled	[CE]  not  a  statement	38	None	replace
2	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.names())  {  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  [BUGGY]  for(Ref  r  :  n.refs.names())  {  [BUGGY]  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.names())  {	for  (Ref  r  :  n.refs)  {  	non-compiled	[CE]  not  a  statement	38	None	replace
3	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.globalNames)  {  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  [BUGGY]  for(Ref  r  :  n.refs.globalNames)  {  [BUGGY]  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.globalNames)  {	for  (Ref  r  :  n.refs)  {  	non-compiled	[CE]  not  a  statement	38	None	replace
4	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getName())  {  [CE]  not  a  statement  [FE]          AssertionFailedError  [CONTEXT]  private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  [BUGGY]  for(Ref  r  :  n.refs.getName())  {  [BUGGY]  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getName())  {	for  (Ref  r  :  n.refs)  {  	non-compiled	[CE]  not  a  statement	38	None	replace
5	[BUG]  [BUGGY]    [CE]  not  a  statement  [FE]            AssertionFailedError  [CONTEXT]  private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  [BUGGY]    [BUGGY]  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	  	for  (Ref  r  :  n.refs)  {  	non-compiled	[CE]  not  a  statement	38	None	replace
6	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.keySet())  {  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  [BUGGY]  for(Ref  r  :  n.refs.keySet())  {  [BUGGY]  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.keySet())  {	for  (Ref  r  :  n.refs)  {  	non-compiled	[CE]  not  a  statement	38	None	replace
7	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.values())  {  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  [BUGGY]  for(Ref  r  :  n.refs.values())  {  [BUGGY]  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.values())  {	for  (Ref  r  :  n.refs)  {  	non-compiled	[CE]  not  a  statement	38	None	replace
8	[BUG]  [BUGGY]  for  (Ref  r  :  n.refs.get(originalName))  {  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  [BUGGY]  for  (Ref  r  :  n.refs.get(originalName))  {  [BUGGY]  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (Ref  r  :  n.refs.get(originalName))  {	for  (Ref  r  :  n.refs)  {  	non-compiled	[CE]  not  a  statement	38	None	replace
9	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.entities())  {  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  [BUGGY]  for(Ref  r  :  n.refs.entities())  {  [BUGGY]  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.entities())  {	for  (Ref  r  :  n.refs)  {  	non-compiled	[CE]  not  a  statement	38	None	replace
10	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.asList())  {  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  [BUGGY]  for(Ref  r  :  n.refs.asList())  {  [BUGGY]  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.asList())  {	for  (Ref  r  :  n.refs)  {  	non-compiled	[CE]  not  a  statement	38	None	replace
