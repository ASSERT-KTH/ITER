bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  r  =  n.refs.get(originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  Node  r  =  n.refs.get(originalName);  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.get(originalName);	      	non-compiled	[CE]  not  a  statement	5	None	replace
2	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(originalName);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  Node  rParent  =  n.refs.get(originalName);  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(originalName);	      	non-compiled	[CE]  not  a  statement	5	None	replace
3	[BUG]  [BUGGY]  Name  r  =  n.refs.get(originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  Name  r  =  n.refs.get(originalName);  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  r  =  n.refs.get(originalName);	      	non-compiled	[CE]  not  a  statement	5	None	replace
4	[BUG]  [BUGGY]  Node  r  =  n.refs.get(0);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  Node  r  =  n.refs.get(0);  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.get(0);	      	non-compiled	[CE]  not  a  statement	5	None	replace
5	[BUG]  [BUGGY]  Node  r  =  n.refs.getFirstChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  Node  r  =  n.refs.getFirstChild();  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getFirstChild();	      	non-compiled	[CE]  not  a  statement	5	None	replace
6	[BUG]  [BUGGY]  Ref  r  =  refs.get(originalName);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  Ref  r  =  refs.get(originalName);  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Ref  r  =  refs.get(originalName);	      	non-compiled	[CE]  not  a  statement	5	None	replace
7	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(0);  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  Node  rParent  =  n.refs.get(0);  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(0);	      	non-compiled	[CE]  not  a  statement	5	None	replace
8	[BUG]  [BUGGY]  for(Ref  r  :  n.names)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.names)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.names)  {	  for(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
9	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.names,  originalName)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.names,  originalName)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.names,  originalName)  {	  for(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
10	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.names)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  For(Ref  r  :  n.refs.names)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.names)  {	  for(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
11	[BUG]  [BUGGY]  for(Ref  r  :  refs.names)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  refs.names)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.names)  {	  for(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
12	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getNames())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.getNames())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getNames())  {	  for(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
13	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.globalNames,  originalName)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.globalNames,  originalName)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.globalNames,  originalName)  {	  for(Ref    r    :    n.refs.globalNames)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
14	[BUG]  [BUGGY]  for(Ref  r  :  n.globalNames)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.globalNames)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.globalNames)  {	  for(Ref    r    :    n.refs.globalNames)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
15	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getGlobalNames())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.getGlobalNames())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getGlobalNames())  {	  for(Ref    r    :    n.refs.globalNames)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
16	[BUG]  [BUGGY]  for(Ref  r  :  n.globalNames,  originalName)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.globalNames,  originalName)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.globalNames,  originalName)  {	  for(Ref    r    :    n.refs.globalNames)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
17	[BUG]  [BUGGY]  for(Ref  r  :  refs.globalNames)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  refs.globalNames)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.globalNames)  {	  for(Ref    r    :    n.refs.globalNames)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
18	[BUG]  [BUGGY]  for(Name  r  :  n.refs.names())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Name  r  :  n.refs.names())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.names())  {	  for(Ref    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
19	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.names())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  For(Ref  r  :  n.refs.names())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.names())  {	  for(Ref    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
20	[BUG]  [BUGGY]  for(Ref  r  :  refs.names())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  refs.names())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.names())  {	  for(Ref    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
21	[BUG]  [BUGGY]  for(Ref  r  :  n.names())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.names())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.names())  {	  for(Ref    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
22	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getName())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Name  r  :  n.refs.getName())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getName())  {	  for(Ref    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
23	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getLocalName())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.getLocalName())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getLocalName())  {	  for(Ref    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
24	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getName(),  originalName)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.getName(),  originalName)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getName(),  originalName)  {	  for(Ref    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
25	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getNamespaceURI())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.getNamespaceURI())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getNamespaceURI())  {	  for(Ref    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
26	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getName()  +  1)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.getName()  +  1)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getName()  +  1)  {	  for(Ref    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
27	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.iterator().next())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.iterator().next())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.iterator().next())  {	  for(Ref    r    :    n.refs.asList())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
28	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.entrySet())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.entrySet())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.entrySet())  {	  for(Ref    r    :    n.refs.asList())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
29	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.toArray())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray())  {	  for(Ref    r    :    n.refs.asList())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
30	[BUG]  [BUGGY]  for(Ref  r  :  refs.asList())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  refs.asList())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.asList())  {	  for(Ref    r    :    n.refs.asList())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
31	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getValues())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.getValues())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getValues())  {	  for(Ref    r    :    n.refs.values())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
32	[BUG]  [BUGGY]  for(Name  r  :  n.refs.values())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Name  r  :  n.refs.values())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.values())  {	  for(Ref    r    :    n.refs.values())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
33	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.clone())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.clone())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.clone())  {	  for(Ref    r    :    n.refs.entities())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
34	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.get())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.get())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.get())  {	  for(Ref    r    :    n.refs.entities())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
35	[BUG]  [BUGGY]  for  (Ref  r  :  n.refs.get(alias))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for  (Ref  r  :  n.refs.get(alias))  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (Ref  r  :  n.refs.get(alias))  {	  for    (Ref    r    :    n.refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
36	[BUG]  [BUGGY]  For  (Ref  r  :  n.refs.get(alias))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  For  (Ref  r  :  n.refs.get(alias))  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For  (Ref  r  :  n.refs.get(alias))  {	  for    (Ref    r    :    n.refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
37	[BUG]  [BUGGY]  for  (Ref  r  :  refs.get(originalName))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for  (Ref  r  :  refs.get(originalName))  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (Ref  r  :  refs.get(originalName))  {	  for    (Ref    r    :    n.refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
38	[BUG]  [BUGGY]  for  (Name  r  :  n.refs.get(originalName))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for  (Name  r  :  n.refs.get(originalName))  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (Name  r  :  n.refs.get(originalName))  {	  for    (Ref    r    :    n.refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
39	[BUG]  [BUGGY]  for(Ref  r  :  refs.keySet())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  refs.keySet())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.keySet())  {	  for(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
40	[BUG]  [BUGGY]  for(Name  r  :  n.refs.keySet())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Name  r  :  n.refs.keySet())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.keySet())  {	  for(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
41	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.keySet())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  For(Ref  r  :  n.refs.keySet())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.keySet())  {	  for(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
42	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]))  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]))  {	  for(Ref    r    :    n.refs.asList())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
43	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]))  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]))  {	  for(Ref    r    :    n.refs.asList())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
44	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.get(0))  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.get(0))  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.get(0))  {	  for(Ref    r    :    n.refs.entities())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
45	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.list())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.list())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.list())  {	  for(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
46	[BUG]  [BUGGY]  for(Ref  r  :  n.refs,  originalName)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs,  originalName)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs,  originalName)  {	  for(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
47	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.alias)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.alias)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.alias)  {	  for(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
48	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.nameMap)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.nameMap)  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.nameMap)  {	  for(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
49	[BUG]  [BUGGY]  for  (Ref  r  :  refs.get(alias))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for  (Ref  r  :  refs.get(alias))  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (Ref  r  :  refs.get(alias))  {	  for    (Ref    r    :    n.refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	8	None	replace
50	[BUG]  [BUGGY]  Name  p  =  n.refs.get(originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  Name  p  =  n.refs.get(originalName);  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  p  =  n.refs.get(originalName);	      	non-compiled	[CE]  not  a  statement	5	None	replace
51	[BUG]  [BUGGY]  Node  r  =  n.refs.getRootNode();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  Node  r  =  n.refs.getRootNode();  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getRootNode();	      	non-compiled	[CE]  not  a  statement	5	None	replace
52	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getFullName())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.getFullName())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getFullName())  {	  for(Ref    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
53	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getRawName())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.getRawName())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getRawName())  {	  for(Ref    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
54	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.elements())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.elements())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.elements())  {	  for(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
55	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {	  for(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
56	[BUG]  [BUGGY]  Node  r  =  n.getParent();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  Node  r  =  n.getParent();  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.getParent();	      	non-compiled	[CE]  not  a  statement	5	None	replace
57	[BUG]  [BUGGY]  Node  r  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  Node  r  =  n.getFirstChild();  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.getFirstChild();	      	non-compiled	[CE]  not  a  statement	5	None	replace
58	[BUG]  [BUGGY]  r.node  =  n.refs.get(originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  r.node  =  n.refs.get(originalName);  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	r.node  =  n.refs.get(originalName);	      	non-compiled	[CE]  not  a  statement	5	None	replace
59	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.properties())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.properties())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.properties())  {	  for(Ref    r    :    n.refs.values())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
60	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.globalNames())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.globalNames())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.globalNames())  {	  for(Ref    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
61	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getString())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.getString())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getString())  {	  for(Ref    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
62	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.nameMap())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();    [BUGGY]  for(Ref  r  :  n.refs.nameMap())  {  [BUGGY]    Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.nameMap())  {	  for(Ref    r    :    n.refs.globalNames)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
