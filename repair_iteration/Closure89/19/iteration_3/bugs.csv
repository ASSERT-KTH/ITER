bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(Name  r  :  n.refs.names())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Name  r  :  n.refs.names())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Name  r  :  n.refs.names())  {	  For(Ref    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
2	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.names(),  originalName)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.names(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.names(),  originalName)  {	  For(Ref    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
3	[BUG]  [BUGGY]  For(Ref  r  :  n.refs,  originalName)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs,  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs,  originalName)  {	  For(Ref    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
4	[BUG]  [BUGGY]  For(Name  r  :  n.names())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Name  r  :  n.names())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Name  r  :  n.names())  {	  For(Ref    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
5	[BUG]  [BUGGY]  for(Ref  r  :  refs.names,  originalName)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.names,  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.names,  originalName)  {	  for(Ref    r    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
6	[BUG]  [BUGGY]  for(Ref  r  :  refs.names.values())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.names.values())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.names.values())  {	  for(Ref    r    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
7	[BUG]  [BUGGY]  for(Ref  r  :  refs.names.keySet())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.names.keySet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.names.keySet())  {	  for(Ref    r    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
8	[BUG]  [BUGGY]  For(Ref  r  :  n.names)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.names)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.names)  {	  for(Ref    r    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
9	[BUG]  [BUGGY]  for(Name  r  :  n.names())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.names())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.names())  {	  for(Name    r    :    n.refs.values())    {    	non-compiled	[CE]  not  a  statement	32	None	replace
10	[BUG]  [BUGGY]  for(Name  r  :  n.refs.nameMap())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.nameMap())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.nameMap())  {	  for(Name    r    :    n.refs.values())    {    	non-compiled	[CE]  not  a  statement	32	None	replace
11	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getValues())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.getValues())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getValues())  {	  for(Name    r    :    n.refs.values())    {    	non-compiled	[CE]  not  a  statement	32	None	replace
12	[BUG]  [BUGGY]  for(Name  r  :  n.refs.name())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.name())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.name())  {	  for(Name    r    :    n.refs.values())    {    	non-compiled	[CE]  not  a  statement	32	None	replace
13	[BUG]  [BUGGY]  for(Ref  r  :  refs.values())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.values())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.values())  {	  for(Ref    r    :    refs.keySet())    {    	non-compiled	[CE]  not  a  statement	39	None	replace
14	[BUG]  [BUGGY]  for(Ref  r  :  refs.refs.keySet())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.refs.keySet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.refs.keySet())  {	  for(Ref    r    :    refs.keySet())    {    	non-compiled	[CE]  not  a  statement	39	None	replace
15	[BUG]  [BUGGY]  for(Ref  r  :  refs.entrySet())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.entrySet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.entrySet())  {	  for(Ref    r    :    refs.keySet())    {    	non-compiled	[CE]  not  a  statement	39	None	replace
16	[BUG]  [BUGGY]  for(Ref  r  :  refs.nodeSet())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.nodeSet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.nodeSet())  {	  for(Ref    r    :    refs.keySet())    {    	non-compiled	[CE]  not  a  statement	39	None	replace
17	[BUG]  [BUGGY]  for  (Name  r  :  n.refs.get(alias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for  (Name  r  :  n.refs.get(alias))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (Name  r  :  n.refs.get(alias))  {	  for    (Name    r    :    n.refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
18	[BUG]  [BUGGY]  For  (Name  r  :  n.refs.get(alias))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For  (Name  r  :  n.refs.get(alias))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For  (Name  r  :  n.refs.get(alias))  {	  for    (Name    r    :    n.refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
19	[BUG]  [BUGGY]  for  (Name  r  :  n.names.get(originalName))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for  (Name  r  :  n.names.get(originalName))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (Name  r  :  n.names.get(originalName))  {	  for    (Name    r    :    n.refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
20	[BUG]  [BUGGY]  for  (Name  r  :  refs.get(originalName))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for  (Name  r  :  refs.get(originalName))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (Name  r  :  refs.get(originalName))  {	  for    (Name    r    :    n.refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
21	[BUG]  [BUGGY]  for  (Name  r  :  refs.get(alias))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for  (Name  r  :  refs.get(alias))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (Name  r  :  refs.get(alias))  {	  for    (Name    r    :    n.refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
22	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getName(),  originalName)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.getName(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getName(),  originalName)  {	  for(Name    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	22	None	replace
23	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getNamespaceURI())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.getNamespaceURI())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getNamespaceURI())  {	  for(Name    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	22	None	replace
24	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getQualifiedName())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.getQualifiedName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getQualifiedName())  {	  for(Name    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	22	None	replace
25	[BUG]  [BUGGY]  for(Name  r  :  n.names.getName())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.names.getName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.names.getName())  {	  for(Name    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	22	None	replace
26	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getString())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.getString())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getString())  {	  for(Name    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	22	None	replace
27	[BUG]  [BUGGY]  For(Name  r  :  n.refs.getName())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Name  r  :  n.refs.getName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Name  r  :  n.refs.getName())  {	  for(Name    r    :    n.refs.getName())    {    	non-compiled	[CE]  not  a  statement	22	None	replace
28	[BUG]  [BUGGY]  for(Ref  r  :  refs.list())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.list())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.list())  {	  for(Ref    r    :    n.refs.list())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
29	[BUG]  [BUGGY]  for(Name  r  :  n.refs.list())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.list())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.list())  {	  for(Ref    r    :    n.refs.list())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
30	[BUG]  [BUGGY]  for(Ref  r  :  n.nameMap)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.nameMap)  {	  for(Ref    r    :    n.refs.nameMap)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
31	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.nameMap,  originalName)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.nameMap,  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.nameMap,  originalName)  {	  for(Ref    r    :    n.refs.nameMap)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
32	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getNameMap())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getNameMap())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getNameMap())  {	  for(Ref    r    :    n.refs.nameMap)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
33	[BUG]  [BUGGY]  for(Ref  r  :  refs.nameMap)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.nameMap)  {	  for(Ref    r    :    n.refs.nameMap)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
34	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.nameMap,  nameMap)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.nameMap,  nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.nameMap,  nameMap)  {	  for(Ref    r    :    n.refs.nameMap)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
35	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(alias);	  Node    rParent    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	2	None	replace
36	[BUG]  [BUGGY]  Node  rParent  =  refs.get(originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  refs.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  refs.get(originalName);	  Node    rParent    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	2	None	replace
37	[BUG]  [BUGGY]  Node  rParent  =  node.refs.get(originalName);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  node.refs.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  node.refs.get(originalName);	  Node    rParent    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	2	None	replace
38	[BUG]  [BUGGY]  Name  rParent  =  n.refs.get(originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  rParent  =  n.refs.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  rParent  =  n.refs.get(originalName);	  Node    rParent    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	2	None	replace
39	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(name);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(name);	  Node    rParent    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	2	None	replace
40	[BUG]  [BUGGY]  Node  r  =  n.refs.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getParent();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getParent();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	56	None	replace
41	[BUG]  [BUGGY]  Node  r  =  n.refs.getNext();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getNext();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getNext();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	56	None	replace
42	[BUG]  [BUGGY]  Node  r  =  n.getNext();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.getNext();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.getNext();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	56	None	replace
43	[BUG]  [BUGGY]  Node  r  =  n.getRawParent();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.getRawParent();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.getRawParent();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	56	None	replace
44	[BUG]  [BUGGY]  Node  r  =  n.refs.getRoot();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getRoot();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getRoot();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	56	None	replace
45	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.entrySet().next())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.entrySet().next())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.entrySet().next())  {	  for(Ref    r    :    n.refs.iterator().next())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
46	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.values().next())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.values().next())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.values().next())  {	  for(Ref    r    :    n.refs.iterator().next())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
47	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.keySet().iterator().next())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.keySet().iterator().next())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.keySet().iterator().next())  {	  for(Ref    r    :    n.refs.iterator().next())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
48	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.get(originalName).iterator().next())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.get(originalName).iterator().next())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.get(originalName).iterator().next())  {	  for(Ref    r    :    n.refs.iterator().next())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
49	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.entrySet().iterator().next())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.entrySet().iterator().next())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.entrySet().iterator().next())  {	  for(Ref    r    :    n.refs.iterator().next())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
50	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.keySet().next())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.keySet().next())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.keySet().next())  {	  for(Ref    r    :    n.refs.iterator().next())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
51	[BUG]  [BUGGY]  for(Ref  r  :  refs.node.globalNames)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.node.globalNames)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.node.globalNames)  {	  for(Ref    r    :    refs.globalNames)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
52	[BUG]  [BUGGY]  for(Ref  r  :  refs.globalNames,  originalName)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.globalNames,  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.globalNames,  originalName)  {	  for(Ref    r    :    refs.globalNames)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
53	[BUG]  [BUGGY]  For(Ref  r  :  n.globalNames)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.globalNames)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.globalNames)  {	  for(Ref    r    :    refs.globalNames)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
54	[BUG]  [BUGGY]  for(Ref  r  :  n.globalNames,  alias)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.globalNames,  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.globalNames,  alias)  {	  for(Ref    r    :    n.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	16	None	replace
55	[BUG]  [BUGGY]  for(Ref  r  :  n.globalNames,  nameMap)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.globalNames,  nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.globalNames,  nameMap)  {	  for(Ref    r    :    n.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	16	None	replace
56	[BUG]  [BUGGY]  for(Name  r  :  n.globalNames,  originalName)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.globalNames,  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.globalNames,  originalName)  {	  for(Ref    r    :    n.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	16	None	replace
57	[BUG]  [BUGGY]  for(Ref  r  :  n.globalNames,  true)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.globalNames,  true)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.globalNames,  true)  {	  for(Ref    r    :    n.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	16	None	replace
58	[BUG]  [BUGGY]  for(Ref  r  :  refs.toArray(new  Ref[refs.size()  ]))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.toArray(new  Ref[refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.toArray(new  Ref[refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    Ref[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
59	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  originalName)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  originalName)  {	  for(Ref    r    :    n.refs.toArray(new    Ref[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
60	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  -  1]))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  -  1]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  -  1]))  {	  for(Ref    r    :    n.refs.toArray(new    Ref[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
61	[BUG]  [BUGGY]  for(Ref  r  :  refs.toArray(new  Ref[n.refs.size()  ]))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.toArray(new  Ref[n.refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.toArray(new  Ref[n.refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    Ref[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
62	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  alias)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  alias)  {	  for(Ref    r    :    n.refs.toArray(new    Ref[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
63	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    Ref[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
64	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.names,  originalName)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.names,  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.names,  originalName)  {	  For(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
65	[BUG]  [BUGGY]  For(Name  r  :  n.names)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Name  r  :  n.names)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Name  r  :  n.names)  {	  For(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
66	[BUG]  [BUGGY]  For(Ref  r  :  n.names,  originalName)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.names,  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.names,  originalName)  {	  For(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
67	[BUG]  [BUGGY]  For(Name  r  :  n.refs.names)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Name  r  :  n.refs.names)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Name  r  :  n.refs.names)  {	  For(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
68	[BUG]  [BUGGY]  For(Ref  r  :  n.refs)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs)  {	  For(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
69	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.get(alias);	  Node    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	1	None	replace
70	[BUG]  [BUGGY]  Node  r  =  refs.get(originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  refs.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  refs.get(originalName);	  Node    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	1	None	replace
71	[BUG]  [BUGGY]  Node  r  =  node.refs.get(originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  node.refs.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  node.refs.get(originalName);	  Node    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	1	None	replace
72	[BUG]  [BUGGY]  Node  r  =  n.refs.getValue(alias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getValue(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getValue(alias);	  Node    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	1	None	replace
73	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias,  originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.get(alias,  originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.get(alias,  originalName);	  Node    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	1	None	replace
74	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getNamespaceURI(),  originalName)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getNamespaceURI(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getNamespaceURI(),  originalName)  {	  for(Ref    r    :    n.refs.getNamespaceURI())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
75	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.names,  alias)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.names,  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.names,  alias)  {	  for(Ref    r    :    n.refs.names,    originalName)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
76	[BUG]  [BUGGY]  for(Ref  r  :  n.names,  originalName)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.names,  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.names,  originalName)  {	  for(Ref    r    :    n.refs.names,    originalName)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
77	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.names,  originalName,  alias)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.names,  originalName,  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.names,  originalName,  alias)  {	  for(Ref    r    :    n.refs.names,    originalName)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
78	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.names,  originalName,  nameMap)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.names,  originalName,  nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.names,  originalName,  nameMap)  {	  for(Ref    r    :    n.refs.names,    originalName)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
79	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.names,  originalName,  false)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.names,  originalName,  false)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.names,  originalName,  false)  {	  for(Ref    r    :    n.refs.names,    originalName)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
80	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.names,  nameMap)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.names,  nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.names,  nameMap)  {	  for(Ref    r    :    n.refs.names,    originalName)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
81	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getRawName())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.getRawName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getRawName())  {	  for(Ref    r    :    n.refs.getRawName())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
82	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getRawName(),  originalName)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getRawName(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getRawName(),  originalName)  {	  for(Ref    r    :    n.refs.getRawName())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
83	[BUG]  [BUGGY]  For(Name  r  :  n.refs.keySet())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Name  r  :  n.refs.keySet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Name  r  :  n.refs.keySet())  {	  for(Name    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
84	[BUG]  [BUGGY]  for(Name  r  :  n.refs.entrySet())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.entrySet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.entrySet())  {	  for(Name    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
85	[BUG]  [BUGGY]  for(Name  r  :  n.names.keySet())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.names.keySet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.names.keySet())  {	  for(Name    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
86	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  null  :  n.refs.getRootNode();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs!=  null?  null  :  n.refs.getRootNode();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs!=  null?  null  :  n.refs.getRootNode();	  Node    r    =    n.refs.getRootNode();    	non-compiled	[CE]  not  a  statement	51	None	replace
87	[BUG]  [BUGGY]  Node  r  =  n.refs.getRawNode();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getRawNode();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getRawNode();	  Node    r    =    n.refs.getRootNode();    	non-compiled	[CE]  not  a  statement	51	None	replace
88	[BUG]  [BUGGY]  Node  r  =  n.refs.getRootNode(originalName);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getRootNode(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getRootNode(originalName);	  Node    r    =    n.refs.getRootNode();    	non-compiled	[CE]  not  a  statement	51	None	replace
89	[BUG]  [BUGGY]  Node  r  =  n.refs.getRootName();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getRootName();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getRootName();	  Node    r    =    n.refs.getRootNode();    	non-compiled	[CE]  not  a  statement	51	None	replace
90	[BUG]  [BUGGY]  Node  r  =  n.refs.getNameNode();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getNameNode();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getNameNode();	  Node    r    =    n.refs.getRootNode();    	non-compiled	[CE]  not  a  statement	51	None	replace
91	[BUG]  [BUGGY]  for(Ref  r  :  refs.refs.names())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.refs.names())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.refs.names())  {	  for(Ref    r    :    refs.names())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
92	[BUG]  [BUGGY]  for(Ref  r  :  refs.node.names())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.node.names())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.node.names())  {	  for(Ref    r    :    refs.names())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
93	[BUG]  [BUGGY]  for(Ref  r  :  refs.getNames())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.getNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.getNames())  {	  for(Ref    r    :    refs.names())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
94	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getName(),  alias)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getName(),  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getName(),  alias)  {	  for(Ref    r    :    n.refs.getName(),    originalName)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
95	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.getName(),  alias)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.getName(),  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.getName(),  alias)  {	  for(Ref    r    :    n.refs.getName(),    originalName)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
96	[BUG]  [BUGGY]  For(Name  r  :  n.refs.getName(),  originalName)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Name  r  :  n.refs.getName(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Name  r  :  n.refs.getName(),  originalName)  {	  for(Ref    r    :    n.refs.getName(),    originalName)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
97	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getName(),  originalName,  alias)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getName(),  originalName,  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getName(),  originalName,  alias)  {	  for(Ref    r    :    n.refs.getName(),    originalName)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
98	[BUG]  [BUGGY]  for(Ref  r  :  n.properties())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.properties())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.properties())  {	  for(Ref    r    :    n.refs.properties())    {    	non-compiled	[CE]  not  a  statement	59	None	replace
99	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.propertyNames())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.propertyNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.propertyNames())  {	  for(Ref    r    :    n.refs.properties())    {    	non-compiled	[CE]  not  a  statement	59	None	replace
100	[BUG]  [BUGGY]  for(Ref  r  :  refs.properties())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.properties())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.properties())  {	  for(Ref    r    :    n.refs.properties())    {    	non-compiled	[CE]  not  a  statement	59	None	replace
101	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.properties())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.properties())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.properties())  {	  for(Ref    r    :    n.refs.properties())    {    	non-compiled	[CE]  not  a  statement	59	None	replace
102	[BUG]  [BUGGY]  for(Name  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    Name[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
103	[BUG]  [BUGGY]  for(Ref  r  :  refs.toArray(new  Name[refs.size()  ]))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.toArray(new  Name[refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.toArray(new  Name[refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    Name[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
104	[BUG]  [BUGGY]  for(Ref  r  :  refs.toArray(new  Name[n.refs.size()  ]))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.toArray(new  Name[n.refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.toArray(new  Name[n.refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    Name[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
105	[BUG]  [BUGGY]  for(Name  r  :  refs.toArray(new  Name[refs.size()  ]))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  refs.toArray(new  Name[refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  refs.toArray(new  Name[refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    Name[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
106	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ]),  originalName)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ]),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ]),  originalName)  {	  for(Ref    r    :    n.refs.toArray(new    Name[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
107	[BUG]  [BUGGY]  For(Name  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Name  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Name  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    Name[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
108	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.get(),  originalName)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.get(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.get(),  originalName)  {	  for(Ref    r    :    n.refs.get())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
109	[BUG]  [BUGGY]  for(Name  r  :  n.refs.get())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.get())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.get())  {	  for(Ref    r    :    n.refs.get())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
110	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.get())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.get())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.get())  {	  for(Ref    r    :    n.refs.get())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
111	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.get(),  alias)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.get(),  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.get(),  alias)  {	  for(Ref    r    :    n.refs.get())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
112	[BUG]  [BUGGY]  for(Name  r  :  n.names)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.names)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.names)  {	  for(Ref    r    :    n.names)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
113	[BUG]  [BUGGY]  Node  r  =  n.refs.getLastChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getLastChild();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getLastChild();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
114	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs.getLastChild();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs.getLastChild();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs.getLastChild();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
115	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs.getLastChild();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs.getLastChild();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs.getLastChild();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
116	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs.getFirstChild();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs.getFirstChild();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs.getFirstChild();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
117	[BUG]  [BUGGY]  Node  r  =  n.refs.getQualifiedName();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getQualifiedName();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getQualifiedName();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
118	[BUG]  [BUGGY]  For  (Ref  r  :  n.refs.get(originalName))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For  (Ref  r  :  n.refs.get(originalName))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For  (Ref  r  :  n.refs.get(originalName))  {	  for    (Ref    r    :    refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	37	None	replace
119	[BUG]  [BUGGY]  For  (Ref  r  :  refs.get(alias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For  (Ref  r  :  refs.get(alias))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For  (Ref  r  :  refs.get(alias))  {	  for    (Ref    r    :    refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	37	None	replace
120	[BUG]  [BUGGY]  Name  r  =  n.refs.get(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  r  =  n.refs.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  r  =  n.refs.get(alias);	  Name    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	3	None	replace
121	[BUG]  [BUGGY]  Name  r  =  refs.get(originalName);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  r  =  refs.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  r  =  refs.get(originalName);	  Name    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	3	None	replace
122	[BUG]  [BUGGY]  Name  r  =  n.refs.getValue(alias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  r  =  n.refs.getValue(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  r  =  n.refs.getValue(alias);	  Name    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	3	None	replace
123	[BUG]  [BUGGY]  Name  r  =  n.refs.get(alias,  originalName);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  r  =  n.refs.get(alias,  originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  r  =  n.refs.get(alias,  originalName);	  Name    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	3	None	replace
124	[BUG]  [BUGGY]  Name  r  =  n.references.get(originalName);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  r  =  n.references.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  r  =  n.references.get(originalName);	  Name    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	3	None	replace
125	[BUG]  [BUGGY]  Name  r  =  originalName.refs.get(n);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  r  =  originalName.refs.get(n);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  r  =  originalName.refs.get(n);	  Name    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	3	None	replace
126	[BUG]  [BUGGY]  For  (Ref  r  :  refs.get(originalName))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For  (Ref  r  :  refs.get(originalName))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For  (Ref  r  :  refs.get(originalName))  {	  For    (Ref    r    :    n.refs.get(alias))    {    	non-compiled	[CE]  not  a  statement	36	None	replace
127	[BUG]  [BUGGY]  For  (Name  r  :  n.refs.get(originalName))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For  (Name  r  :  n.refs.get(originalName))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For  (Name  r  :  n.refs.get(originalName))  {	  For    (Ref    r    :    n.refs.get(alias))    {    	non-compiled	[CE]  not  a  statement	36	None	replace
128	[BUG]  [BUGGY]  For  (Ref  r  :  n.refs.get(alias,  originalName))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For  (Ref  r  :  n.refs.get(alias,  originalName))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For  (Ref  r  :  n.refs.get(alias,  originalName))  {	  For    (Ref    r    :    n.refs.get(alias))    {    	non-compiled	[CE]  not  a  statement	36	None	replace
129	[BUG]  [BUGGY]  r.node  =  n.refs.get(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  r.node  =  n.refs.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	r.node  =  n.refs.get(alias);	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
130	[BUG]  [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
131	[BUG]  [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  compiler.reportCodeChange();  }	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
132	[BUG]  [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  refs.put(alias,  n.refs.get(originalName));  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  refs.put(alias,  n.refs.get(originalName));  }  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  refs.put(alias,  n.refs.get(originalName));  }	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
133	[BUG]  [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  nameMap.put(alias,  n.refs.get(originalName));  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  nameMap.put(alias,  n.refs.get(originalName));  }  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  nameMap.put(alias,  n.refs.get(originalName));  }	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
134	[BUG]  [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  return;  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  return;  }  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  return;  }	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
135	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getAllNames())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getAllNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getAllNames())  {	  for(Ref    r    :    n.refs.getValues())    {    	non-compiled	[CE]  not  a  statement	31	None	replace
136	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getRawValues())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getRawValues())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getRawValues())  {	  for(Ref    r    :    n.refs.getValues())    {    	non-compiled	[CE]  not  a  statement	31	None	replace
137	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getValues(),  originalName)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getValues(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getValues(),  originalName)  {	  for(Ref    r    :    n.refs.getValues())    {    	non-compiled	[CE]  not  a  statement	31	None	replace
138	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.globalNames,  alias)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.globalNames,  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.globalNames,  alias)  {	  for(Ref    r    :    n.refs.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
139	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.globalNames,  nameMap)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.globalNames,  nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.globalNames,  nameMap)  {	  for(Ref    r    :    n.refs.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
140	[BUG]  [BUGGY]  for(Name  r  :  n.refs.globalNames,  originalName)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.globalNames,  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.globalNames,  originalName)  {	  for(Ref    r    :    n.refs.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
141	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.globalNames,  true)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.globalNames,  true)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.globalNames,  true)  {	  for(Ref    r    :    n.refs.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
142	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getNames())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.getNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getNames())  {	  for(Name    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
143	[BUG]  [BUGGY]  for(Name  n  :  n.refs.names())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  n  :  n.refs.names())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  n  :  n.refs.names())  {	  for(Name    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
144	[BUG]  [BUGGY]  for(Name  r  :  n.refs.names(),  originalName)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.names(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.names(),  originalName)  {	  for(Name    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
145	[BUG]  [BUGGY]  Node  r  =  n.refs.get(1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.get(1);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.get(1);	  Node    r    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	4	None	replace
146	[BUG]  [BUGGY]  Node  r  =  n.refs.get(0).toString();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.get(0).toString();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.get(0).toString();	  Node    r    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	4	None	replace
147	[BUG]  [BUGGY]  Node  r  =  n.refs.get(0).name;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.get(0).name;  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.get(0).name;	  Node    r    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	4	None	replace
148	[BUG]  [BUGGY]  Node  r  =  refs.get(0);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  refs.get(0);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  refs.get(0);	  Node    r    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	4	None	replace
149	[BUG]  [BUGGY]  Node  r  =  n.getLastChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.getLastChild();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.getLastChild();	  Node    r    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	57	None	replace
150	[BUG]  [BUGGY]  Node  r  =  n.refs.firstChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.firstChild();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.firstChild();	  Node    r    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	57	None	replace
151	[BUG]  [BUGGY]  Node  r  =  refs.getFirstChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  refs.getFirstChild();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  refs.getFirstChild();	  Node    r    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	57	None	replace
152	[BUG]  [BUGGY]  for(Ref  r  :  n.refs,  alias)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs,  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs,  alias)  {	  for(Ref    r    :    n.refs,    originalName)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
153	[BUG]  [BUGGY]  for(Name  r  :  n.refs,  originalName)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs,  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs,  originalName)  {	  for(Ref    r    :    n.refs,    originalName)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
154	[BUG]  [BUGGY]  for(Ref  r  :  n.refs,  originalName,  alias)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs,  originalName,  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs,  originalName,  alias)  {	  for(Ref    r    :    n.refs,    originalName)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
155	[BUG]  [BUGGY]  for(Ref  r  :  n.refs,  nameMap)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs,  nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs,  nameMap)  {	  for(Ref    r    :    n.refs,    originalName)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
156	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.values())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.values())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.values())  {	  For(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
157	[BUG]  [BUGGY]  For(Name  r.node  :  n.refs.keySet())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Name  r.node  :  n.refs.keySet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Name  r.node  :  n.refs.keySet())  {	  For(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
158	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.entrySet())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.entrySet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.entrySet())  {	  For(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
159	[BUG]  [BUGGY]  For(Ref  r  :  refs.keySet())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  refs.keySet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  refs.keySet())  {	  For(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
160	[BUG]  [BUGGY]  For(Node  r  :  n.refs.keySet())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Node  r  :  n.refs.keySet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Node  r  :  n.refs.keySet())  {	  For(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
161	[BUG]  [BUGGY]  Ref  r  =  refs.get(alias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Ref  r  =  refs.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Ref  r  =  refs.get(alias);	  Ref    r    =    refs.get(originalName);    	non-compiled	[CE]  not  a  statement	6	None	replace
162	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(originalName);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Ref  r  =  n.refs.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Ref  r  =  n.refs.get(originalName);	  Ref    r    =    refs.get(originalName);    	non-compiled	[CE]  not  a  statement	6	None	replace
163	[BUG]  [BUGGY]  Ref  r  =  new  Ref(refs.get(alias));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Ref  r  =  new  Ref(refs.get(alias));  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Ref  r  =  new  Ref(refs.get(alias));	  Ref    r    =    refs.get(originalName);    	non-compiled	[CE]  not  a  statement	6	None	replace
164	[BUG]  [BUGGY]  Ref  r  =  this.refs.get(originalName);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Ref  r  =  this.refs.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Ref  r  =  this.refs.get(originalName);	  Ref    r    =    refs.get(originalName);    	non-compiled	[CE]  not  a  statement	6	None	replace
165	[BUG]  [BUGGY]  Ref  r  =  globalNames.get(originalName);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Ref  r  =  globalNames.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Ref  r  =  globalNames.get(originalName);	  Ref    r    =    refs.get(originalName);    	non-compiled	[CE]  not  a  statement	6	None	replace
166	[BUG]  [BUGGY]  Ref  r  =  regexps.get(originalName);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Ref  r  =  regexps.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Ref  r  =  regexps.get(originalName);	  Ref    r    =    refs.get(originalName);    	non-compiled	[CE]  not  a  statement	6	None	replace
167	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(0).param(originalName);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(0).param(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(0).param(originalName);	  Node    rParent    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	7	None	replace
168	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(1);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(1);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(1);	  Node    rParent    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	7	None	replace
169	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(0).cloneTwin();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(0).cloneTwin();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(0).cloneTwin();	  Node    rParent    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	7	None	replace
170	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(0).parent;  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(0).parent;  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(0).parent;	  Node    rParent    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	7	None	replace
171	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(0).param(alias);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(0).param(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(0).param(alias);	  Node    rParent    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	7	None	replace
172	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getFullName(),  originalName)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getFullName(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getFullName(),  originalName)  {	  for(Ref    r    :    n.refs.getFullName())    {    	non-compiled	[CE]  not  a  statement	52	None	replace
173	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getFullName())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.getFullName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getFullName())  {	  for(Ref    r    :    n.refs.getFullName())    {    	non-compiled	[CE]  not  a  statement	52	None	replace
174	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getFirstChild())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getFirstChild())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getFirstChild())  {	  for(Ref    r    :    n.refs.getFullName())    {    	non-compiled	[CE]  not  a  statement	52	None	replace
175	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  p  =  n.refs.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  p  =  n.refs.get(alias);	  Name    p    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	50	None	replace
176	[BUG]  [BUGGY]  Name  p  =  refs.get(originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  p  =  refs.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  p  =  refs.get(originalName);	  Name    p    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	50	None	replace
177	[BUG]  [BUGGY]  Name  p  =  n.refs.getValue(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  p  =  n.refs.getValue(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  p  =  n.refs.getValue(alias);	  Name    p    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	50	None	replace
178	[BUG]  [BUGGY]  Name  p  =  new  Name(n.refs.get(alias));  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  p  =  new  Name(n.refs.get(alias));  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  p  =  new  Name(n.refs.get(alias));	  Name    p    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	50	None	replace
179	[BUG]  [BUGGY]  Name  p  =  n.references.get(originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  p  =  n.references.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  p  =  n.references.get(originalName);	  Name    p    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	50	None	replace
180	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias,  originalName);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  p  =  n.refs.get(alias,  originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  p  =  n.refs.get(alias,  originalName);	  Name    p    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	50	None	replace
181	[BUG]  [BUGGY]  for(Ref  r  :  n.globalNames())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.globalNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.globalNames())  {	  for(Ref    r    :    n.refs.globalNames())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
182	[BUG]  [BUGGY]  for(Name  r  :  n.refs.globalNames())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.globalNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.globalNames())  {	  for(Ref    r    :    n.refs.globalNames())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
183	[BUG]  [BUGGY]  for(Ref  r  :  refs.globalNames())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.globalNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.globalNames())  {	  for(Ref    r    :    n.refs.globalNames())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
184	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.getName())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.getName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.getName())  {	  for(Ref    r    :    n.refs.getName()    +    1)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
185	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getName()  +  1)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.getName()  +  1)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getName()  +  1)  {	  for(Ref    r    :    n.refs.getName()    +    1)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
186	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getName()  +  2)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getName()  +  2)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getName()  +  2)  {	  for(Ref    r    :    n.refs.getName()    +    1)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
187	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getAllGlobalNames())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getAllGlobalNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getAllGlobalNames())  {	  for(Ref    r    :    n.refs.getGlobalNames())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
188	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getGlobalNames())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.getGlobalNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getGlobalNames())  {	  for(Ref    r    :    n.refs.getGlobalNames())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
189	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.getGlobalNames())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.getGlobalNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.getGlobalNames())  {	  for(Ref    r    :    n.refs.getGlobalNames())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
190	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getGlobalNames(),  originalName)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getGlobalNames(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getGlobalNames(),  originalName)  {	  for(Ref    r    :    n.refs.getGlobalNames())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
191	[BUG]  [BUGGY]  for(Ref  r  :  refs.getGlobalNames())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.getGlobalNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.getGlobalNames())  {	  for(Ref    r    :    n.refs.getGlobalNames())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
192	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.nameSet())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.nameSet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.nameSet())  {	  for(Ref    r    :    n.refs.nameMap())    {    	non-compiled	[CE]  not  a  statement	62	None	replace
193	[BUG]  [BUGGY]  for(Ref  r  :  refs.nameMap())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.nameMap())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.nameMap())  {	  for(Ref    r    :    n.refs.nameMap())    {    	non-compiled	[CE]  not  a  statement	62	None	replace
194	[BUG]  [BUGGY]  for(Ref  r  :  n.refs())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs())  {	  for(Ref    r    :    n.names())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
195	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.getNames())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.getNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.getNames())  {	  for(Ref    r    :    n.refs.getNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
196	[BUG]  [BUGGY]  for  (Ref  r  :  n.refs.get(alias,  originalName))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for  (Ref  r  :  n.refs.get(alias,  originalName))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (Ref  r  :  n.refs.get(alias,  originalName))  {	  for    (Ref    r    :    n.refs.get(alias))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
197	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getLocalName(),  originalName)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getLocalName(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getLocalName(),  originalName)  {	  for(Ref    r    :    n.refs.getLocalName())    {    	non-compiled	[CE]  not  a  statement	23	None	replace
198	[BUG]  [BUGGY]  for(Name  r  :  n.refs.getLocalName())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.getLocalName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.getLocalName())  {	  for(Ref    r    :    n.refs.getLocalName())    {    	non-compiled	[CE]  not  a  statement	23	None	replace
199	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getGlobalName())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getGlobalName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getGlobalName())  {	  for(Ref    r    :    n.refs.getLocalName())    {    	non-compiled	[CE]  not  a  statement	23	None	replace
200	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getString(),  originalName)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getString(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getString(),  originalName)  {	  for(Ref    r    :    n.refs.getString())    {    	non-compiled	[CE]  not  a  statement	61	None	replace
201	[BUG]  [BUGGY]  for(Ref  r  :  refs.refs.asList())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.refs.asList())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.refs.asList())  {	  for(Ref    r    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	30	None	replace
202	[BUG]  [BUGGY]  for(Ref  r  :  refs.node.asList())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.node.asList())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.node.asList())  {	  for(Ref    r    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	30	None	replace
203	[BUG]  [BUGGY]  for(Name  r  :  n.refs.toArray())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.toArray())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.toArray())  {	  for(Ref    r    :    n.refs.toArray())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
204	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.get(0),  originalName)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.get(0),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.get(0),  originalName)  {	  for(Ref    r    :    n.refs.get(0))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
205	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.get(0).name)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.get(0).name)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.get(0).name)  {	  for(Ref    r    :    n.refs.get(0))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
206	[BUG]  [BUGGY]  for(Name  r  :  n.refs.get(0))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.get(0))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.get(0))  {	  for(Ref    r    :    n.refs.get(0))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
207	[BUG]  [BUGGY]  for(Ref  r  :  refs.toArray(new  RefType[refs.size()  ]))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.toArray(new  RefType[refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.toArray(new  RefType[refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    RefType[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
208	[BUG]  [BUGGY]  for(Ref  r  :  refs.toArray(new  RefType[n.refs.size()  ]))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.toArray(new  RefType[n.refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.toArray(new  RefType[n.refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    RefType[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
209	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  originalName)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  originalName)  {	  for(Ref    r    :    n.refs.toArray(new    RefType[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
210	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  -  1]))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  -  1]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  -  1]))  {	  for(Ref    r    :    n.refs.toArray(new    RefType[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
211	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  alias)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  alias)  {	  for(Ref    r    :    n.refs.toArray(new    RefType[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
212	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    RefType[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
213	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.alias,  originalName)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.alias,  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.alias,  originalName)  {	  for(Ref    r    :    n.refs.alias)    {    	non-compiled	[CE]  not  a  statement	47	None	replace
214	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.name)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.name)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.name)  {	  for(Ref    r    :    n.refs.alias)    {    	non-compiled	[CE]  not  a  statement	47	None	replace
215	[BUG]  [BUGGY]  for(Name  r  :  n.globalNames)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.globalNames)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.globalNames)  {	  for(Ref    r    :    n.globalNames)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
216	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.names,  nameMap)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.names,  nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.names,  nameMap)  {	  For(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
217	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  NamedName[refs.size()  ]))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  NamedName[refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  NamedName[refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    Name[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
218	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ])&&!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ])&&!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ])&&!NodeUtil.isObjectLitKey(r.node,  r.node))  {	  for(Ref    r    :    n.refs.toArray(new    Name[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
219	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ])||!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ])||!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ])||!NodeUtil.isObjectLitKey(r.node,  r.node))  {	  for(Ref    r    :    n.refs.toArray(new    Name[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
220	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getLocalNames())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getLocalNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getLocalNames())  {	  for(Ref    r    :    n.refs.getGlobalNames())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
221	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getFullNames())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getFullNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getFullNames())  {	  for(Ref    r    :    n.refs.getGlobalNames())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
222	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getRootName())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getRootName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getRootName())  {	  for(Ref    r    :    n.refs.getNamespaceURI())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
223	[BUG]  [BUGGY]  For(Ref  r  :  n.refs())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs())  {	  for(Ref    r    :    n.names())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
224	[BUG]  [BUGGY]  for(Name  r  :  n.refs.alias())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.alias())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.alias())  {	  for(Name    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
225	[BUG]  [BUGGY]  for(Name  r  :  n.refs)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs)  {	  for(Name    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
226	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getName(),  nameMap)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getName(),  nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getName(),  nameMap)  {	  for(Ref    r    :    n.refs.getName(),    originalName)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
227	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getName(),  new  String[]  {  alias  }  )  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getName(),  new  String[]  {  alias  }  )  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getName(),  new  String[]  {  alias  }  )  {	  for(Ref    r    :    n.refs.getName(),    originalName)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
228	[BUG]  [BUGGY]  r.node  =  refs.get(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  r.node  =  refs.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	r.node  =  refs.get(alias);	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
229	[BUG]  [BUGGY]  r.node  =  n.getRefs().get(originalName);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  r.node  =  n.getRefs().get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	r.node  =  n.getRefs().get(originalName);	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
230	[BUG]  [BUGGY]  r.node  =  refs.get(originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  r.node  =  refs.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	r.node  =  refs.get(originalName);	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
231	[BUG]  [BUGGY]  r.node  =  n.refs.get(name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  r.node  =  n.refs.get(name);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	r.node  =  n.refs.get(name);	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
232	[BUG]  [BUGGY]  for(Ref  r  :  n.globalNames,  refs)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.globalNames,  refs)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.globalNames,  refs)  {	  for(Ref    r    :    n.globalNames)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
233	[BUG]  [BUGGY]  for(Ref  r  :  n.globalNames,  initialized)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.globalNames,  initialized)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.globalNames,  initialized)  {	  for(Ref    r    :    n.globalNames)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
234	[BUG]  [BUGGY]  Node  r  =  n.refs.getLocalName();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getLocalName();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getLocalName();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
235	[BUG]  [BUGGY]  Node  r  =  n.refs.getChildCount();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getChildCount();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getChildCount();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
236	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getAllReferences())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getAllReferences())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getAllReferences())  {	  for(Ref    r    :    n.refs.getValues())    {    	non-compiled	[CE]  not  a  statement	31	None	replace
237	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getAllRefs())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getAllRefs())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getAllRefs())  {	  for(Ref    r    :    n.refs.getValues())    {    	non-compiled	[CE]  not  a  statement	31	None	replace
238	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getObject())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getObject())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getObject())  {	  for(Ref    r    :    n.refs.getValues())    {    	non-compiled	[CE]  not  a  statement	31	None	replace
239	[BUG]  [BUGGY]  Node  r  =  n.refs.get(name);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.get(name);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.get(name);	  Node    r    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	4	None	replace
240	[BUG]  [BUGGY]  Node  r  =  n.refs.get(owner);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.get(owner);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.get(owner);	  Node    r    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	4	None	replace
241	[BUG]  [BUGGY]  Name  r  =  refs.get(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  r  =  refs.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  r  =  refs.get(alias);	  Name    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	3	None	replace
242	[BUG]  [BUGGY]  Name  r  =  new  Ref(n.refs.get(alias));  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  r  =  new  Ref(n.refs.get(alias));  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  r  =  new  Ref(n.refs.get(alias));	  Name    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	3	None	replace
243	[BUG]  [BUGGY]  Name  r  =  n.refs.find(alias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  r  =  n.refs.find(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  r  =  n.refs.find(alias);	  Name    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	3	None	replace
244	[BUG]  [BUGGY]  For(Ref  r  :  n.refs,  alias)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs,  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs,  alias)  {	  for(Ref    r    :    n.refs,    originalName)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
245	[BUG]  [BUGGY]  for(Ref  r  :  n.refs,  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs,  null)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs,  null)  {	  for(Ref    r    :    n.refs,    originalName)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
246	[BUG]  [BUGGY]  for(Ref  r  :  n.refs,  true)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs,  true)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs,  true)  {	  for(Ref    r    :    n.refs,    originalName)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
247	[BUG]  [BUGGY]  for(Ref  r  :  n.refs,  false)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs,  false)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs,  false)  {	  for(Ref    r    :    n.refs,    originalName)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
248	[BUG]  [BUGGY]  for(Ref  r  :  refs.refs)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.refs)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.refs)  {	  for(Ref    r    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
249	[BUG]  [BUGGY]  for(Ref  r  :  refs.nodeNames)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.nodeNames)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.nodeNames)  {	  for(Ref    r    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
250	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getProp(Node.NAMESPACE_REDEFINED_WARNING))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getProp(Node.NAMESPACE_REDEFINED_WARNING))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getProp(Node.NAMESPACE_REDEFINED_WARNING))  {	  for(Ref    r    :    n.refs.getString())    {    	non-compiled	[CE]  not  a  statement	61	None	replace
251	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.globalNames,  alias)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.globalNames,  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.globalNames,  alias)  {	  for(Ref    r    :    n.refs.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
252	[BUG]  [BUGGY]  for(Ref  r  :  n.refs,  globalNames)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs,  globalNames)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs,  globalNames)  {	  for(Ref    r    :    n.refs.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
253	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.globalNames,  false)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.globalNames,  false)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.globalNames,  false)  {	  for(Ref    r    :    n.refs.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
254	[BUG]  [BUGGY]  for(Ref  r  :  n.names,  nameMap)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.names,  nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.names,  nameMap)  {	  for(Ref    r    :    n.names)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
255	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.get(originalName).iterator())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.get(originalName).iterator())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.get(originalName).iterator())  {	  for(Ref    r    :    n.refs.iterator().next())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
256	[BUG]  [BUGGY]  Name  p  =  refs.get(alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  p  =  refs.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  p  =  refs.get(alias);	  Name    p    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	50	None	replace
257	[BUG]  [BUGGY]  Name  p  =  n.refs.find(alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  p  =  n.refs.find(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  p  =  n.refs.find(alias);	  Name    p    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	50	None	replace
258	[BUG]  [BUGGY]  Name  p  =  node.refs.get(originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  p  =  node.refs.get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  p  =  node.refs.get(originalName);	  Name    p    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	50	None	replace
259	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getStringName())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getStringName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getStringName())  {	  for(Ref    r    :    n.refs.getRawName())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
260	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getPropertyName())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getPropertyName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getPropertyName())  {	  for(Ref    r    :    n.refs.getFullName())    {    	non-compiled	[CE]  not  a  statement	52	None	replace
261	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(alias,  originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(alias,  originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(alias,  originalName);	  Node    rParent    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	2	None	replace
262	[BUG]  [BUGGY]  Node  r  =  n.refs.findRootNode(originalName);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.findRootNode(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.findRootNode(originalName);	  Node    r    =    n.refs.getRootNode();    	non-compiled	[CE]  not  a  statement	51	None	replace
263	[BUG]  [BUGGY]  Node  r  =  n.refs.getNode();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getNode();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getNode();	  Node    r    =    n.refs.getRootNode();    	non-compiled	[CE]  not  a  statement	51	None	replace
264	[BUG]  [BUGGY]  Node  r  =  n.refs.find(alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.find(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.find(alias);	  Node    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	1	None	replace
265	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  nameMap)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  nameMap)  {	  for(Ref    r    :    n.refs.toArray(new    Ref[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
266	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ])&&!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ])&&!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ])&&!NodeUtil.isObjectLitKey(r.node,  r.node))  {	  for(Ref    r    :    n.refs.toArray(new    Ref[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
267	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ])||!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ])||!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ])||!NodeUtil.isObjectLitKey(r.node,  r.node))  {	  for(Ref    r    :    n.refs.toArray(new    Ref[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
268	[BUG]  [BUGGY]  Ref  r  =  refs.refs.get(alias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Ref  r  =  refs.refs.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Ref  r  =  refs.refs.get(alias);	  Ref    r    =    refs.get(originalName);    	non-compiled	[CE]  not  a  statement	6	None	replace
269	[BUG]  [BUGGY]  Ref  r  =  new  Ref(refs.get(alias);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Ref  r  =  new  Ref(refs.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Ref  r  =  new  Ref(refs.get(alias);	  Ref    r    =    refs.get(originalName);    	non-compiled	[CE]  not  a  statement	6	None	replace
270	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getRootNode())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getRootNode())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getRootNode())  {	  for(Ref    r    :    n.refs.getNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
271	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  nameMap)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  nameMap)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  nameMap)  {	  for(Ref    r    :    n.refs.toArray(new    RefType[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
272	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ])&&!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ])&&!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ])&&!NodeUtil.isObjectLitKey(r.node,  r.node))  {	  for(Ref    r    :    n.refs.toArray(new    RefType[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
273	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ])||!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ])||!NodeUtil.isObjectLitKey(r.node,  r.node))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ])||!NodeUtil.isObjectLitKey(r.node,  r.node))  {	  for(Ref    r    :    n.refs.toArray(new    RefType[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
274	[BUG]  [BUGGY]  For(Ref  r  :  n.globalNames,  alias)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.globalNames,  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.globalNames,  alias)  {	  for(Ref    r    :    n.globalNames,    originalName)    {    	non-compiled	[CE]  not  a  statement	16	None	replace
275	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getURI())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getURI())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getURI())  {	  for(Ref    r    :    n.refs.getLocalName())    {    	non-compiled	[CE]  not  a  statement	23	None	replace
276	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getObjectName())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getObjectName())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getObjectName())  {	  for(Ref    r    :    n.refs.getLocalName())    {    	non-compiled	[CE]  not  a  statement	23	None	replace
277	[BUG]  [BUGGY]  for  (String  r  :  n.refs.get(originalName))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for  (String  r  :  n.refs.get(originalName))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (String  r  :  n.refs.get(originalName))  {	  for    (Name    r    :    n.refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	38	None	replace
278	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(owner);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(owner);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(owner);	  Node    rParent    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	7	None	replace
279	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(partialName);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(partialName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(partialName);	  Node    rParent    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	7	None	replace
280	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(parsedName);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(parsedName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(parsedName);	  Node    rParent    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	7	None	replace
281	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getLocalName()  +  1)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getLocalName()  +  1)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getLocalName()  +  1)  {	  for(Ref    r    :    n.refs.getName()    +    1)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
282	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getFullName()  +  1)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getFullName()  +  1)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getFullName()  +  1)  {	  for(Ref    r    :    n.refs.getName()    +    1)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
283	[BUG]  [BUGGY]  for(Ref  r  :  n.names,  alias)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.names,  alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.names,  alias)  {	  for(Ref    r    :    n.refs.names,    originalName)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
284	[BUG]  [BUGGY]  Node  r  =  n.refs.getfirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.getfirstChild();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.getfirstChild();	  Node    r    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	57	None	replace
285	[BUG]  [BUGGY]  for(Ref  r  :  refs.refs())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.refs())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.refs())  {	  for(Ref    r    :    refs.names())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
286	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.globalNames(),  originalName)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.globalNames(),  originalName)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.globalNames(),  originalName)  {	  for(Ref    r    :    n.refs.globalNames())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
287	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getRawClass())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getRawClass())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getRawClass())  {	  for(Ref    r    :    n.refs.getLocalName())    {    	non-compiled	[CE]  not  a  statement	23	None	replace
288	[BUG]  [BUGGY]  Node  r  =  n.mv.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.mv.getFirstChild();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.mv.getFirstChild();	  Node    r    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	57	None	replace
289	[BUG]  [BUGGY]  for(Name  r  :  n.refs.properties())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Name  r  :  n.refs.properties())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Name  r  :  n.refs.properties())  {	  for(Name    r    :    n.refs.values())    {    	non-compiled	[CE]  not  a  statement	32	None	replace
290	[BUG]  [BUGGY]  for(Ref  r  :  refs.node.keySet())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.node.keySet())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.node.keySet())  {	  for(Ref    r    :    refs.keySet())    {    	non-compiled	[CE]  not  a  statement	39	None	replace
291	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(originalName))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(originalName))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(originalName))  {	  for(Ref    r    :    n.refs.toArray())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
292	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getNamespaceURI(originalName))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getNamespaceURI(originalName))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getNamespaceURI(originalName))  {	  for(Ref    r    :    n.refs.getNamespaceURI())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
293	[BUG]  [BUGGY]  Node  rParent  =  n.refs.get(parenn);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.get(parenn);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.get(parenn);	  Node    rParent    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	7	None	replace
294	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.list().next())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.list().next())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.list().next())  {	  for(Ref    r    :    n.refs.iterator().next())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
295	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.get(0).next())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.get(0).next())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.get(0).next())  {	  for(Ref    r    :    n.refs.iterator().next())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
296	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.values().toArray(new  Ref[refs.size()  ]))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.values().toArray(new  Ref[refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.values().toArray(new  Ref[refs.size()  ]))  {	  for(Ref    r    :    n.refs.toArray(new    Ref[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
297	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  n.type)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  n.type)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Ref[refs.size()  ]),  n.type)  {	  for(Ref    r    :    n.refs.toArray(new    Ref[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
298	[BUG]  [BUGGY]  Node  r  =  n.initializingRefs.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.initializingRefs.getParent();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.initializingRefs.getParent();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	56	None	replace
299	[BUG]  [BUGGY]  Node  r  =  n.refs.keySet().get(originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.keySet().get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.keySet().get(originalName);	  Node    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	1	None	replace
300	[BUG]  [BUGGY]  Node  r  =  n.refs.iterator().next();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.iterator().next();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.iterator().next();	  Node    r    =    n.refs.get(0);    	non-compiled	[CE]  not  a  statement	4	None	replace
301	[BUG]  [BUGGY]  for(Ref  r  :  refs.node.names)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.node.names)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.node.names)  {	  for(Ref    r    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
302	[BUG]  [BUGGY]  for(Ref  r  :  n.names.values())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.names.values())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.names.values())  {	  for(Ref    r    :    n.names)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
303	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.entities())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.entities())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.entities())  {	  For(Ref    r    :    n.refs.names())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
304	[BUG]  [BUGGY]  Node  rParent  =  n.refs.find(alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  rParent  =  n.refs.find(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  rParent  =  n.refs.find(alias);	  Node    rParent    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	2	None	replace
305	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  n.name);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  n.name);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  n.name);	  for(Ref    r    :    n.refs.toArray(new    RefType[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
306	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  n.type)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  n.type)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  RefType[refs.size()  ]),  n.type)  {	  for(Ref    r    :    n.refs.toArray(new    RefType[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	43	None	replace
307	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getString()  +  1)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getString()  +  1)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getString()  +  1)  {	  for(Ref    r    :    n.refs.getName()    +    1)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
308	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.getName()),  this)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.getName()),  this)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.getName()),  this)  {	  for(Ref    r    :    n.refs.getName()    +    1)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
309	[BUG]  [BUGGY]  Name  p  =  n.references.get(alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  p  =  n.references.get(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  p  =  n.references.get(alias);	  Name    p    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	50	None	replace
310	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.names,  true)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.names,  true)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.names,  true)  {	  for(Ref    r    :    n.refs.names,    originalName)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
311	[BUG]  [BUGGY]  Node  r  =  n.refs.cloneTree();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs.cloneTree();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs.cloneTree();	  Node    r    =    n.refs.getRootNode();    	non-compiled	[CE]  not  a  statement	51	None	replace
312	[BUG]  [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  flattenNameRef(alias,  n.node,  n.fullName());  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  flattenNameRef(alias,  n.node,  n.fullName());  }  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  flattenNameRef(alias,  n.node,  n.fullName());  }	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
313	[BUG]  [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  flattenNameRef(alias,  n.name,  n.name);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  flattenNameRef(alias,  n.name,  n.name);  }  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  flattenNameRef(alias,  n.name,  n.name);  }	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
314	[BUG]  [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  nameMap.put(alias,  n.name);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  nameMap.put(alias,  n.name);  }  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	if(n.refs!=  null)  {  r.node  =  n.refs.get(originalName);  }  else  {  nameMap.put(alias,  n.name);  }	  r.node    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	58	None	replace
315	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.alias)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.alias)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.alias)  {	  For(Ref    r    :    n.refs.names)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
316	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.fullName();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.fullName();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.fullName();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
317	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n;  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n;	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
318	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.firstChild();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.firstChild();  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.firstChild();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
319	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.parent;  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.parent;  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.parent;	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
320	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.allGlobalNames())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.allGlobalNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.allGlobalNames())  {	  for(Ref    r    :    n.refs.globalNames())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
321	[BUG]  [BUGGY]  Ref  r  =  refs.remove(alias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Ref  r  =  refs.remove(alias);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Ref  r  =  refs.remove(alias);	  Ref    r    =    refs.get(originalName);    	non-compiled	[CE]  not  a  statement	6	None	replace
322	[BUG]  [BUGGY]  Ref  r  =  refs.get(n.refs.name);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Ref  r  =  refs.get(n.refs.name);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Ref  r  =  refs.get(n.refs.name);	  Ref    r    =    refs.get(originalName);    	non-compiled	[CE]  not  a  statement	6	None	replace
323	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.toArray(new  Name[refs.size()  ]))  {	  For(Ref    r    :    n.refs.keySet())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
324	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.name())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.name())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.name())  {	  for(Ref    r    :    n.names())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
325	[BUG]  [BUGGY]  For(Ref  r  :  n.refs.asList())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For(Ref  r  :  n.refs.asList())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For(Ref  r  :  n.refs.asList())  {	  for(Ref    r    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	30	None	replace
326	[BUG]  [BUGGY]  for(Ref  r  :  refs.nodeList())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.nodeList())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.nodeList())  {	  for(Ref    r    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	30	None	replace
327	[BUG]  [BUGGY]  for(Ref  r  :  refs.nodeNames())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.nodeNames())  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.nodeNames())  {	  for(Ref    r    :    refs.names())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
328	[BUG]  [BUGGY]  For  (Ref  r  :  n.refs.get(0))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  For  (Ref  r  :  n.refs.get(0))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	For  (Ref  r  :  n.refs.get(0))  {	  For    (Ref    r    :    n.refs.get(alias))    {    	non-compiled	[CE]  not  a  statement	36	None	replace
329	[BUG]  [BUGGY]  for  (Ref  r  :  refs.values().get(originalName))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for  (Ref  r  :  refs.values().get(originalName))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for  (Ref  r  :  refs.values().get(originalName))  {	  for    (Ref    r    :    refs.get(originalName))    {    	non-compiled	[CE]  not  a  statement	37	None	replace
330	[BUG]  [BUGGY]  Name  r  =  n.refs.keySet().get(originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  Name  r  =  n.refs.keySet().get(originalName);  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	Name  r  =  n.refs.keySet().get(originalName);	  Name    r    =    n.refs.get(originalName);    	non-compiled	[CE]  not  a  statement	3	None	replace
331	[BUG]  [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  -  1]))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  -  1]))  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  n.refs.toArray(new  Name[refs.size()  -  1]))  {	  for(Ref    r    :    n.refs.toArray(new    Name[refs.size()    ]))    {    	non-compiled	[CE]  not  a  statement	55	None	replace
332	[BUG]  [BUGGY]  for(Ref  r  :  refs.get(alias)&  0xFFFF)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();      [BUGGY]  for(Ref  r  :  refs.get(alias)&  0xFFFF)  {  [BUGGY]      Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	319	319	8	replace	for(Ref  r  :  refs.get(alias)&  0xFFFF)  {	  for    (Ref    r    :    refs.get(alias))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
