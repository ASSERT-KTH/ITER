bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	83	None	replace
2	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescend	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	83	None	replace
3	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	83	None	replace
4	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	83	None	replace
5	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	54	None	replace
6	[BUG]  [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	54	None	replace
7	[BUG]  [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	54	None	replace
8	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	54	None	replace
9	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	54	None	replace
10	[BUG]  [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }	  Pentru(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
11	[BUG]  [BUGGY]  Pentru(String  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Pentru(String  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pentru(String  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Pentru(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
12	[BUG]  [BUGGY]  Pentru(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Pentru(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pentru(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }	  Pentru(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
13	[BUG]  [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  Pentru(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	120	None	replace
15	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	120	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	120	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	120	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	120	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	120	None	replace
20	[BUG]  [BUGGY]  FlattenReferencesTo(p,  propAlias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesTo(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesTo(p,  propAlias);	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
21	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
22	[BUG]  [BUGGY]  propAlias.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  propAlias.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	propAlias.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
23	[BUG]  [BUGGY]  AppendPropsToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropsToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropsToCollapsibleDescendantNames(p,  propAlias);	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
24	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name);	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
25	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	102	None	replace
26	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	102	None	replace
27	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	100	None	replace
28	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	100	None	replace
29	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  Name  p  =  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	100	None	replace
30	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  Name  p  =  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	100	None	replace
31	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	100	None	replace
32	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleD  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleD  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleD	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	92	None	replace
33	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	92	None	replace
34	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollap  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollap  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollap	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	92	None	replace
35	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDesc  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDesc  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDesc	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	92	None	replace
36	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	92	None	replace
37	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescend  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescend  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescend	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	92	None	replace
38	[BUG]  [BUGGY]  }  else  if(n.props.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canInline())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
39	[BUG]  [BUGGY]  }  else  if(!p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canInline())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
40	[BUG]  [BUGGY]  else  if(p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canInline())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
41	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
42	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
43	[BUG]  [BUGGY]  }  else  if(p.canInline())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canInline())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canInline())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
44	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
45	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
46	[BUG]  [BUGGY]  else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	40	None	replace
47	[BUG]  [BUGGY]  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  }    else    if(!p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	40	None	replace
48	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
49	[BUG]  [BUGGY]  }  else  if(!n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
50	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
51	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse()  &&  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse()  &&  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse()  &&  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  }    else    if(n.props.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
52	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
53	[BUG]  [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
54	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	68	None	replace
55	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	68	None	replace
56	[BUG]  [BUGGY]  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
57	[BUG]  [BUGGY]  if(n.props!=  null)  {  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
58	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
59	[BUG]  [BUGGY]  if(n.props!=  null)  {  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
60	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
61	[BUG]  [BUGGY]  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
62	[BUG]  [BUGGY]  }  else  if(n.props!=  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null    ||    p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	129	None	replace
63	[BUG]  [BUGGY]  }  else  if(n.props  ==  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.props    ==    null    ||    p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	129	None	replace
64	[BUG]  [BUGGY]  }  else  if(n.props  ==  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props    ==    null    ||    p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	129	None	replace
65	[BUG]  [BUGGY]  }  else  if(n.props!=  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.props    ==    null    ||    p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	129	None	replace
66	[BUG]  [BUGGY]  }  else  if(n.props!=  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props    ==    null    ||    p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	129	None	replace
67	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null    ||    p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	129	None	replace
68	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  p.name));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  p.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  p.name));	  AssertionFailedToInlineAlias(n.name,    alias,    appendPropForAlias(alias,    n.name));    	non-compiled	[CE]  not  a  statement	118	None	replace
69	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n.name,  p.name,  appendPropForAlias(alias,  n.name));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n.name,  p.name,  appendPropForAlias(alias,  n.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n.name,  p.name,  appendPropForAlias(alias,  n.name));	  AssertionFailedToInlineAlias(n.name,    alias,    appendPropForAlias(alias,    n.name));    	non-compiled	[CE]  not  a  statement	118	None	replace
70	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(alias,  n.name,  appendPropForAlias(alias,  n.name));  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(alias,  n.name,  appendPropForAlias(alias,  n.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(alias,  n.name,  appendPropForAlias(alias,  n.name));	  AssertionFailedToInlineAlias(n.name,    alias,    appendPropForAlias(alias,    n.name));    	non-compiled	[CE]  not  a  statement	118	None	replace
71	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  propAlias));  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  propAlias));	  AssertionFailedToInlineAlias(n.name,    alias,    appendPropForAlias(alias,    n.name));    	non-compiled	[CE]  not  a  statement	118	None	replace
72	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n,  p.name,  appendPropForAlias(alias,  n.name));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n,  p.name,  appendPropForAlias(alias,  n.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n,  p.name,  appendPropForAlias(alias,  n.name));	  AssertionFailedToInlineAlias(n.name,    alias,    appendPropForAlias(alias,    n.name));    	non-compiled	[CE]  not  a  statement	118	None	replace
73	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(p.name,  alias,  appendPropForAlias(alias,  n.name));  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(p.name,  alias,  appendPropForAlias(alias,  n.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(p.name,  alias,  appendPropForAlias(alias,  n.name));	  AssertionFailedToInlineAlias(n.name,    alias,    appendPropForAlias(alias,    n.name));    	non-compiled	[CE]  not  a  statement	118	None	replace
74	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n,  alias,  appendPropForAlias(alias,  p.name));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n,  alias,  appendPropForAlias(alias,  p.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n,  alias,  appendPropForAlias(alias,  p.name));	  AssertionFailedToInlineAlias(n.name,    alias,    appendPropForAlias(alias,    n.name));    	non-compiled	[CE]  not  a  statement	118	None	replace
75	[BUG]  [BUGGY]  else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
76	[BUG]  [BUGGY]  }  else  if(!n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
77	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
78	[BUG]  [BUGGY]  AppendPropForAlias(alias,  n.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  n.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  n.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
79	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
80	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
81	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
82	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
83	[BUG]  [BUGGY]  appendPropForAlias(alias,  n.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendPropForAlias(alias,  n.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendPropForAlias(alias,  n.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
84	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
85	[BUG]  [BUGGY]  }  else  if(!p.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canRelapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
86	[BUG]  [BUGGY]  }  else  if(n.props.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canRelapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
87	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	21	None	replace
88	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	21	None	replace
89	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	21	None	replace
90	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	21	None	replace
91	[BUG]  [BUGGY]  }  else  if(p.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	21	None	replace
92	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  flattenReferencesToAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
93	[BUG]  [BUGGY]  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
94	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
95	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
96	[BUG]  [BUGGY]  else  if(p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canInline())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
97	[BUG]  [BUGGY]  }  else  if(n.props.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canInline())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
98	[BUG]  [BUGGY]  }  else  if(!p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canInline())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
99	[BUG]  [BUGGY]  }  else  if(p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canInline())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
100	[BUG]  [BUGGY]  if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	72	None	replace
101	[BUG]  [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	72	None	replace
102	[BUG]  [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	72	None	replace
103	[BUG]  [BUGGY]  else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	72	None	replace
104	[BUG]  [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	72	None	replace
105	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	82	None	replace
106	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	82	None	replace
107	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	82	None	replace
108	[BUG]  [BUGGY]  Name  p  =  n.props.getName())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props.getName())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props.getName())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	82	None	replace
109	[BUG]  [BUGGY]  Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	82	None	replace
110	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	19	None	replace
111	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
112	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
113	[BUG]  [BUGGY]  }  else  if(n.canCollapse()  ||  n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse()  ||  n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse()  ||  n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
114	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias,  appendPropForAlias(alias,  p.name));  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
115	[BUG]  [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p,  n.props);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p,  n.props);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p,  n.props);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
116	[BUG]  [BUGGY]  For(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
117	[BUG]  [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescend	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	124	None	replace
118	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(propAlias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
119	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(propAlias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
120	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(propAlias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
121	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(propAlias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
122	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(propAlias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
123	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(propAlias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
124	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
125	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
126	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
127	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  for(Name  p  :  props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
128	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  propAlias)  {  flattenReferencesTo(p,  n.props);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  propAlias)  {  flattenReferencesTo(p,  n.props);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  propAlias)  {  flattenReferencesTo(p,  n.props);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
129	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  }	  else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
130	[BUG]  [BUGGY]  else  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
131	[BUG]  [BUGGY]  else  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
132	[BUG]  [BUGGY]  else  if(n.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
133	[BUG]  [BUGGY]  }  else  if(p.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	37	None	replace
134	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	37	None	replace
135	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	37	None	replace
136	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias)||  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias)||  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias)||  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	37	None	replace
137	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias)||  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias)||  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias)||  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat	  }    else    if(n.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	37	None	replace
138	[BUG]  [BUGGY]  }  else  if(!n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	37	None	replace
139	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	66	None	replace
140	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	66	None	replace
141	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	66	None	replace
142	[BUG]  [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	66	None	replace
143	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	66	None	replace
144	[BUG]  [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	31	None	replace
145	[BUG]  [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	31	None	replace
146	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	31	None	replace
147	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  FlattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  FlattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  FlattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	31	None	replace
148	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	95	None	replace
149	[BUG]  [BUGGY]  propAlias.put(p.name,  propAlias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  propAlias.put(p.name,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	propAlias.put(p.name,  propAlias);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	95	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse());  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse());  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse());	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	95	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkNotNull(propAlias);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkNotNull(propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkNotNull(propAlias);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	95	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  &&  propAlias.length()  >  0);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  &&  propAlias.length()  >  0);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  &&  propAlias.length()  >  0);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	95	None	replace
153	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	79	None	replace
154	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	105	None	replace
155	[BUG]  [BUGGY]  Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	59	None	replace
156	[BUG]  [BUGGY]  Name  p  =  n.props.getName())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props.getName())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props.getName())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	59	None	replace
157	[BUG]  [BUGGY]  Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	59	None	replace
158	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	59	None	replace
159	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	59	None	replace
160	[BUG]  [BUGGY]  Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	59	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  &&  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  &&  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  &&  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  &&  propAlias.startsWith( "_ "))  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  &&  propAlias.startsWith( "_ "))  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  &&  propAlias.startsWith( "_ "))  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse();  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse();  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse();  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
166	[BUG]  [BUGGY]  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	128	None	replace
167	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	128	None	replace
168	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	128	None	replace
169	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	128	None	replace
170	[BUG]  [BUGGY]  }  else  if(n.name.endsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.endsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.endsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.startsWith(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
171	[BUG]  [BUGGY]  }  else  if(p.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.startsWith(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
172	[BUG]  [BUGGY]  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  }    else    if(n.name.startsWith(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
173	[BUG]  [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.startsWith(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.startsWith(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
174	[BUG]  [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  }    else    if(n.name.startsWith(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
175	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
176	[BUG]  [BUGGY]  }  else  if(!n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
177	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
178	[BUG]  [BUGGY]  else  if(n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
179	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	48	None	replace
180	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	109	None	replace
181	[BUG]  [BUGGY]  else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	109	None	replace
182	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	109	None	replace
183	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	109	None	replace
184	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	109	None	replace
185	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	109	None	replace
186	[BUG]  [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	114	None	replace
187	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	114	None	replace
188	[BUG]  [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantsNames(p,  n.props);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantsNames(p,  n.props);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantsNames(p,  n.props);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	114	None	replace
189	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias,  null);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias,  null);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias,  null);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	114	None	replace
190	[BUG]  [BUGGY]  else  if(p.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canRelapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
191	[BUG]  [BUGGY]  }  else  if(!p.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canRelapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
192	[BUG]  [BUGGY]  }  else  if(n.props.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canRelapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
193	[BUG]  [BUGGY]  }  else  if(p.canRelapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canRelapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canRelapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canRelapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
194	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	130	None	replace
195	[BUG]  [BUGGY]  }  else  if(n.props.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	130	None	replace
196	[BUG]  [BUGGY]  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	107	None	replace
197	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	107	None	replace
198	[BUG]  [BUGGY]  if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	107	None	replace
199	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	107	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
201	[BUG]  [BUGGY]  Context.checkState(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Context.checkState(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Context.checkState(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(n.name!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.name!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.name!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
203	[BUG]  [BUGGY]  AssertionFailedError.checkState(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedError.checkState(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedError.checkState(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null);  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props!=  null);  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props!=  null);  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
205	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
206	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
207	[BUG]  [BUGGY]  for(Name  p  :  n.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
208	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
209	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(alias,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(alias,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
210	[BUG]  [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
211	[BUG]  [BUGGY]  compiler.report(JSError.make(n.props,  alias,  NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(n.props,  alias,  NAMESPACE_REDEFINED_WARNING));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(n.props,  alias,  NAMESPACE_REDEFINED_WARNING));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
212	[BUG]  [BUGGY]  compiler.report(JSError.make(n.props,  alias,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(n.props,  alias,  NAMESPACE_REDEFINED_WARNING,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(n.props,  alias,  NAMESPACE_REDEFINED_WARNING,  propAlias));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
213	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  p.name));  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  p.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(alias,  NAMESPACE_REDEFINED_WARNING,  p.name));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
214	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	67	None	replace
215	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	67	None	replace
216	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	67	None	replace
217	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	67	None	replace
218	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	108	None	replace
219	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	108	None	replace
220	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	76	None	replace
221	[BUG]  [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	76	None	replace
222	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	76	None	replace
223	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	76	None	replace
224	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
225	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  prop.props)  {  flattenReferencesTo(p,  n.props);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  prop.props)  {  flattenReferencesTo(p,  n.props);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  prop.props)  {  flattenReferencesTo(p,  n.props);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
226	[BUG]  [BUGGY]  }  else  if(n.props  >=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  >=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  >=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
227	[BUG]  [BUGGY]  }  else  if(p.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
228	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  prop  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  prop  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  prop  :  n.props)  {  flattenReferencesTo(p,  prop);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
229	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAl    	non-compiled	[CE]  not  a  statement	63	None	replace
230	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAl    	non-compiled	[CE]  not  a  statement	63	None	replace
231	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAl    	non-compiled	[CE]  not  a  statement	63	None	replace
232	[BUG]  [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAl    	non-compiled	[CE]  not  a  statement	63	None	replace
233	[BUG]  [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	87	None	replace
234	[BUG]  [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	56	None	replace
235	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	56	None	replace
236	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	56	None	replace
237	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenRe  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenRe	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	56	None	replace
238	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propA    	non-compiled	[CE]  not  a  statement	62	None	replace
239	[BUG]  [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propA    	non-compiled	[CE]  not  a  statement	62	None	replace
240	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propA    	non-compiled	[CE]  not  a  statement	62	None	replace
241	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	23	None	replace
242	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	23	None	replace
243	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	23	None	replace
244	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	23	None	replace
245	[BUG]  [BUGGY]  }  else  if(p.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	23	None	replace
246	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesTo(alias,  propAlias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesTo(alias,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesTo(alias,  propAlias);	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	5	None	replace
247	[BUG]  [BUGGY]  Name  p  =  n.props.getName())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props.getName())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props.getName())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	5	None	replace
248	[BUG]  [BUGGY]  Name  p  =  n.props.getName())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props.getName())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props.getName())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	5	None	replace
249	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	5	None	replace
250	[BUG]  [BUGGY]  Name  p  =  n.props)  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props)  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props)  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	5	None	replace
251	[BUG]  [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	58	None	replace
252	[BUG]  [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	58	None	replace
253	[BUG]  [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  n  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  n.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  n  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  n.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.name!=  null)  {  for(Name  n  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  n.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	58	None	replace
254	[BUG]  [BUGGY]  }  else  if(!n.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props;    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
255	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  null;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  null;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  Name  p  =  null;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props;    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
256	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  Name  p  =  props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props;    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
257	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  Name  p  =  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canCollapse())  {  Name  p  =  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  Name  p  =  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props;    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
258	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	22	None	replace
259	[BUG]  [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	81	None	replace
260	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	81	None	replace
261	[BUG]  [BUGGY]  Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
262	[BUG]  [BUGGY]  Name  p  =  n.props.getName())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props.getName())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props.getName())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
263	[BUG]  [BUGGY]  Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  n.props);  }	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
264	[BUG]  [BUGGY]  Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
265	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(n.props,  propAlias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(n.props,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesToCollapsibleDescendantNames(n.props,  propAlias);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
266	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.clone();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.clone();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.clone();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
267	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
268	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    appendPropForAlias(alias,    p.name));    }    	non-compiled	[CE]  not  a  statement	73	None	replace
269	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    appendPropForAlias(alias,    p.name));    }    	non-compiled	[CE]  not  a  statement	73	None	replace
270	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    appendPropForAlias(alias,    p.name));    }    	non-compiled	[CE]  not  a  statement	73	None	replace
271	[BUG]  [BUGGY]  }  else  if(n.props.contains(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.contains(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.contains(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    appendPropForAlias(alias,    p.name));    }    	non-compiled	[CE]  not  a  statement	73	None	replace
272	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    appendPropForAlias(alias,    p.name));    }    	non-compiled	[CE]  not  a  statement	73	None	replace
273	[BUG]  [BUGGY]  }  else  if(p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    appendPropForAlias(alias,    p.name));    }    	non-compiled	[CE]  not  a  statement	73	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p.name  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p.name  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p.name	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  &&  propAlias.startsWith( "_ "))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  &&  propAlias.startsWith( "_ "))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  &&  propAlias.startsWith( "_ "))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
280	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(p.name,  n.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(p.name,  n.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(p.name,  n.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
281	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(alias,  p.name,  flattenReferencesToCollapsibleDescendantNames(n.name));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(alias,  p.name,  flattenReferencesToCollapsibleDescendantNames(n.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(alias,  p.name,  flattenReferencesToCollapsibleDescendantNames(n.name));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
282	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n.name,  propAlias,  flattenReferencesToCollapsibleDescendantNames(p.name));  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n.name,  propAlias,  flattenReferencesToCollapsibleDescendantNames(p.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n.name,  propAlias,  flattenReferencesToCollapsibleDescendantNames(p.name));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
283	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(alias,  p.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(alias,  p.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(alias,  p.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
284	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n.name,  p.name,  flattenReferencesToCollapsibleDescendantNames(p,  propAlias));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n.name,  p.name,  flattenReferencesToCollapsibleDescendantNames(p,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n.name,  p.name,  flattenReferencesToCollapsibleDescendantNames(p,  propAlias));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
285	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(alias,  n.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(alias,  n.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(alias,  n.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
286	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(propAlias,  p.name,  flattenReferencesToCollapsibleDescendantNames(n.name));  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(propAlias,  p.name,  flattenReferencesToCollapsibleDescendantNames(n.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(propAlias,  p.name,  flattenReferencesToCollapsibleDescendantNames(n.name));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
287	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	65	None	replace
288	[BUG]  [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	65	None	replace
289	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	65	None	replace
290	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	84	None	replace
291	[BUG]  [BUGGY]  Name  p  =  n.props.getName())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props.getName())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props.getName())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	84	None	replace
292	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToAlias(alias,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToAlias(alias,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToAlias(alias,  propAlias);  }	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	84	None	replace
293	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	84	None	replace
294	[BUG]  [BUGGY]  Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	84	None	replace
295	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(!p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
296	[BUG]  [BUGGY]  for(Name  p  :  n.name)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.name)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.name)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(!p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
297	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  if(!p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(!p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
298	[BUG]  [BUGGY]  ForName  p  :  n.props.name)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  ForName  p  :  n.props.name)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	ForName  p  :  n.props.name)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(!p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
300	[BUG]  [BUGGY]  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
303	[BUG]  [BUGGY]  AppendPropForAlias(alias,  appendPropForAlias(alias,  p.name));  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  appendPropForAlias(alias,  p.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  appendPropForAlias(alias,  p.name));	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
305	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendants(p,  propAlias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesToCollapsibleDescendants(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesToCollapsibleDescendants(p,  propAlias);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	96	None	replace
306	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	96	None	replace
307	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	96	None	replace
308	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleD  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleD  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleD	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	96	None	replace
309	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	101	None	replace
310	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	101	None	replace
311	[BUG]  [BUGGY]  }  else  if(!n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	101	None	replace
312	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	111	None	replace
313	[BUG]  [BUGGY]  }  else  if(n.props.isEmpty())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.isEmpty())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.isEmpty())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	111	None	replace
314	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
315	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  alias);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  alias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  alias);	  else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
316	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
317	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
318	[BUG]  [BUGGY]  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
319	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAl    	non-compiled	[CE]  not  a  statement	75	None	replace
320	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props.getName();    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
321	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props.getName();    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
322	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props.getName();    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
323	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props.getName();    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
324	[BUG]  [BUGGY]  }  else  if(!n.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props.getName();    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
325	[BUG]  [BUGGY]  AppendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    propAlias);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
326	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    propAlias);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
327	[BUG]  [BUGGY]  AppendPropForAlias(alias,  n.props);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  n.props);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  n.props);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    propAlias);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
328	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.equals(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
329	[BUG]  [BUGGY]  safeName.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  safeName.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	safeName.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.equals(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
330	[BUG]  [BUGGY]  }  else  if(p.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.equals(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
331	[BUG]  [BUGGY]  }  else  if(n.name.equals(p.name))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(p.name))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(p.name))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.equals(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
332	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  }    else    if(n.name.equals(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
333	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	86	None	replace
334	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	86	None	replace
335	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	86	None	replace
336	[BUG]  [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	86	None	replace
337	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	103	None	replace
338	[BUG]  [BUGGY]  }  else  if(p.canInline())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canInline())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canInline())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	103	None	replace
339	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	103	None	replace
340	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendants	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	103	None	replace
341	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	103	None	replace
342	[BUG]  [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	89	None	replace
343	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	126	None	replace
344	[BUG]  [BUGGY]  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	126	None	replace
345	[BUG]  [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.containsKey(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	115	None	replace
346	[BUG]  [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.containsKey(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.containsKey(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	115	None	replace
347	[BUG]  [BUGGY]  else  if(n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.containsKey(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	115	None	replace
348	[BUG]  [BUGGY]  }  else  if(!n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.containsKey(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	115	None	replace
349	[BUG]  [BUGGY]  }  else  if(n.props.containsKey(propAlias)||  n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.containsKey(propAlias)||  n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.containsKey(propAlias)||  n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.containsKey(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	115	None	replace
350	[BUG]  [BUGGY]  }  else  if(n.props.containsKey(propAlias)||  n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.containsKey(propAlias)||  n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.containsKey(propAlias)||  n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props.containsKey(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	115	None	replace
351	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
352	[BUG]  [BUGGY]  }  else  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
353	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
354	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  n);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  n);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  n);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
355	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	88	None	replace
356	[BUG]  [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	88	None	replace
357	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	88	None	replace
358	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	80	None	replace
359	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	80	None	replace
360	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenRe  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	80	None	replace
361	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  p  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  p  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  p  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	80	None	replace
362	[BUG]  [BUGGY]  appendPropForAlias(alias,  p.name,  propAlias);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendPropForAlias(alias,  p.name,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendPropForAlias(alias,  p.name,  propAlias);	  appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
363	[BUG]  [BUGGY]  appendPropForAlias(alias,  propAlias);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendPropForAlias(alias,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendPropForAlias(alias,  propAlias);	  appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
364	[BUG]  [BUGGY]  appendPropForAlias(alias,  n.name);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendPropForAlias(alias,  n.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendPropForAlias(alias,  n.name);	  appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
365	[BUG]  [BUGGY]  appendPropForAlias(alias,  propAlias.name);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendPropForAlias(alias,  propAlias.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendPropForAlias(alias,  propAlias.name);	  appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
366	[BUG]  [BUGGY]  appendAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendAlias(alias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendAlias(alias,  p.name);	  appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
367	[BUG]  [BUGGY]  appendPropForAlias(alias,  p.name,  n.props);  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendPropForAlias(alias,  p.name,  n.props);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendPropForAlias(alias,  p.name,  n.props);	  appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
368	[BUG]  [BUGGY]  else  if(n.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
369	[BUG]  [BUGGY]  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
370	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	112	None	replace
371	[BUG]  [BUGGY]  }  else  if(!n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	112	None	replace
372	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	112	None	replace
373	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
374	[BUG]  [BUGGY]  else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
375	[BUG]  [BUGGY]  }  else  if(!n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
376	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.canCollapse();  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.canCollapse();  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.canCollapse();  flattenReferencesTo(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
377	[BUG]  [BUGGY]  }  else  if(!n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
378	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	123	None	replace
379	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	123	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(propAlias  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(propAlias  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(propAlias  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props    ==    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
381	[BUG]  [BUGGY]  Context.checkState(n.props  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Context.checkState(n.props  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Context.checkState(n.props  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props    ==    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
382	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	69	None	replace
383	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
384	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propA  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propA	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
385	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAli	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
386	[BUG]  [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendant    	non-compiled	[CE]  not  a  statement	127	None	replace
387	[BUG]  [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendant    	non-compiled	[CE]  not  a  statement	127	None	replace
388	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendant    	non-compiled	[CE]  not  a  statement	127	None	replace
389	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendant    	non-compiled	[CE]  not  a  statement	127	None	replace
390	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
391	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
392	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
393	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkState(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null  &&  n.props.length()  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props!=  null  &&  n.props.length()  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props!=  null  &&  n.props.length()  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
398	[BUG]  [BUGGY]  else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
399	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
400	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
401	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	119	None	replace
402	[BUG]  [BUGGY]  ForName  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  ForName  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	ForName  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	119	None	replace
403	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  if(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	119	None	replace
404	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	119	None	replace
405	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
406	[BUG]  [BUGGY]  propAlias.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  propAlias.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	propAlias.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
407	[BUG]  [BUGGY]  plainReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  plainReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	plainReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
408	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
409	[BUG]  [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	104	None	replace
410	[BUG]  [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	104	None	replace
411	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
412	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
413	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias));  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias));	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  }  else  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  }  else  {  compiler.reportCodeChange();  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  propAlias);  }  else  {  compiler.reportCodeChange();  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
416	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse()  ||  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
418	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	71	None	replace
419	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  prop  :  n.props)  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  prop  :  n.props)  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  prop  :  n.props)  {  flattenReferencesTo(p,  prop	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	71	None	replace
420	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	71	None	replace
421	[BUG]  [BUGGY]  }  else  if(propAlias!=  null)  {  for(Name  p  :  prop.props)  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(propAlias!=  null)  {  for(Name  p  :  prop.props)  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(propAlias!=  null)  {  for(Name  p  :  prop.props)  {  flattenReferencesTo(p,  prop	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	71	None	replace
422	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  prop  :  n.props)  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  prop  :  n.props)  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  prop  :  n.props)  {  flattenReferencesTo(p,  prop	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	71	None	replace
423	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  prop.props)  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  prop.props)  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  prop.props)  {  flattenReferencesTo(p,  prop	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	71	None	replace
424	[BUG]  [BUGGY]  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
425	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
426	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	98	None	replace
427	[BUG]  [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	98	None	replace
428	[BUG]  [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	98	None	replace
429	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	98	None	replace
430	[BUG]  [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	98	None	replace
431	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	98	None	replace
432	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAl    	non-compiled	[CE]  not  a  statement	78	None	replace
433	[BUG]  [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	32	None	replace
434	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	32	None	replace
435	[BUG]  [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	32	None	replace
436	[BUG]  [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	32	None	replace
437	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	32	None	replace
438	[BUG]  [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	32	None	replace
439	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesToCollapsibleDescendantNames(p);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
440	[BUG]  [BUGGY]  AppendPropForAlias(alias,  appendPropForAlias(alias,  propAlias));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  appendPropForAlias(alias,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  appendPropForAlias(alias,  propAlias));	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
441	[BUG]  [BUGGY]  parent.appendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  parent.appendPropForAlias(alias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	parent.appendPropForAlias(alias,  p.name);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
442	[BUG]  [BUGGY]  else  if(p.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canRemove())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
443	[BUG]  [BUGGY]  }  else  if(n.props.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canRemove())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
444	[BUG]  [BUGGY]  }  else  if(!p.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canRemove())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
445	[BUG]  [BUGGY]  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
446	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
447	[BUG]  [BUGGY]  Node  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Node  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Node  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
448	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse()  ||  n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
449	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
450	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
451	[BUG]  [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pentru(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
452	[BUG]  [BUGGY]  For(String  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(String  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(String  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
453	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias,  appendPropForAlias(alias,  p.name));  }	  For(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
454	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
455	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
456	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesTo(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesTo(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesTo(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
457	[BUG]  [BUGGY]  AppendPropForAlias(alias,  n.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  n.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  n.name);  if(p.canCollapse())  {  flattenReferencesTo	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
458	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	110	None	replace
459	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	110	None	replace
460	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	110	None	replace
461	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	110	None	replace
462	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	110	None	replace
463	[BUG]  [BUGGY]  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props    ==    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	131	None	replace
464	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	91	None	replace
465	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	91	None	replace
466	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  flattenReferencesToAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	91	None	replace
467	[BUG]  [BUGGY]  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	91	None	replace
468	[BUG]  [BUGGY]  }  else  if(n.props.hasName())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.hasName())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.hasName())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	36	None	replace
469	[BUG]  [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  alias));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  alias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  alias));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
470	[BUG]  [BUGGY]  compiler.report(JSError.make(alias,  UNSAFE_NAMESPACE_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(alias,  UNSAFE_NAMESPACE_WARNING,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(alias,  UNSAFE_NAMESPACE_WARNING,  propAlias));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
471	[BUG]  [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  p.name));  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  p.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  p.name));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
472	[BUG]  [BUGGY]  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props    ==    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	131	None	replace
473	[BUG]  [BUGGY]  Preconditions.checkState(n.props  ==  null);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props  ==  null);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props  ==  null);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	120	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props!=  null);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props!=  null);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	120	None	replace
475	[BUG]  [BUGGY]  Context.checkState(p.canCollapse());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Context.checkState(p.canCollapse());  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Context.checkState(p.canCollapse());	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	120	None	replace
476	[BUG]  [BUGGY]  safely()  &&  n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  safely()  &&  n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	safely()  &&  n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	91	None	replace
477	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	91	None	replace
478	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	91	None	replace
479	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenRe	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	5	None	replace
480	[BUG]  [BUGGY]  Name  p  :  n.props,  flattenReferencesToCollapsibleDescendantNames)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props,  flattenReferencesToCollapsibleDescendantNames)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props,  flattenReferencesToCollapsibleDescendantNames)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenRe	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	5	None	replace
481	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	80	None	replace
482	[BUG]  [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	80	None	replace
483	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }	  }    else    if(!p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
484	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
485	[BUG]  [BUGGY]  safely()  &&  n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  safely()  &&  n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	safely()  &&  n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	39	None	replace
486	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
487	[BUG]  [BUGGY]  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
488	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
489	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
490	[BUG]  [BUGGY]  Node  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Node  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Node  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
491	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  String  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  String  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  String  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
492	[BUG]  [BUGGY]  Name  p  :  null)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  null)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  null)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	82	None	replace
493	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flatten  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flatten  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flatten	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	82	None	replace
494	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  FlattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  FlattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  FlattenReferencesTo	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	82	None	replace
495	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	21	None	replace
496	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	21	None	replace
497	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
498	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
499	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
500	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
501	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
502	[BUG]  [BUGGY]  }  else  if(n.name!=  null  &&  n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null  &&  n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null  &&  n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.startsWith(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
503	[BUG]  [BUGGY]  }  else  if(n.name!=  null  ||  n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null  ||  n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null  ||  n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.startsWith(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
504	[BUG]  [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.startsWith(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.startsWith(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
505	[BUG]  [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.startsWith(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.startsWith(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
506	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollap  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollap  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollap	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	124	None	replace
507	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAl    	non-compiled	[CE]  not  a  statement	75	None	replace
508	[BUG]  [BUGGY]  Pie  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Pie  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pie  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Pentru(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
509	[BUG]  [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }	  Pentru(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
510	[BUG]  [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);  }	  Pentru(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
511	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  for(String  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  for(String  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  for(String  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
512	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToAppendPropForAlias(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToAppendPropForAlias(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToAppendPropForAlias(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
513	[BUG]  [BUGGY]  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	126	None	replace
514	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	60	None	replace
515	[BUG]  [BUGGY]  if(n.props!=  null)  {  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	60	None	replace
516	[BUG]  [BUGGY]  else  if(p.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canRelapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
517	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	119	None	replace
518	[BUG]  [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescend	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendant    	non-compiled	[CE]  not  a  statement	127	None	replace
519	[BUG]  [BUGGY]  safely()  &&  n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  safely()  &&  n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	safely()  &&  n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
520	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
521	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
522	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  Name  p  :  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  Name  p  :  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  Name  p  :  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
523	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
524	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
525	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias);  }	  else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
526	[BUG]  [BUGGY]  safely())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  safely())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	safely())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
527	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }	  else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
528	[BUG]  [BUGGY]  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
529	[BUG]  [BUGGY]  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
530	[BUG]  [BUGGY]  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
531	[BUG]  [BUGGY]  if(n.props  ==  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
532	[BUG]  [BUGGY]  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
533	[BUG]  [BUGGY]  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
534	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name	  else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
535	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
536	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name)  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name)  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name)	  else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
537	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  properties);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  properties);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  properties);  }	  else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
538	[BUG]  [BUGGY]  Preconditions.checkArgument(p.canCollapse());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkArgument(p.canCollapse());  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkArgument(p.canCollapse());	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
539	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Context.reportCodeChange();  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Context.reportCodeChange();	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
540	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
541	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
542	[BUG]  [BUGGY]  }  else  if(!n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
543	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
544	[BUG]  [BUGGY]  safely(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  safely(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	safely(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
545	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name),  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name),  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name),  propAlias);  }	  else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
546	[BUG]  [BUGGY]  if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
547	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
548	[BUG]  [BUGGY]  if(n.props  ==  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
549	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
550	[BUG]  [BUGGY]  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
551	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
552	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n,  alias,  appendPropForAlias(alias,  n.name));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n,  alias,  appendPropForAlias(alias,  n.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n,  alias,  appendPropForAlias(alias,  n.name));	  AssertionFailedToInlineAlias(n.name,    alias,    appendPropForAlias(alias,    n.name));    	non-compiled	[CE]  not  a  statement	118	None	replace
553	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  n.props));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  n.props));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  n.props));	  AssertionFailedToInlineAlias(n.name,    alias,    appendPropForAlias(alias,    n.name));    	non-compiled	[CE]  not  a  statement	118	None	replace
554	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	71	None	replace
555	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
556	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenRe  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenRe	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
557	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantName	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
558	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
559	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
560	[BUG]  [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	76	None	replace
561	[BUG]  [BUGGY]  parent.flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  parent.flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	parent.flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
562	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
563	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
564	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
565	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
566	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenRe  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenRe	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
567	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
568	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
569	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenRe	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	32	None	replace
570	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenRe  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenRe	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	96	None	replace
571	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  else  {  flattenRe  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  else  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  else  {  flattenRe	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	96	None	replace
572	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	112	None	replace
573	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	112	None	replace
574	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(!p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	112	None	replace
575	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	103	None	replace
576	[BUG]  [BUGGY]  safely()  &&  n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  safely()  &&  n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	safely()  &&  n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
577	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
578	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
579	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
580	[BUG]  [BUGGY]  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	107	None	replace
581	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	107	None	replace
582	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
583	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(String  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(String  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(String  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
584	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	59	None	replace
585	[BUG]  [BUGGY]  Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	59	None	replace
586	[BUG]  [BUGGY]  Name  p  :  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	59	None	replace
587	[BUG]  [BUGGY]  Name  p  :  n.props,  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props,  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props,  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	59	None	replace
588	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
589	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
590	[BUG]  [BUGGY]  Preconditions.checkState(n.name  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.name  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.name  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props    ==    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
591	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
592	[BUG]  [BUGGY]  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
593	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
594	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
595	[BUG]  [BUGGY]  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
596	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
597	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	86	None	replace
598	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	101	None	replace
599	[BUG]  [BUGGY]  }  else  if(p.canRemove())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canRemove())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canRemove())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canRemove())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
600	[BUG]  [BUGGY]  Preconditions.checkState(propAlias!=  null);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(propAlias!=  null);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(propAlias!=  null);	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
601	[BUG]  [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	104	None	replace
602	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	98	None	replace
603	[BUG]  [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	98	None	replace
604	[BUG]  [BUGGY]  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	108	None	replace
605	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	108	None	replace
606	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	108	None	replace
607	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	84	None	replace
608	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	84	None	replace
609	[BUG]  [BUGGY]  Name  p  :  null)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  null)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  null)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	84	None	replace
610	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	95	None	replace
611	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	114	None	replace
612	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	114	None	replace
613	[BUG]  [BUGGY]  For(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	114	None	replace
614	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	109	None	replace
615	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	109	None	replace
616	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	56	None	replace
617	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	56	None	replace
618	[BUG]  [BUGGY]  }  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat	  }    else    if(n.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	37	None	replace
619	[BUG]  [BUGGY]  }  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	37	None	replace
620	[BUG]  [BUGGY]  }  else  if(n.name!=  null  ||  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null  ||  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null  ||  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat	  }    else    if(n.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	37	None	replace
621	[BUG]  [BUGGY]  }  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flatten	  }    else    if(n.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	37	None	replace
622	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	66	None	replace
623	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	66	None	replace
624	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToAppendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToAppendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToAppendPropForAlias(alias,  p.name);  }	  For(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
625	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenPropForAlias(alias,  p.name);  }	  For(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
626	[BUG]  [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	22	None	replace
627	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  appendPropForAlias(alias,  p.name));  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  appendPropForAlias(alias,  p.name));  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  appendPropForAlias(alias,  p.name));  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	40	None	replace
628	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	110	None	replace
629	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	110	None	replace
630	[BUG]  [BUGGY]  Name  p  :  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
631	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
632	[BUG]  [BUGGY]  Name  p  :  n.props,  appendPropForAlias(alias,  propAlias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props,  appendPropForAlias(alias,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props,  appendPropForAlias(alias,  propAlias);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
633	[BUG]  [BUGGY]  }  else  if(n.props!=  null  ||  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null  ||  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null  ||  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props    ==    null    ||    p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	129	None	replace
634	[BUG]  [BUGGY]  }  else  if(n.props  ==  null  ||  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null  ||  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null  ||  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props    ==    null    ||    p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	129	None	replace
635	[BUG]  [BUGGY]  }  else  if(n.props.getName().equals(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.getName().equals(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.getName().equals(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(p.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	36	None	replace
636	[BUG]  [BUGGY]  }  else  if(n.props.getType()  ==  Token.NAME)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.getType()  ==  Token.NAME)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.getType()  ==  Token.NAME)  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(p.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	36	None	replace
637	[BUG]  [BUGGY]  }  else  if(n.props.getName().equals(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.getName().equals(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.getName().equals(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(p.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	36	None	replace
638	[BUG]  [BUGGY]  }  else  if(n.props.containsKey(propAlias)||  n.props.containsKey(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.containsKey(propAlias)||  n.props.containsKey(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.containsKey(propAlias)||  n.props.containsKey(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props.containsKey(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	115	None	replace
639	[BUG]  [BUGGY]  }  else  if(p.node.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.node.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.node.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	48	None	replace
640	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
641	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.re  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.re  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.re	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
642	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
643	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
644	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCode  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCode  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCode	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
645	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
646	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
647	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
648	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(alias,  p.name,  flattenReferencesToCollapsibleDescendantNames(n));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(alias,  p.name,  flattenReferencesToCollapsibleDescendantNames(n));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(alias,  p.name,  flattenReferencesToCollapsibleDescendantNames(n));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
649	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n.name,  alias,  flattenReferencesToCollapsibleDescendantNames(propAlias));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
650	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  flattenReferencesToCollapsibleDescendantNames(p));  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  flattenReferencesToCollapsibleDescendantNames(p));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n.name,  alias,  flattenReferencesToCollapsibleDescendantNames(p));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
651	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
652	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
653	[BUG]  [BUGGY]  For(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
654	[BUG]  [BUGGY]  Preconditions.checkArgument(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkArgument(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkArgument(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
655	[BUG]  [BUGGY]  Context.checkState(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Context.checkState(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Context.checkState(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
656	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null)  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props!=  null)  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props!=  null)  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
657	[BUG]  [BUGGY]  appendNameForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendNameForAlias(alias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendNameForAlias(alias,  p.name);	  appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
658	[BUG]  [BUGGY]  appendStringForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendStringForAlias(alias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendStringForAlias(alias,  p.name);	  appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
659	[BUG]  [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.containsKey(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    appendPropForAlias(alias,    p.name));    }    	non-compiled	[CE]  not  a  statement	73	None	replace
660	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    appendPropForAlias(alias,    p.name));    }    	non-compiled	[CE]  not  a  statement	73	None	replace
661	[BUG]  [BUGGY]  For(Name  p  :  n.name)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.name)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.name)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    propAlias);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
662	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props.getName();    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
663	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  Name  p  =  n.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props.getName();    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
664	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  String  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  String  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  String  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props.getName();    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
665	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  String  propAlias  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  String  propAlias  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  String  propAlias  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props.getName();    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
666	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
667	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
668	[BUG]  [BUGGY]  if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	72	None	replace
669	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flat	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	72	None	replace
670	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
671	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
672	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
673	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferences    	non-compiled	[CE]  not  a  statement	125	None	replace
674	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferences    	non-compiled	[CE]  not  a  statement	125	None	replace
675	[BUG]  [BUGGY]  }  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null  &&  n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.equals(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
676	[BUG]  [BUGGY]  }  else  if(n.name!=  null  ||  n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null  ||  n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null  ||  n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.equals(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
677	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.equals(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
678	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.equals(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
679	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias))  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.equals(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
680	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesToAppendAlias(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesToAppendAlias(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesToAppendAlias(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(!p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
681	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(propAlias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
682	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propA    	non-compiled	[CE]  not  a  statement	62	None	replace
683	[BUG]  [BUGGY]  parent.flattenReferencesTo(p,  propAlias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  parent.flattenReferencesTo(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	parent.flattenReferencesTo(p,  propAlias);	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
684	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  String  propAlias  =  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canCollapse())  {  String  propAlias  =  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  String  propAlias  =  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props;    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
685	[BUG]  [BUGGY]  parent.replaceChild(n,  propAlias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  parent.replaceChild(n,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	parent.replaceChild(n,  propAlias);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
686	[BUG]  [BUGGY]  AppendPropForAlias(alias,  n.name);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  n.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  n.name);	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
687	[BUG]  [BUGGY]  Preconditions.checkArgument(n.props  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkArgument(n.props  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkArgument(n.props  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
688	[BUG]  [BUGGY]  Preconditions.checkArgument(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkArgument(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkArgument(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
689	[BUG]  [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendant    	non-compiled	[CE]  not  a  statement	127	None	replace
690	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
691	[BUG]  [BUGGY]  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
692	[BUG]  [BUGGY]  if(n.props  ==  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
693	[BUG]  [BUGGY]  if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	61	None	replace
694	[BUG]  [BUGGY]  Pentru(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Pentru(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pentru(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
695	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	88	None	replace
696	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescend	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	103	None	replace
697	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
698	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  flattenReferencesForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
699	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  appendRepForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  appendRepForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  appendRepForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
700	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	72	None	replace
701	[BUG]  [BUGGY]  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	72	None	replace
702	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	72	None	replace
703	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	72	None	replace
704	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
705	[BUG]  [BUGGY]  Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
706	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
707	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	108	None	replace
708	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	108	None	replace
709	[BUG]  [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	31	None	replace
710	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  }	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	31	None	replace
711	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
712	[BUG]  [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	81	None	replace
713	[BUG]  [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	83	None	replace
714	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantName    	non-compiled	[CE]  not  a  statement	83	None	replace
715	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendant	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
716	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
717	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
718	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
719	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name))  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name))  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name))  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
720	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias	  if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
721	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferences    	non-compiled	[CE]  not  a  statement	70	None	replace
722	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	110	None	replace
723	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	110	None	replace
724	[BUG]  [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAl    	non-compiled	[CE]  not  a  statement	75	None	replace
725	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse()  ||  appendPropForAlias(alias,  p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse()  ||  appendPropForAlias(alias,  p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse()  ||  appendPropForAlias(alias,  p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
726	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
727	[BUG]  [BUGGY]  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props    ==    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	131	None	replace
728	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props    ==    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	131	None	replace
729	[BUG]  [BUGGY]  if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props    ==    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	131	None	replace
730	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props    ==    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	131	None	replace
731	[BUG]  [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	20	None	replace
732	[BUG]  [BUGGY]  if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
733	[BUG]  [BUGGY]  if(n.props  ==  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props  ==  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
734	[BUG]  [BUGGY]  if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCOLlapsibleDescendantNames  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCOLlapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCOLlapsibleDescendantNames	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
735	[BUG]  [BUGGY]  if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  }	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
736	[BUG]  [BUGGY]  if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToHorizontalDescendantNames  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToHorizontalDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToHorizontalDescendantNames	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	4	None	replace
737	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	21	None	replace
738	[BUG]  [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	21	None	replace
739	[BUG]  [BUGGY]  }  else  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	128	None	replace
740	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props;    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
741	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props;    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
742	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
743	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  else  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  else  {  compiler.reportCodeChange();  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
744	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange()  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange()  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange()	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	121	None	replace
745	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	56	None	replace
746	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	89	None	replace
747	[BUG]  [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	89	None	replace
748	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	92	None	replace
749	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsible  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsible  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsible	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	92	None	replace
750	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse()  ||  p.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse()  ||  p.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse()  ||  p.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
751	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
752	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
753	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
754	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!p.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    Name    p    =    p.props.getName();    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
755	[BUG]  [BUGGY]  Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	5	None	replace
756	[BUG]  [BUGGY]  Name  p  :  n.props.clone())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props.clone())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props.clone())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	5	None	replace
757	[BUG]  [BUGGY]  Name  p  :  n.props.values())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props.values())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props.values())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	5	None	replace
758	[BUG]  [BUGGY]  Name  p  :  n.props.values())  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props.values())  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props.values())  {  flattenReferencesTo(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	5	None	replace
759	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
760	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
761	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p.name  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p.name  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p.name	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
762	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p.  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p.  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p.	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
763	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
764	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  appendPropForAlias(alias,  p	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    refs.put(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
765	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  Name  p  :  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  Name  p  :  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  Name  p  :  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
766	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	80	None	replace
767	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenRe  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	80	None	replace
768	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenRe  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  FlattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	80	None	replace
769	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
770	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
771	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
772	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name))  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name))  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name))  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
773	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
774	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
775	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	26	None	replace
776	[BUG]  [BUGGY]  }  else  if(n.props.hasName(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.hasName(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.hasName(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(p.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	36	None	replace
777	[BUG]  [BUGGY]  }  else  if(n.props.getName().endsWith(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.getName().endsWith(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.getName().endsWith(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(p.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	36	None	replace
778	[BUG]  [BUGGY]  }  else  if(n.props.getName().endsWith(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.getName().endsWith(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.getName().endsWith(propAlias))  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(p.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	36	None	replace
779	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null  &&  n.props.length  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props!=  null  &&  n.props.length  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props!=  null  &&  n.props.length  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
780	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias)&&  n.props.contains(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias)&&  n.props.contains(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias)&&  n.props.contains(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if	  }    else    if(n.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	37	None	replace
781	[BUG]  [BUGGY]  }  else  if(n.name!=  null  &&  n.name.length()  >  0)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null  &&  n.name.length()  >  0)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null  &&  n.name.length()  >  0)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	65	None	replace
782	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	100	None	replace
783	[BUG]  [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	100	None	replace
784	[BUG]  [BUGGY]  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	100	None	replace
785	[BUG]  [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	32	None	replace
786	[BUG]  [BUGGY]  }  else  if(p.name.startsWith(propAlias))  {  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.name.startsWith(propAlias))  {  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.name.startsWith(propAlias))  {  appendPropForAlias(alias,  n.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.name.startsWith(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
787	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	126	None	replace
788	[BUG]  [BUGGY]  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	126	None	replace
789	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	126	None	replace
790	[BUG]  [BUGGY]  }  else  if(n.props!=  null  &&  n.props.contains(propAlias))  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null  &&  n.props.contains(propAlias))  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null  &&  n.props.contains(propAlias))  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
791	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesToAppendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesToAppendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesToAppendPropForAlias(alias,  p.name);  }	  for(Name    p    :    n.props)    {    if(!p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
792	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  appendPropForAlias(alias,  p.name));  }	  for(Name    p    :    n.props)    {    if(!p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
793	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null);  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props!=  null);  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props!=  null);  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props    ==    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
794	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null);  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props!=  null);  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props!=  null);  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Preconditions.checkState(n.props    ==    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
795	[BUG]  [BUGGY]  Name  p  :  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  Preconditions.checkState(n.props    ==    null);    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
796	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	95	None	replace
797	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	95	None	replace
798	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	95	None	replace
799	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	95	None	replace
800	[BUG]  [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAl    	non-compiled	[CE]  not  a  statement	78	None	replace
801	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	107	None	replace
802	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  if(n.props  ==  null)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	107	None	replace
803	[BUG]  [BUGGY]  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.name!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props!=    null)    {    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	107	None	replace
804	[BUG]  [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	98	None	replace
805	[BUG]  [BUGGY]  if(p.canCollapse())  {  for(Name  n  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  if(p.canCollapse())  {  for(Name  n  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  for(Name  n  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	98	None	replace
806	[BUG]  [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
807	[BUG]  [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
808	[BUG]  [BUGGY]  Preconditions.checkState(p.canCollapse();  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(p.canCollapse();  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(p.canCollapse();  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
809	[BUG]  [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
810	[BUG]  [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
811	[BUG]  [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props.containsKey(propAlias));  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
812	[BUG]  [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Preconditions.checkState(n.props.containsKey(propAlias));  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props.containsKey(propAlias));  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	  if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    else    {    appendPropForAlias(alias,    p.name);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
813	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  appendPropForAlias(alias,  p.name));  }	  else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
814	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }	  else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
815	[BUG]  [BUGGY]  else  if(p.canCollapse()  ||  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(p.canCollapse()  ||  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse()  ||  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	90	None	replace
816	[BUG]  [BUGGY]  }  else  if(n.props!=  null  &&  n.props.length  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null  &&  n.props.length  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null  &&  n.props.length  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	71	None	replace
817	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	71	None	replace
818	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	71	None	replace
819	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
820	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  For(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
821	[BUG]  [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	48	None	replace
822	[BUG]  [BUGGY]  }  else  if(n.props.contains(propAlias))  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.contains(propAlias))  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.contains(propAlias))  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	48	None	replace
823	[BUG]  [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	106	None	replace
824	[BUG]  [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.name!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	106	None	replace
825	[BUG]  [BUGGY]  ForName  p  :  n.props.values())  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  ForName  p  :  n.props.values())  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	ForName  p  :  n.props.values())  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  for(Name    p    :    n.props)    {    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	119	None	replace
826	[BUG]  [BUGGY]  appendPropForAlias(alias,  p.name,  p.type);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendPropForAlias(alias,  p.name,  p.type);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendPropForAlias(alias,  p.name,  p.type);	  appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
827	[BUG]  [BUGGY]  appendDescriptorForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  appendDescriptorForAlias(alias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendDescriptorForAlias(alias,  p.name);	  appendPropForAlias(alias,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
828	[BUG]  [BUGGY]  Name  p  :  n.props,  appendPropForAlias(alias,  p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props,  appendPropForAlias(alias,  p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props,  appendPropForAlias(alias,  p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	59	None	replace
829	[BUG]  [BUGGY]  }  else  if(!n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
830	[BUG]  [BUGGY]  else  if(n.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
831	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
832	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
833	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo(p,	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
834	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props.getName();    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	38	None	replace
835	[BUG]  [BUGGY]  }  else  if(n.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canInline())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
836	[BUG]  [BUGGY]  }  else  if(n.props.isCollapsed())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.isCollapsed())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.isCollapsed())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
837	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props.canCollapse())    {    Name    p    =    n.props;    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
838	[BUG]  [BUGGY]  Name  p  :  n.props.clone())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props.clone())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props.clone())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	84	None	replace
839	[BUG]  [BUGGY]  Name  p  :  n.props.clone())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props.clone())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props.clone())  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames    	non-compiled	[CE]  not  a  statement	84	None	replace
840	[BUG]  [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
841	[BUG]  [BUGGY]  Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	82	None	replace
842	[BUG]  [BUGGY]  Name  p  :  n.props.clone())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props.clone())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props.clone())  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	82	None	replace
843	[BUG]  [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.containsKey(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.containsKey(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	115	None	replace
844	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(propAlias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
845	[BUG]  [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.startsWith(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(propAlias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
846	[BUG]  [BUGGY]  }  else  if(n.props!=  null  &&  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props!=  null  &&  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null  &&  n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props    ==    null    ||    p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	129	None	replace
847	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  :  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  :  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  Name  p  :  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null    ||    p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	129	None	replace
848	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    propAlias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenRe    	non-compiled	[CE]  not  a  statement	22	None	replace
849	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  appendRepForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.canCollapse())  {  appendRepForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  appendRepForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	91	None	replace
850	[BUG]  [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.startsWith(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    appendPropForAlias(alias,    p.name));    }    	non-compiled	[CE]  not  a  statement	73	None	replace
851	[BUG]  [BUGGY]  }  else  if(!n.props.isEmpty())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(!n.props.isEmpty())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!n.props.isEmpty())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	111	None	replace
852	[BUG]  [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(n.props.canCollapse())    {    for(Name    p    :    p.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	101	None	replace
853	[BUG]  [BUGGY]  Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props.values())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
854	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  p.name);  }	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
855	[BUG]  [BUGGY]  Name  p  :  n.props,  appendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props,  appendPropForAlias(alias,  p.name);  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props,  appendPropForAlias(alias,  p.name);	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
856	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name);  }	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
857	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  propAlias);  }	  Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
858	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias)||  n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.name.equals(propAlias)||  n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias)||  n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.name.equals(propAlias))    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
859	[BUG]  [BUGGY]  }  else  if(p.canCollapse()  ||  appendPropForAlias(alias,  p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse()  ||  appendPropForAlias(alias,  p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse()  ||  appendPropForAlias(alias,  p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
860	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
861	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
862	[BUG]  [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.containsKey(propAlias))  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(!p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	40	None	replace
863	[BUG]  [BUGGY]  Pentru(Name  n  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  Pentru(Name  n  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pentru(Name  n  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  Pentru(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	49	None	replace
864	[BUG]  [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	67	None	replace
865	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(alias.name,  p.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(alias.name,  p.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(alias.name,  p.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
866	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n.name,  propAlias,  flattenReferencesToCollapsibleDescendantNames(p));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AssertionFailedToInlineAlias(n.name,  propAlias,  flattenReferencesToCollapsibleDescendantNames(p));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n.name,  propAlias,  flattenReferencesToCollapsibleDescendantNames(p));	  AssertionFailedToInlineAlias(n.name,    p.name,    flattenReferencesToCollapsibleDescendantNames(propAlias));    	non-compiled	[CE]  not  a  statement	113	None	replace
867	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	96	None	replace
868	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleD  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleD  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)&&  p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleD	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	96	None	replace
869	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,  propA  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,  propA  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,  propA	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	96	None	replace
870	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,  prop  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,  prop  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,  prop	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	96	None	replace
871	[BUG]  [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AppendPropForAlias(alias,  p.name)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,	  if(p.canCollapse())    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	96	None	replace
872	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias,  p.name);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias,  p.name);  }  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias,  p.name);  }	  For(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantsNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	114	None	replace
873	[BUG]  [BUGGY]  compiler.report(JSError.make(n,  UNSAFE_NAMESPACE_WARNING,  propAlias));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(n,  UNSAFE_NAMESPACE_WARNING,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(n,  UNSAFE_NAMESPACE_WARNING,  propAlias));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
874	[BUG]  [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNSAFE_THIS,  propAlias));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(sourceName,  n,  UNSAFE_THIS,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(sourceName,  n,  UNSAFE_THIS,  propAlias));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
875	[BUG]  [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  n.name));  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  n.name));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(NAMESPACE_REDEFINED_WARNING,  n.name));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
876	[BUG]  [BUGGY]  compiler.report(JSError.make(n,  UNSAFE_THIS,  propAlias));  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);      [BUGGY]  compiler.report(JSError.make(n,  UNSAFE_THIS,  propAlias));  [BUGGY]      }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.report(JSError.make(n,  UNSAFE_THIS,  propAlias));	  compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	97	None	replace
