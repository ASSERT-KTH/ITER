bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
2	[BUG]  [BUGGY]  Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
3	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
4	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
5	[BUG]  [BUGGY]  Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
6	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  For(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  appendPropForAlias(alias,  propAlias);  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
7	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
8	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
9	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
10	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
11	[BUG]  [BUGGY]  }  else  if(p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canInline())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
12	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
13	[BUG]  [BUGGY]  }  else  if(p.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canRemove())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
14	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
15	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
16	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
17	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  Name  p  =  p.props.getName();  flattenReferencesTo(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
18	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  Name  p  =  p.props;  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
19	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	10	None	replace
20	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	10	None	replace
21	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	10	None	replace
22	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	10	None	replace
23	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	10	None	replace
24	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  for(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
25	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
26	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
27	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
28	[BUG]  [BUGGY]  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  }  else  {  flattenReferencesTo(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
29	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  if(!p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
30	[BUG]  [BUGGY]  appendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  appendPropForAlias(alias,  p.name);  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	appendPropForAlias(alias,  p.name);	      	non-compiled	[CE]  not  a  statement	6	None	replace
31	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
32	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
33	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
34	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
35	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props;  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
36	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
37	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
38	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  Name  p  =  n.props.getName();  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
39	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
40	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
41	[BUG]  [BUGGY]  }  else  if(p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canInline())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
42	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
43	[BUG]  [BUGGY]  }  else  if(p.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canRelapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
44	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
45	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
46	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
47	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
48	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  appendPropForAlias(alias,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
49	[BUG]  [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Pentru(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
50	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  Preconditions.checkState(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(n.props  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  Preconditions.checkState(n.props  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props  ==  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
53	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
54	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	11	None	replace
55	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	11	None	replace
56	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	11	None	replace
57	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	11	None	replace
58	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	9	None	replace
59	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
60	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	4	None	replace
61	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	4	None	replace
62	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propA	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	4	None	replace
63	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	4	None	replace
64	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
65	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
66	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
67	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
68	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
69	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
70	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	12	None	replace
71	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesTo(p,  prop	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	12	None	replace
72	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	5	None	replace
73	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  FlattenReferencesTo(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  appendPropForAlias(alias,  p.name));  }	  }    else    if(p.canCollapse())    {    FlattenReferencesTo(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  Preconditions.checkState(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Preconditions.checkState(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
75	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	5	None	replace
76	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	5	None	replace
77	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	5	None	replace
78	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAl	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	5	None	replace
79	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	5	None	replace
80	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	9	None	replace
81	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
82	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesTo	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
83	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
84	[BUG]  [BUGGY]  Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
85	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
86	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
87	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
88	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
89	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
90	[BUG]  [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	else  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
91	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
92	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
93	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
94	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
95	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
96	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
97	[BUG]  [BUGGY]  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  compiler.reportCodeChange();  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	compiler.reportCodeChange();	      	non-compiled	[CE]  not  a  statement	6	None	replace
98	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	12	None	replace
99	[BUG]  [BUGGY]  }  else  if(p.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canRelapse())  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
100	[BUG]  [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
101	[BUG]  [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.canCollapse())  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
102	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
103	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
104	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	4	None	replace
105	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	4	None	replace
106	[BUG]  [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  prop	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    prop    	non-compiled	[CE]  not  a  statement	12	None	replace
107	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAli	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	4	None	replace
108	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	4	None	replace
109	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenRe	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAli    	non-compiled	[CE]  not  a  statement	4	None	replace
110	[BUG]  [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(p.canCollapse())  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	9	None	replace
111	[BUG]  [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(n.props!=    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	9	None	replace
112	[BUG]  [BUGGY]  }  else  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(!p.canCollapse())  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
113	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n.name,  p.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  AssertionFailedToInlineAlias(n.name,  p.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n.name,  p.name,  flattenReferencesToCollapsibleDescendantNames(propAlias));	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
114	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
115	[BUG]  [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props.containsKey(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
116	[BUG]  [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.startsWith(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
117	[BUG]  [BUGGY]  }  else  if(n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.name.equals(propAlias))  {  appendPropForAlias(alias,  p.name);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    appendPropForAlias(alias,    p.name);    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
118	[BUG]  [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  n.name));  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  n.name));  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	AssertionFailedToInlineAlias(n.name,  alias,  appendPropForAlias(alias,  n.name));	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
119	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  for(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	for(Name  p  :  n.props)  {  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
120	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  appendPropForAlias(alias,  p.name);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
121	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  compiler.reportCodeChange();  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
122	[BUG]  [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  refs.put(alias,  p.name);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
123	[BUG]  [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
124	[BUG]  [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props  ==  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendantName	  if(n.props!=    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
125	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  String  alias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferences	  }    else    if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    String    alias    =    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo    	non-compiled	[CE]  not  a  statement	10	None	replace
126	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlia	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlia    	non-compiled	[CE]  not  a  statement	5	None	replace
127	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if(p.canCollapse())  {  flattenReferencesToCollapsibleDescendant	  if(n.props    ==    null)    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if(p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
128	[BUG]  [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props!=  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
129	[BUG]  [BUGGY]  }  else  if(n.props  ==  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null  ||  p.canCollapse())  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
130	[BUG]  [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  {  for(Name  p  :  n.props)  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
131	[BUG]  [BUGGY]  }  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);    [BUGGY]  }  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]    }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	306	306	8	replace	}  else  if(n.props  ==  null)  {  if(p.canCollapse())  {  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesToCollapsibleDescendantNames	  }    else    if(p.canCollapse())    {    for(Name    p    :    n.props)    {    appendPropForAlias(alias,    p.name);    if    (p.canCollapse())    {    flattenReferencesTo(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	1	None	replace
