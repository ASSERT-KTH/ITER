bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]  if  (p.canCollapseTo(propAlias))  {  [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias))  {	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
2	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  ==  0)  {  [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.length()  ==  0)  {	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
3	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(p.name))  {  [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(p.name))  {	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
4	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]          AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()!=  0)  {  [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.length()!=  0)  {	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
5	[BUG]  [BUGGY]    [CE]  not  a  statement  [FE]            AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]    [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	  	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
6	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]  if  (p.canCollapse()  ||  propAlias!=  null)  {  [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias!=  null)  {	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
7	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]  if  (p.canCollapse()  &&  propAlias!=  null)  {  [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias!=  null)  {	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
8	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated())  {  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]  if  (p.canCollapseUnannotated())  {  [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated())  {	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
9	[BUG]  [BUGGY]  if  (p.canInline())  {  [CE]  not  a  statement  [FE]          AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]  if  (p.canInline())  {  [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline())  {	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
10	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]            AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]  if  (p.canCollapse()  ||  propAlias  ==  null)  {  [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias  ==  null)  {	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
11	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
12	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames())  {	if  (p.canCollapse())  {  	non-compiled	[CE]  not  a  statement	78	None	replace
