bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias!=  null)  {	  if    (propAlias.canCollapse()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
2	[BUG]  [BUGGY]  if  (!propAlias.canCollapse()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!propAlias.canCollapse()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!propAlias.canCollapse()  ||  propAlias!=  null)  {	  if    (propAlias.canCollapse()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
3	[BUG]  [BUGGY]  if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >=  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    >=    0)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
4	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()!=  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    >=    0)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
5	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias.equals(appendPropForAlias(alias,  p.name))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name))    {    	non-compiled	[CE]  not  a  statement	79	None	replace
6	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name))    {    	non-compiled	[CE]  not  a  statement	79	None	replace
7	[BUG]  [BUGGY]  if  (n.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (n.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (n.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name))    {    	non-compiled	[CE]  not  a  statement	79	None	replace
8	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  appendPropForAlias(alias,  p.name))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  appendPropForAlias(alias,  p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  appendPropForAlias(alias,  p.name))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name))    {    	non-compiled	[CE]  not  a  statement	79	None	replace
9	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias.equals(propAlias))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  propAlias.equals(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias.equals(propAlias))  {	  if    (p.canInline()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	36	None	replace
10	[BUG]  [BUGGY]  if  (propAlias.canInline()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canInline()  ||  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canInline()  ||  propAlias.equals(p.name))  {	  if    (p.canInline()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	36	None	replace
11	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias.equals(alias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  propAlias.equals(alias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias.equals(alias))  {	  if    (p.canInline()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	36	None	replace
12	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
13	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
14	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias  >=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias  >=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias  >=  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
15	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
16	[BUG]  [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {	  if    (propAlias.canCollapse()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	23	None	replace
17	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.length()  ==  1)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.length()  ==  1)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.length()  ==  1)  {	  if    (propAlias.canCollapse()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	23	None	replace
18	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  &&  propAlias.length()  ==  0)  {	  if    (propAlias.canCollapse()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	23	None	replace
19	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
20	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
21	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
22	[BUG]  [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
23	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendants(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
24	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias  ==  null)  {	  if    (p.canInline()    &&    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
25	[BUG]  [BUGGY]  if  (propAlias.canInline()  &&  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canInline()  &&  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canInline()  &&  propAlias  ==  null)  {	  if    (p.canInline()    &&    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
26	[BUG]  [BUGGY]  if  (!p.canInline()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canInline()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canInline()  &&  propAlias!=  null)  {	  if    (p.canInline()    &&    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
27	[BUG]  [BUGGY]  if  (!p.canCollapseTo(propAlias)&&  collapsePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseTo(propAlias)&&  collapsePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseTo(propAlias)&&  collapsePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)&&    collapsePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
28	[BUG]  [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)&&  collapsePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)&&  collapsePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)&&  collapsePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)&&    collapsePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
29	[BUG]  [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)&&  propAlias)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)&&  propAlias)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)&&  propAlias)  {	  if    (p.canCollapseTo(propAlias)&&    collapsePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
30	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	82	None	replace
31	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	82	None	replace
32	[BUG]  [BUGGY]  propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	82	None	replace
33	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	82	None	replace
34	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	82	None	replace
35	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	82	None	replace
36	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  propAlias  ==  null)  {	  if    (p.canCollapseUnannotated()    ||    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
37	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	63	None	replace
38	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias  ==  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	63	None	replace
39	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	63	None	replace
40	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  p.canCollapseUnannotatedDescendantNames!=  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  p.canCollapseUnannotatedDescendantNames!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  &&  p.canCollapseUnannotatedDescendantNames!=  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	63	None	replace
41	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  &&  p.canCollapseUnannotatedDescendantNames())  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	63	None	replace
42	[BUG]  [BUGGY]  propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAli    	non-compiled	[CE]  not  a  statement	85	None	replace
43	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
44	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
45	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
46	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
47	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
48	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.length()  >  0)  {	  if    (p.canCollapse()    ||    propAlias.length()    >=    0)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
49	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.length()  >=  0)  {	  if    (p.canCollapse()    ||    propAlias.length()    >=    0)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
50	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  &&  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias.length()  >=  0)  {	  if    (p.canCollapse()    ||    propAlias.length()    >=    0)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
51	[BUG]  [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    propAlias)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    p.name);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
52	[BUG]  [BUGGY]  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    propAlias)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    p.name);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
53	[BUG]  [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(prop.name,  p.name);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(prop.name,  p.name);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(prop.name,  p.name);  }	  if(propAlias!=    null)    {    for(Name    p    :    propAlias)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    p.name);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
54	[BUG]  [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }	  if(propAlias!=    null)    {    for(Name    p    :    propAlias)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    p.name);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
55	[BUG]  [BUGGY]  if(propAlias.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
56	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias  ==  null  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  ||  propAlias  ==  null  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias  ==  null  &&  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
57	[BUG]  [BUGGY]  if(propAlias!=  null  &&  p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  &&  p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  &&  p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
58	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  >  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
59	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  >=  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
60	[BUG]  [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collidePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collidePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collidePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collidePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
61	[BUG]  [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collapsePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collapsePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collapsePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collidePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
62	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)&&  collidePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseTo(propAlias)&&  collidePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)&&  collidePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collidePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
63	[BUG]  [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(p)||  collidePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(p)||  collidePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (collapsePropertiesOnExternTypes.canCollapseTo(p)||  collidePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collidePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
64	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {	  if(!p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
65	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {	  if(!p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
66	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {	  if(!p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
67	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {	  if(!p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
68	[BUG]  [BUGGY]  if(!p.exists()  &&!p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.exists()  &&!p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.exists()  &&!p.canCollapseUnannotatedDescendantNames())  {	  if(!p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
69	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&!propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&!propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  &&!propAlias.equals(p.name))  {	  if(!p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
70	[BUG]  [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias.length()!=  0)  {	  if    (propAlias.canCollapse()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	49	None	replace
71	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  For(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	For(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
72	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
73	[BUG]  [BUGGY]  Pentru(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Pentru(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Pentru(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
74	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(propAlias,  propAlias);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(propAlias,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(propAlias,  propAlias);	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
75	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(propAlias);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(propAlias);	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
76	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	76	None	replace
77	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	76	None	replace
78	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	76	None	replace
79	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlia  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlia  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlia	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	76	None	replace
80	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	76	None	replace
81	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  n.props.contains(propAlias))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  n.props.contains(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  n.props.contains(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.contains(propAlias))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
82	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  p.props.contains(propAlias))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  p.props.contains(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  ||  p.props.contains(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.contains(propAlias))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
83	[BUG]  [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.contains(propAlias))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
84	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  n.props.contains(propAlias))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  n.props.contains(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  ||  n.props.contains(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.contains(propAlias))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
85	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.contains(p.props))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.contains(p.props))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.contains(p.props))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.contains(propAlias))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
86	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.contains(n.props))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.contains(n.props))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.contains(n.props))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.contains(propAlias))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
87	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  n.props.containsKey(propAlias))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  n.props.containsKey(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  n.props.containsKey(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.containsKey(propAlias))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
88	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  p.props.containsKey(propAlias))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  p.props.containsKey(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  ||  p.props.containsKey(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.containsKey(propAlias))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
89	[BUG]  [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames()  ||  p.props.containsKey(propAlias))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames()  ||  p.props.containsKey(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames()  ||  p.props.containsKey(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.containsKey(propAlias))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
90	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  n.props.containsKey(propAlias))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  n.props.containsKey(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  ||  n.props.containsKey(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.containsKey(propAlias))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
91	[BUG]  [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.containsKey(propAlias))  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.containsKey(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.containsKey(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.containsKey(propAlias))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
92	[BUG]  [BUGGY]  if(propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(propAlias!=    null    ||    p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	19	None	replace
93	[BUG]  [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {	  if(propAlias!=    null    ||    p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	19	None	replace
94	[BUG]  [BUGGY]  if(propAlias  ==  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias  ==  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias  ==  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(propAlias!=    null    ||    p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	19	None	replace
95	[BUG]  [BUGGY]  if(p!=  null  ||  propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p!=  null  ||  propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p!=  null  ||  propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(propAlias!=    null    ||    p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	19	None	replace
96	[BUG]  [BUGGY]  if(p!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(propAlias!=    null    ||    p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	19	None	replace
97	[BUG]  [BUGGY]  if  (p.name.equals(propAlias)||  propAlias.canCollapse()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.name.equals(propAlias)||  propAlias.canCollapse()  ||  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.name.equals(propAlias)||  propAlias.canCollapse()  ||  propAlias.equals(p.name))  {	  if    (propAlias.canCollapse()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
98	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  &&  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  &&  propAlias.equals(p.name))  {	  if    (propAlias.canCollapse()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
99	[BUG]  [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias.length()    ==    0)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
100	[BUG]  [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	For(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias.length()    ==    0)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
101	[BUG]  [BUGGY]  if(propAlias.length()!=  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.length()!=  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.length()!=  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias.length()    ==    0)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
102	[BUG]  [BUGGY]  if(propAlias.length()  ==  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.length()  ==  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.length()  ==  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(propAlias.length()    ==    0)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
103	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.equals(propAlias))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.equals(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  propAlias.equals(propAlias))  {	  if    (p.canCollapseUnannotated()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
104	[BUG]  [BUGGY]  if  (propAlias.canCollapseUnannotated()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseUnannotated()  &&  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseUnannotated()  &&  propAlias.equals(p.name))  {	  if    (p.canCollapseUnannotated()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
105	[BUG]  [BUGGY]  if  (!p.canCollapseUnannotated()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseUnannotated()  &&  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseUnannotated()  &&  propAlias.equals(p.name))  {	  if    (p.canCollapseUnannotated()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
106	[BUG]  [BUGGY]  propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	84	None	replace
107	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	84	None	replace
108	[BUG]  [BUGGY]  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	84	None	replace
109	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendants(p,  propAlias);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendants(p,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendants(p,  propAlias);	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	84	None	replace
110	[BUG]  [BUGGY]  propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	84	None	replace
111	[BUG]  [BUGGY]  if(p.name.equals(propAlias)||  p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name.equals(propAlias)||  p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias)||  p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
112	[BUG]  [BUGGY]  if(p.name.equals(propAlias)||  propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name.equals(propAlias)||  propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias)||  propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
113	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(propAlias))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
114	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
115	[BUG]  [BUGGY]  if  (propAlias.canInline()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canInline()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canInline()  &&  propAlias!=  null)  {	  if    (p.canInline()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	51	None	replace
116	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(appendPropForAlias(alias,  p.name)))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(appendPropForAlias(alias,  p.name)))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias.equals(appendPropForAlias(alias,  p.name)))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name)))    {    	non-compiled	[CE]  not  a  statement	88	None	replace
117	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name)))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name)))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name)))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name)))    {    	non-compiled	[CE]  not  a  statement	88	None	replace
118	[BUG]  [BUGGY]  if  (!p.canCollapse()  &&  propAlias.equals(appendPropForAlias(alias,  p.name)))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapse()  &&  propAlias.equals(appendPropForAlias(alias,  p.name)))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapse()  &&  propAlias.equals(appendPropForAlias(alias,  p.name)))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name)))    {    	non-compiled	[CE]  not  a  statement	88	None	replace
119	[BUG]  [BUGGY]  if  (propAlias.canCollapseUnannotated()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseUnannotated()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseUnannotated()  ||  propAlias!=  null)  {	  if    (p.canCollapseUnannotated()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
120	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  &&  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  &&  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  &&  propAlias.length()!=  0)  {	  if    (p.canCollapse()    &&    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	50	None	replace
121	[BUG]  [BUGGY]  if  (!propAlias.canCollapse()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!propAlias.canCollapse()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!propAlias.canCollapse()  &&  propAlias!=  null)  {	  if    (propAlias.canCollapse()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	34	None	replace
122	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)&&!p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseTo(propAlias)&&!p.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)&&!p.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias)||!p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	15	None	replace
123	[BUG]  [BUGGY]  if  (p.canCollapseTo(alias)||!p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseTo(alias)||!p.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(alias)||!p.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias)||!p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	15	None	replace
124	[BUG]  [BUGGY]  if  (!p.canCollapseTo(propAlias)||!p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseTo(propAlias)||!p.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseTo(propAlias)||!p.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias)||!p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	15	None	replace
125	[BUG]  [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias  ==  null)  {	  if    (propAlias.canCollapse()    ||    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	31	None	replace
126	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()!=  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
127	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
128	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  >=  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
129	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
130	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  >  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
131	[BUG]  [BUGGY]  if  (propAlias.canInline()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canInline()  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canInline()  ||  propAlias.length()  ==  0)  {	  if    (p.canInline()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	37	None	replace
132	[BUG]  [BUGGY]  if  (p.canInline()  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  propAlias.length()  ==  0)  {	  if    (p.canInline()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	37	None	replace
133	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias.length()  ==  1)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  propAlias.length()  ==  1)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias.length()  ==  1)  {	  if    (p.canInline()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	37	None	replace
134	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias.length()  >=  0)  {	  if    (p.canInline()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	37	None	replace
135	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	83	None	replace
136	[BUG]  [BUGGY]  propAlias  =  appendPropForAlias(alias,  p.name);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  propAlias  =  appendPropForAlias(alias,  p.name);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	propAlias  =  appendPropForAlias(alias,  p.name);	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	83	None	replace
137	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	83	None	replace
138	[BUG]  [BUGGY]  if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  prop	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	83	None	replace
139	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	83	None	replace
140	[BUG]  [BUGGY]  if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	83	None	replace
141	[BUG]  [BUGGY]  if  (propAlias.canInline()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canInline()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canInline()  ||  propAlias!=  null)  {	  if    (p.canInline()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
142	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias  >=  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  propAlias  >=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias  >=  null)  {	  if    (p.canInline()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
143	[BUG]  [BUGGY]  if  (!p.canInline()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canInline()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canInline()  ||  propAlias!=  null)  {	  if    (p.canInline()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
144	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	81	None	replace
145	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(propAlias))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
146	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
147	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
148	[BUG]  [BUGGY]  if(p.name.equals(propAlias)&&  p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name.equals(propAlias)&&  p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias)&&  p.canCollapseUnannotatedDescendantNames())  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
149	[BUG]  [BUGGY]  if  (propAlias.canInline()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canInline()  ||  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canInline()  ||  propAlias.length()!=  0)  {	  if    (p.canInline()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	40	None	replace
150	[BUG]  [BUGGY]  if  (p.canInline()  &&  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  &&  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  propAlias.length()!=  0)  {	  if    (p.canInline()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	40	None	replace
151	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
152	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
153	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
154	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
155	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAli  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAli  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAli	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
156	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias.length()  >  0)  {	  if    (p.canCollapseUnannotated()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
157	[BUG]  [BUGGY]  if  (propAlias.canCollapseUnannotated()  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseUnannotated()  &&  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseUnannotated()  &&  propAlias.length()  >  0)  {	  if    (p.canCollapseUnannotated()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
158	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  propAlias.length()  ==  0)  {	  if    (p.canCollapseUnannotated()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
159	[BUG]  [BUGGY]  if  (!p.canCollapseUnannotated()  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseUnannotated()  &&  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseUnannotated()  &&  propAlias.length()  >  0)  {	  if    (p.canCollapseUnannotated()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
160	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  ==  2)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  ==  2)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.length()  ==  2)  {	  if    (p.canCollapse()    ||    propAlias.length()    ==    1)    {    	non-compiled	[CE]  not  a  statement	25	None	replace
161	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias.length()  ==  1)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  &&  propAlias.length()  ==  1)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias.length()  ==  1)  {	  if    (p.canCollapse()    ||    propAlias.length()    ==    1)    {    	non-compiled	[CE]  not  a  statement	25	None	replace
162	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  ==  1  &&  n.props.contains(propAlias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  ==  1  &&  n.props.contains(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.length()  ==  1  &&  n.props.contains(propAlias))  {	  if    (p.canCollapse()    ||    propAlias.length()    ==    1)    {    	non-compiled	[CE]  not  a  statement	25	None	replace
163	[BUG]  [BUGGY]  if  (!p.canCollapseTo(propAlias)&&!p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseTo(propAlias)&&!p.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseTo(propAlias)&&!p.canCollapseTo(propAlias))  {	  if    (!p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
164	[BUG]  [BUGGY]  if  (!p.canCollapseTo(propAlias)&&  n.props.contains(propAlias))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseTo(propAlias)&&  n.props.contains(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseTo(propAlias)&&  n.props.contains(propAlias))  {	  if    (!p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
165	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(propAlias))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias.equals(propAlias))  {	  if    (p.canCollapse()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	27	None	replace
166	[BUG]  [BUGGY]  if  (!p.canCollapse()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapse()  &&  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapse()  &&  propAlias.equals(p.name))  {	  if    (p.canCollapse()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	27	None	replace
167	[BUG]  [BUGGY]  if  (n.props.canCollapseTo(propAlias)||  p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (n.props.canCollapseTo(propAlias)||  p.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (n.props.canCollapseTo(propAlias)||  p.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias)||    n.props.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	16	None	replace
168	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)&&  n.props.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseTo(propAlias)&&  n.props.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)&&  n.props.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias)||    n.props.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	16	None	replace
169	[BUG]  [BUGGY]  if  (p.canCollapseTo(alias)||  n.props.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseTo(alias)||  n.props.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(alias)||  n.props.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias)||    n.props.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	16	None	replace
170	[BUG]  [BUGGY]  if  (!p.canCollapseTo(propAlias)||  n.props.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseTo(propAlias)||  n.props.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseTo(propAlias)||  n.props.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias)||    n.props.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	16	None	replace
171	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
172	[BUG]  [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	For(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
173	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {	  if(n.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
174	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {	  if(n.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
175	[BUG]  [BUGGY]  if(!n.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!n.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!n.canCollapseUnannotatedDescendantNames())  {	  if(n.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
176	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {	  if(n.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
177	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {	  if(n.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
178	[BUG]  [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collatePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collatePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collatePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collatePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
179	[BUG]  [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(p)||  collatePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(p)||  collatePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (collapsePropertiesOnExternTypes.canCollapseTo(p)||  collatePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collatePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
180	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)&&  collatePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseTo(propAlias)&&  collatePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)&&  collatePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collatePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
181	[BUG]  [BUGGY]  if(propAlias.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias    ==    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	18	None	replace
182	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()!=  0)  {	  if(p.canCollapse()    ||    propAlias    ==    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	18	None	replace
183	[BUG]  [BUGGY]  if(p.isCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.isCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.isCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias    ==    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	18	None	replace
184	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  >=  0)  {	  if(p.canCollapse()    ||    propAlias    ==    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	18	None	replace
185	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(propAlias,  p);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(propAlias,  p);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(propAlias,  p);	  FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	75	None	replace
186	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias,  n.props);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias,  n.props);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias,  n.props);	  FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	75	None	replace
187	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias,  n);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias,  n);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias,  n);	  FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	75	None	replace
188	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  alias);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  alias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  alias);	  FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	75	None	replace
189	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(propAlias,  p.name);	  FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	75	None	replace
190	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(p.property))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(p.property))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.equals(p.property))  {	  if    (p.canCollapse()    ||    propAlias.equals(propAlias))    {    	non-compiled	[CE]  not  a  statement	28	None	replace
191	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(propName))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(propName))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(propName))  {	  if    (p.canCollapse()    ||    propAlias.equals(propAlias))    {    	non-compiled	[CE]  not  a  statement	28	None	replace
192	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(p.collapseProperties))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(p.collapseProperties))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.equals(p.collapseProperties))  {	  if    (p.canCollapse()    ||    propAlias.equals(propAlias))    {    	non-compiled	[CE]  not  a  statement	28	None	replace
193	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
194	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  p.length()  >  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  &&  p.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  &&  p.length()  >  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
195	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  ==  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
196	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	86	None	replace
197	[BUG]  [BUGGY]  if  (!p.canCollapse()  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapse()  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapse()  &&  propAlias.length()  ==  0)  {	  if    (p.canCollapse()    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
198	[BUG]  [BUGGY]  propAlias  =  appendPropForAlias(alias,  propAlias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  propAlias  =  appendPropForAlias(alias,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	propAlias  =  appendPropForAlias(alias,  propAlias);	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
199	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
200	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(p);	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
201	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
202	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
203	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
204	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  p.canCollapseUnannotated())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  &&  p.canCollapseUnannotated())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  p.canCollapseUnannotated())  {	  if    (p.canCollapseUnannotated()    ||    p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	71	None	replace
205	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.canCollapseUnannotated())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.canCollapseUnannotated())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias.canCollapseUnannotated())  {	  if    (p.canCollapseUnannotated()    ||    p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	71	None	replace
206	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  p.canCollapseUnannotated()  ||  propAlias.isEmpty())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  ||  p.canCollapseUnannotated()  ||  propAlias.isEmpty())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  p.canCollapseUnannotated()  ||  propAlias.isEmpty())  {	  if    (p.canCollapseUnannotated()    ||    p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	71	None	replace
207	[BUG]  [BUGGY]  if(propAlias  ==  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias  ==  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias  ==  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    if(inlinePropertiesOnExternTypes)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
208	[BUG]  [BUGGY]  if(propAlias!=  null)  {  if(!inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  if(!inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  if(!inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    if(inlinePropertiesOnExternTypes)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
209	[BUG]  [BUGGY]  if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(propAlias!=    null)    {    if(inlinePropertiesOnExternTypes)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
210	[BUG]  [BUGGY]  if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  if(propAlias!=    null)    {    if(inlinePropertiesOnExternTypes)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
211	[BUG]  [BUGGY]  if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    if(inlinePropertiesOnExternTypes)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
212	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  appendPropForAlias(propAlias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  appendPropForAlias(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  appendPropForAlias(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    appendPropForAlias(propAlias))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
213	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    appendPropForAlias(propAlias))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
214	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    appendPropForAlias(propAlias))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
215	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(p))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(p))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(p))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    appendPropForAlias(propAlias))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
216	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(alias))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(alias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(alias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    appendPropForAlias(propAlias))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
217	[BUG]  [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    appendPropForAlias(propAlias))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
218	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  &&  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  &&  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  &&  propAlias  ==  null)  {	  if    (p.canCollapse()    &&    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	32	None	replace
219	[BUG]  [BUGGY]  if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    <    0)    {    	non-compiled	[CE]  not  a  statement	90	None	replace
220	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <=  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <=  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    <    0)    {    	non-compiled	[CE]  not  a  statement	90	None	replace
221	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  <  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  <  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  <  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    <    0)    {    	non-compiled	[CE]  not  a  statement	90	None	replace
222	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias.length()  >  0)  {	  if    (p.canInline()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
223	[BUG]  [BUGGY]  if  (propAlias.canInline()  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canInline()  &&  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canInline()  &&  propAlias.length()  >  0)  {	  if    (p.canInline()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
224	[BUG]  [BUGGY]  if  (!p.canInline()  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canInline()  &&  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canInline()  &&  propAlias.length()  >  0)  {	  if    (p.canInline()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
225	[BUG]  [BUGGY]  if  (propAlias.canInline()  &&  p.length()  >  0)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canInline()  &&  p.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canInline()  &&  p.length()  >  0)  {	  if    (p.canInline()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
226	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	87	None	replace
227	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	87	None	replace
228	[BUG]  [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(p)||  collapsePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(p)||  collapsePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (collapsePropertiesOnExternTypes.canCollapseTo(p)||  collapsePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collapsePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	56	None	replace
229	[BUG]  [BUGGY]  if  (!p.canCollapseTo(propAlias)||  collapsePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseTo(propAlias)||  collapsePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseTo(propAlias)||  collapsePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collapsePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	56	None	replace
230	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias.canInline())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  propAlias.canInline())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias.canInline())  {	  if    (p.canInline()    ||    p.canInline())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
231	[BUG]  [BUGGY]  if  (p.canInline()  ||  p.canInline()  ||  propAlias.canInline())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  p.canInline()  ||  propAlias.canInline())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  p.canInline()  ||  propAlias.canInline())  {	  if    (p.canInline()    ||    p.canInline())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
232	[BUG]  [BUGGY]  if  (p.canInline()  ||  p.canInline()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  p.canInline()  ||  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  p.canInline()  ||  propAlias.equals(p.name))  {	  if    (p.canInline()    ||    p.canInline())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
233	[BUG]  [BUGGY]  if  (p.canInline()  &&  p.canInline())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  &&  p.canInline())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  p.canInline())  {	  if    (p.canInline()    ||    p.canInline())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
234	[BUG]  [BUGGY]  if  (p.canInline()  ||  p.canInline()  ||  propAlias.isEmpty())  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  p.canInline()  ||  propAlias.isEmpty())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  p.canInline()  ||  propAlias.isEmpty())  {	  if    (p.canInline()    ||    p.canInline())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
235	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)&&  p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseTo(propAlias)&&  p.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)&&  p.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias)||    p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	13	None	replace
236	[BUG]  [BUGGY]  if  (p.canCollapseTo(alias)||  p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseTo(alias)||  p.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(alias)||  p.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias)||    p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	13	None	replace
237	[BUG]  [BUGGY]  if  (propAlias.canCollapseTo(p)||  p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseTo(p)||  p.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseTo(p)||  p.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias)||    p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	13	None	replace
238	[BUG]  [BUGGY]  if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	89	None	replace
239	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  >  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	89	None	replace
240	[BUG]  [BUGGY]  if  (p.canInline()  &&  propAlias.equals(propAlias))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  &&  propAlias.equals(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  propAlias.equals(propAlias))  {	  if    (p.canInline()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	39	None	replace
241	[BUG]  [BUGGY]  if  (propAlias.canInline()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canInline()  &&  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canInline()  &&  propAlias.equals(p.name))  {	  if    (p.canInline()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	39	None	replace
242	[BUG]  [BUGGY]  if  (!p.canInline()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canInline()  &&  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canInline()  &&  propAlias.equals(p.name))  {	  if    (p.canInline()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	39	None	replace
243	[BUG]  [BUGGY]  if  (!propAlias.canCollapseTo(p))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!propAlias.canCollapseTo(p))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!propAlias.canCollapseTo(p))  {	  if    (propAlias.canCollapseTo(p))    {    	non-compiled	[CE]  not  a  statement	60	None	replace
244	[BUG]  [BUGGY]  if  (propAlias.canCollapseTo(p)||  propAlias.isEmpty())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseTo(p)||  propAlias.isEmpty())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseTo(p)||  propAlias.isEmpty())  {	  if    (propAlias.canCollapseTo(p))    {    	non-compiled	[CE]  not  a  statement	60	None	replace
245	[BUG]  [BUGGY]  if  (propAlias.canCollapseTo(p)||  propAlias.equals( " "))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseTo(p)||  propAlias.equals( " "))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseTo(p)||  propAlias.equals( " "))  {	  if    (propAlias.canCollapseTo(p))    {    	non-compiled	[CE]  not  a  statement	60	None	replace
246	[BUG]  [BUGGY]  if(propAlias  ==  null  ||  propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias  ==  null  ||  propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias  ==  null  ||  propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {	  if(propAlias.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
247	[BUG]  [BUGGY]  if(propAlias.isCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.isCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.isCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(propAlias.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
248	[BUG]  [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	72	None	replace
249	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	72	None	replace
250	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlia  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlia  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlia	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	72	None	replace
251	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantsNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	72	None	replace
252	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	72	None	replace
253	[BUG]  [BUGGY]  if  (propAlias.canCollapseUnannotated()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseUnannotated()  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseUnannotated()  ||  propAlias.length()  ==  0)  {	  if    (p.canCollapseUnannotated()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
254	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.length()  ==  1)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.length()  ==  1)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias.length()  ==  1)  {	  if    (p.canCollapseUnannotated()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
255	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias.length()  >=  0)  {	  if    (p.canCollapseUnannotated()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
256	[BUG]  [BUGGY]  Name  p  =  n.props.equals(propAlias)?  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Name  p  =  n.props.equals(propAlias)?  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Name  p  =  n.props.equals(propAlias)?  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(p.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
257	[BUG]  [BUGGY]  Name  p  =  n.props.equals(propAlias)?  flattenReferencesToCollapsibleDescendantNames(p,  propAlias):  null;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Name  p  =  n.props.equals(propAlias)?  flattenReferencesToCollapsibleDescendantNames(p,  propAlias):  null;  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Name  p  =  n.props.equals(propAlias)?  flattenReferencesToCollapsibleDescendantNames(p,  propAlias):  null;	  if(p.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
258	[BUG]  [BUGGY]  if  (p.collapsePropertiesOnExternTypes  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.collapsePropertiesOnExternTypes  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.collapsePropertiesOnExternTypes  ||  propAlias!=  null)  {	  if    (p.collapsePropertiesOnExternTypes    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
259	[BUG]  [BUGGY]  if  (propAlias.collapsePropertiesOnExternTypes  &&  p.collapseProperties!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.collapsePropertiesOnExternTypes  &&  p.collapseProperties!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.collapsePropertiesOnExternTypes  &&  p.collapseProperties!=  null)  {	  if    (p.collapsePropertiesOnExternTypes    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
260	[BUG]  [BUGGY]  if  (propAlias.collapsePropertiesOnExternTypes  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.collapsePropertiesOnExternTypes  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.collapsePropertiesOnExternTypes  &&  propAlias!=  null)  {	  if    (p.collapsePropertiesOnExternTypes    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
261	[BUG]  [BUGGY]  if  (collapsePropertiesOnExternTypes  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (collapsePropertiesOnExternTypes  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (collapsePropertiesOnExternTypes  &&  propAlias!=  null)  {	  if    (p.collapsePropertiesOnExternTypes    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
262	[BUG]  [BUGGY]  if  (!p.canCollapse()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapse()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapse()  ||  propAlias!=  null)  {	  if    (!p.canCollapse()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	35	None	replace
263	[BUG]  [BUGGY]  if  (!p.canCollapse()  &&  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapse()  &&  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapse()  &&  propAlias  ==  null)  {	  if    (!p.canCollapse()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	35	None	replace
264	[BUG]  [BUGGY]  if  (!p.canCollapse()  &&  propAlias  >=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapse()  &&  propAlias  >=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapse()  &&  propAlias  >=  null)  {	  if    (!p.canCollapse()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	35	None	replace
265	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  propAlias.length()!=  0)  {	  if    (p.canCollapseUnannotated()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
266	[BUG]  [BUGGY]  if  (propAlias.canCollapseUnannotated()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseUnannotated()  ||  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseUnannotated()  ||  propAlias.length()!=  0)  {	  if    (p.canCollapseUnannotated()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
267	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
268	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  1)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  1)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  1)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
269	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.isEmpty())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.isEmpty())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.isEmpty())  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.isEmpty())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
270	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  p.isEmpty())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  p.isEmpty())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  ||  p.isEmpty())  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.isEmpty())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
271	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.isEmpty())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
272	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.isEmpty())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
273	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.isEmpty())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
274	[BUG]  [BUGGY]  if  (p.cancollapse()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.cancollapse()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.cancollapse()  &&  propAlias!=  null)  {	  if    (p.cancollapse()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
275	[BUG]  [BUGGY]  if  (p.cancollapse()  ||  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.cancollapse()  ||  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.cancollapse()  ||  propAlias  ==  null)  {	  if    (p.cancollapse()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
276	[BUG]  [BUGGY]  if  (propAlias.cancollapse()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.cancollapse()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.cancollapse()  ||  propAlias!=  null)  {	  if    (p.cancollapse()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
277	[BUG]  [BUGGY]  if  (p.cancollapse()  ||  propAlias  >=  null)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.cancollapse()  ||  propAlias  >=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.cancollapse()  ||  propAlias  >=  null)  {	  if    (p.cancollapse()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
278	[BUG]  [BUGGY]  if(propAlias.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {	  if(p.canCollapse()    &&    propAlias!=    null    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	78	None	replace
279	[BUG]  [BUGGY]  if(p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  >  0)  {	  if(p.canCollapse()    &&    propAlias!=    null    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	78	None	replace
280	[BUG]  [BUGGY]  if(p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  >=  0)  {	  if(p.canCollapse()    &&    propAlias!=    null    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	78	None	replace
281	[BUG]  [BUGGY]  if(!p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {	  if(p.canCollapse()    &&    propAlias!=    null    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	78	None	replace
282	[BUG]  [BUGGY]  if  (propAlias.canCollapseUnannotated()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseUnannotated()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseUnannotated()  &&  propAlias!=  null)  {	  if    (p.canCollapseUnannotated()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	69	None	replace
283	[BUG]  [BUGGY]  if  (!p.canCollapseUnannotated()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseUnannotated()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseUnannotated()  &&  propAlias!=  null)  {	  if    (p.canCollapseUnannotated()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	69	None	replace
284	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.equals(propAlias))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.equals(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias.equals(propAlias))  {	  if    (p.canCollapseUnannotated()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
285	[BUG]  [BUGGY]  if  (propAlias.canCollapseUnannotated()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseUnannotated()  ||  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseUnannotated()  ||  propAlias.equals(p.name))  {	  if    (p.canCollapseUnannotated()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
286	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.equals(n.name))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.equals(n.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias.equals(n.name))  {	  if    (p.canCollapseUnannotated()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
287	[BUG]  [BUGGY]  if(propAlias.canCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    &&    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
288	[BUG]  [BUGGY]  if(p.canCollapse()  &&  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  &&  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  &&  propAlias  ==  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    &&    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
289	[BUG]  [BUGGY]  if(!p.canCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    &&    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
290	[BUG]  [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >=  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    >=    0)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
291	[BUG]  [BUGGY]  if  (p.collapsePropertiesOnExternTypes  &&  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.collapsePropertiesOnExternTypes  &&  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.collapsePropertiesOnExternTypes  &&  propAlias  ==  null)  {	  if    (p.collapsePropertiesOnExternTypes    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
292	[BUG]  [BUGGY]  if  (collapsePropertiesOnExternTypes  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (collapsePropertiesOnExternTypes  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (collapsePropertiesOnExternTypes  ||  propAlias!=  null)  {	  if    (p.collapsePropertiesOnExternTypes    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
293	[BUG]  [BUGGY]  if  (p.canCollapseTo(alias)&&  collapsePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseTo(alias)&&  collapsePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(alias)&&  collapsePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)&&    collapsePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
294	[BUG]  [BUGGY]  if(n.props.containsKey(propAlias)||  p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props.containsKey(propAlias)||  p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props.containsKey(propAlias)||  p.canCollapseUnannotatedDescendantNames())  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.containsKey(propAlias))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
295	[BUG]  [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  propAlias.containsKey(p))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  propAlias.containsKey(p))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props.canCollapseUnannotatedDescendantNames()  ||  propAlias.containsKey(p))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.containsKey(propAlias))    {    	non-compiled	[CE]  not  a  statement	67	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
298	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
299	[BUG]  [BUGGY]  if  (p.canInline(propAlias)||  p.canInline())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline(propAlias)||  p.canInline())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline(propAlias)||  p.canInline())  {	  if    (p.canInline()    ||    p.canInline())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
300	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  propAlias.equals(appendPropForAlias(alias,  p.name))  {	  if    (p.canCollapseUnannotated()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
301	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.equals(n.name))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.equals(n.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  propAlias.equals(n.name))  {	  if    (p.canCollapseUnannotated()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
302	[BUG]  [BUGGY]  if  (propAlias!=  null  &&  propAlias.canCollapseTo(p))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias!=  null  &&  propAlias.canCollapseTo(p))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias!=  null  &&  propAlias.canCollapseTo(p))  {	  if    (propAlias.canCollapseTo(p))    {    	non-compiled	[CE]  not  a  statement	60	None	replace
303	[BUG]  [BUGGY]  if  (propAlias!=  null  &&  propAlias.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias!=  null  &&  propAlias.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias!=  null  &&  propAlias.canCollapseTo(propAlias))  {	  if    (propAlias.canCollapseTo(p))    {    	non-compiled	[CE]  not  a  statement	60	None	replace
304	[BUG]  [BUGGY]  if  (propAlias.canCollapseTo(p)||  collapsePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseTo(p)||  collapsePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseTo(p)||  collapsePropertiesOnExternTypes)  {	  if    (propAlias.canCollapseTo(p))    {    	non-compiled	[CE]  not  a  statement	60	None	replace
305	[BUG]  [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    <    0)    {    	non-compiled	[CE]  not  a  statement	90	None	replace
306	[BUG]  [BUGGY]  if(propAlias!=  null  ||  propAlias.length()  ==  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  ||  propAlias.length()  ==  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  ||  propAlias.length()  ==  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias.length()    ==    0)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
307	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias.length()    ==    0)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
308	[BUG]  [BUGGY]  if(propAlias!=  null  &&  p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  &&  p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  &&  p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {	  if(p.canCollapse()    &&    propAlias!=    null    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	78	None	replace
309	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(alias))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(alias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias.equals(alias))  {	  if    (p.canCollapse()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	27	None	replace
310	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(n.name))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(n.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias.equals(n.name))  {	  if    (p.canCollapse()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	27	None	replace
311	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	81	None	replace
312	[BUG]  [BUGGY]  if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	81	None	replace
313	[BUG]  [BUGGY]  if(propAlias!=  null)  {  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesTo  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesTo  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesTo	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	81	None	replace
314	[BUG]  [BUGGY]  if(propAlias.equals(p))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	81	None	replace
315	[BUG]  [BUGGY]  if  (propAlias!=  null  &&  propAlias.canCollapse())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias!=  null  &&  propAlias.canCollapse())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias!=  null  &&  propAlias.canCollapse())  {	  if    (propAlias.canCollapse()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	34	None	replace
316	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias  >=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias  >=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias  >=  null)  {	  if    (p.canCollapseUnannotated()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
317	[BUG]  [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias!=  null  ||  propAlias.canCollapse())  {	  if    (propAlias.canCollapse()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
318	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
321	[BUG]  [BUGGY]  if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
322	[BUG]  [BUGGY]  if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
323	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlia  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlia  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlia	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
324	[BUG]  [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias  >=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias  >=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias  >=  null  ||  propAlias.length()  ==  0)  {	  if(propAlias!=    null    ||    p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	19	None	replace
325	[BUG]  [BUGGY]  if(pAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(pAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(pAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(propAlias!=    null    ||    p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	19	None	replace
326	[BUG]  [BUGGY]  if(propAlias!=  null  ||  p.cancollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  ||  p.cancollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  ||  p.cancollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(propAlias!=    null    ||    p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	19	None	replace
327	[BUG]  [BUGGY]  if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
328	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendants(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendants(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendants(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
329	[BUG]  [BUGGY]  if(propAlias!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	86	None	replace
330	[BUG]  [BUGGY]  if(p.name!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	86	None	replace
331	[BUG]  [BUGGY]  if(p.name!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	86	None	replace
332	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  propAlias.length()  >=  0)  {	  if    (p.canCollapseUnannotated()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
333	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.length()  >  1)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.length()  >  1)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  propAlias.length()  >  1)  {	  if    (p.canCollapseUnannotated()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
334	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.startsWith(appendPropForAlias(alias,  p.name)))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.startsWith(appendPropForAlias(alias,  p.name)))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.startsWith(appendPropForAlias(alias,  p.name)))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name)))    {    	non-compiled	[CE]  not  a  statement	88	None	replace
335	[BUG]  [BUGGY]  if  (n.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name)))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (n.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name)))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (n.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name)))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name)))    {    	non-compiled	[CE]  not  a  statement	88	None	replace
336	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  p.name.equals(appendPropForAlias(alias,  p.name)))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  p.name.equals(appendPropForAlias(alias,  p.name)))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  p.name.equals(appendPropForAlias(alias,  p.name)))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name)))    {    	non-compiled	[CE]  not  a  statement	88	None	replace
337	[BUG]  [BUGGY]  if(n.props.contains(propAlias)||  p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props.contains(propAlias)||  p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props.contains(propAlias)||  p.canCollapseUnannotatedDescendantNames())  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.contains(propAlias))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
338	[BUG]  [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  propAlias.contains(p))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  propAlias.contains(p))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props.canCollapseUnannotatedDescendantNames()  ||  propAlias.contains(p))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.contains(propAlias))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
339	[BUG]  [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.contains(propAlias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.contains(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props.canCollapseUnannotatedDescendantNames()  ||  p.contains(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.contains(propAlias))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
340	[BUG]  [BUGGY]  Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkState(propAlias!=  null);  for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
342	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
343	[BUG]  [BUGGY]  if  (!p.canCollapseTo(propAlias)&&  collidePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseTo(propAlias)&&  collidePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseTo(propAlias)&&  collidePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collidePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
344	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	82	None	replace
345	[BUG]  [BUGGY]  if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	82	None	replace
346	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	82	None	replace
347	[BUG]  [BUGGY]  if  (propAlias  ==  null  ||  propAlias.canCollapse()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias  ==  null  ||  propAlias.canCollapse()  ||  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias  ==  null  ||  propAlias.canCollapse()  ||  propAlias.length()!=  0)  {	  if    (propAlias.canCollapse()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	49	None	replace
348	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.startsWith(appendPropForAlias(alias,  p.name))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.startsWith(appendPropForAlias(alias,  p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.startsWith(appendPropForAlias(alias,  p.name))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name))    {    	non-compiled	[CE]  not  a  statement	79	None	replace
349	[BUG]  [BUGGY]  if  (!p.isCollapse()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.isCollapse()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.isCollapse()  &&  propAlias!=  null)  {	  if    (!p.canCollapse()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	35	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(propAlias.equals(p.name));  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkState(propAlias.equals(p.name));  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkState(propAlias.equals(p.name));  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
351	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(p.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(propAlias.equals(p.name));  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkState(propAlias.equals(p.name));  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkState(propAlias.equals(p.name));	  if(p.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
353	[BUG]  [BUGGY]  if(p.shouldCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.shouldCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.shouldCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
354	[BUG]  [BUGGY]  if  (!p.canCollapseTo(propAlias)&&  collatePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseTo(propAlias)&&  collatePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseTo(propAlias)&&  collatePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collatePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
355	[BUG]  [BUGGY]  if  (p.canCollapseTo(alias)||  collatePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseTo(alias)||  collatePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(alias)||  collatePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collatePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	59	None	replace
356	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	87	None	replace
357	[BUG]  [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames  ==  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames  ==  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	87	None	replace
358	[BUG]  [BUGGY]  if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	72	None	replace
359	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&!p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&!p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  &&!p.canCollapseUnannotatedDescendantNames())  {	  if(!p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
360	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||!p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  ||!p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  ||!p.canCollapseUnannotatedDescendantNames())  {	  if(!p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
361	[BUG]  [BUGGY]  if(propAlias.equals(p))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	84	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkState(propAlias.equals(p.name));  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkState(propAlias.equals(p.name));  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkState(propAlias.equals(p.name));  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	84	None	replace
363	[BUG]  [BUGGY]  if(p.shouldCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.shouldCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.shouldCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	63	None	replace
364	[BUG]  [BUGGY]  Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    propAlias)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    p.name);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
365	[BUG]  [BUGGY]  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }	  if(propAlias!=    null)    {    for(Name    p    :    propAlias)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    p.name);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
366	[BUG]  [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	76	None	replace
367	[BUG]  [BUGGY]  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    if(inlinePropertiesOnExternTypes)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
368	[BUG]  [BUGGY]  if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p);  }	  if(propAlias!=    null)    {    if(inlinePropertiesOnExternTypes)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
369	[BUG]  [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkState(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
371	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
372	[BUG]  [BUGGY]  if(p.cancollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.cancollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.cancollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias    ==    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	18	None	replace
373	[BUG]  [BUGGY]  if(propAlias!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	83	None	replace
374	[BUG]  [BUGGY]  if(p.name!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	83	None	replace
375	[BUG]  [BUGGY]  if(propAlias!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	83	None	replace
376	[BUG]  [BUGGY]  if  (p.canCollapseTo(alias)||  collapsePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseTo(alias)||  collapsePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(alias)||  collapsePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collapsePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	56	None	replace
377	[BUG]  [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collapsePropsOnExternTypes)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collapsePropsOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (collapsePropertiesOnExternTypes.canCollapseTo(propAlias)||  collapsePropsOnExternTypes)  {	  if    (p.canCollapseTo(propAlias)||    collapsePropertiesOnExternTypes)    {    	non-compiled	[CE]  not  a  statement	56	None	replace
378	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  p.canCollapseUnannotated())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  p.canCollapseUnannotated())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  p.canCollapseUnannotated())  {	  if    (p.canCollapseUnannotated()    ||    p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	71	None	replace
379	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  p.canCollapseUnannotated(propAlias))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  ||  p.canCollapseUnannotated(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  p.canCollapseUnannotated(propAlias))  {	  if    (p.canCollapseUnannotated()    ||    p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	71	None	replace
380	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()!=  1)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()!=  1)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.length()!=  1)  {	  if    (p.canCollapse()    ||    propAlias.length()    ==    1)    {    	non-compiled	[CE]  not  a  statement	25	None	replace
381	[BUG]  [BUGGY]  if(p.isCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.isCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.isCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    &&    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
382	[BUG]  [BUGGY]  if  (p.canInline(propAlias)||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline(propAlias)||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline(propAlias)||  propAlias!=  null)  {	  if    (p.canInline()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
383	[BUG]  [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	89	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkState(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkState(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
385	[BUG]  [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkArgument(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkArgument(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkArgument(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
387	[BUG]  [BUGGY]  if(propAlias  ==  null  ||  propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias  ==  null  ||  propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias  ==  null  ||  propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(propAlias.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
388	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(p))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(p))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.equals(p))  {	  if    (p.canCollapse()    ||    propAlias.equals(propAlias))    {    	non-compiled	[CE]  not  a  statement	28	None	replace
389	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias)))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias)))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias)))  {	  if    (p.canCollapse()    ||    propAlias.equals(propAlias))    {    	non-compiled	[CE]  not  a  statement	28	None	replace
390	[BUG]  [BUGGY]  if  (p.cancollapseUnannotated()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.cancollapseUnannotated()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.cancollapseUnannotated()  ||  propAlias!=  null)  {	  if    (p.canCollapseUnannotated()    ||    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
391	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {	  if(n.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
392	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {	  if(n.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
393	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {	  if(n.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
394	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  1)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  1)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  1)  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
395	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >=  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
396	[BUG]  [BUGGY]  if  (propAlias.canCollapseTo(p)||  n.props.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapseTo(p)||  n.props.canCollapseTo(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseTo(p)||  n.props.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias)||    n.props.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	16	None	replace
397	[BUG]  [BUGGY]  if  (!p.canCollapseTo(alias))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseTo(alias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseTo(alias))  {	  if    (!p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
398	[BUG]  [BUGGY]  if  (!p.canCollapseTo(propAlias)&&  appendPropForAlias(alias,  p.name))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (!p.canCollapseTo(propAlias)&&  appendPropForAlias(alias,  p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseTo(propAlias)&&  appendPropForAlias(alias,  p.name))  {	  if    (!p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
399	[BUG]  [BUGGY]  if  (p.canInline()  &&  propAlias.length()  >  1)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  &&  propAlias.length()  >  1)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  propAlias.length()  >  1)  {	  if    (p.canInline()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
400	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(n.name))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(n.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(n.name))  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
401	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(alias))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(alias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(alias))  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
402	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.equals(alias))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.equals(alias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias.equals(alias))  {	  if    (p.canCollapseUnannotated()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
403	[BUG]  [BUGGY]  if(pAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(pAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(pAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
404	[BUG]  [BUGGY]  if(pAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(pAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(pAlias.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
405	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(alias))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(alias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.equals(alias))  {	  if    (propAlias.canCollapse()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
406	[BUG]  [BUGGY]  if  (pAlias.canCollapse()  ||  propAlias.equals(propAlias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (pAlias.canCollapse()  ||  propAlias.equals(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (pAlias.canCollapse()  ||  propAlias.equals(propAlias))  {	  if    (propAlias.canCollapse()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
407	[BUG]  [BUGGY]  if  (pAlias.canCollapse()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (pAlias.canCollapse()  ||  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (pAlias.canCollapse()  ||  propAlias.equals(p.name))  {	  if    (propAlias.canCollapse()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	29	None	replace
408	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {	  if    (p.canInline()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	36	None	replace
409	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&  appendPropForAlias(propAlias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames()  &&  appendPropForAlias(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames()  &&  appendPropForAlias(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    appendPropForAlias(propAlias))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
410	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(alias,  propAlias))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(alias,  propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(alias,  propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    appendPropForAlias(propAlias))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
411	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias,  p.name))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias,  p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias,  p.name))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    appendPropForAlias(propAlias))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
412	[BUG]  [BUGGY]  if  (p.canInline()  &&  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  &&  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  propAlias.equals(appendPropForAlias(alias,  p.name))  {	  if    (p.canInline()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	39	None	replace
413	[BUG]  [BUGGY]  if  (p.canInline()  &&  propAlias.equals(alias))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  &&  propAlias.equals(alias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  propAlias.equals(alias))  {	  if    (p.canInline()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	39	None	replace
414	[BUG]  [BUGGY]  if  (p.canInline()  &&  propAlias.equals(n.name))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline()  &&  propAlias.equals(n.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  propAlias.equals(n.name))  {	  if    (p.canInline()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	39	None	replace
415	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(alias))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(alias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(alias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
416	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(n.name))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(n.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(n.name))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	6	None	replace
417	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
418	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
419	[BUG]  [BUGGY]  Iterator  <  Name>  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Iterator  <  Name>  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Iterator  <  Name>  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
420	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantsNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
421	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	86	None	replace
422	[BUG]  [BUGGY]  if(p.shouldRemoveUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.shouldRemoveUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.shouldRemoveUnannotatedDescendantNames()  &&  propAlias!=  null)  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	63	None	replace
423	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals( " "))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals( " "))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals( " "))  {	  if    (p.canCollapse()    ||    propAlias.equals(alias))    {    	non-compiled	[CE]  not  a  statement	30	None	replace
424	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
425	[BUG]  [BUGGY]  if(n.name.equals(propAlias))  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.name.equals(propAlias))  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.name.equals(propAlias))  {  for(Name  p  :  p.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
426	[BUG]  [BUGGY]  if(n.name.equals(propAlias))  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.name.equals(propAlias))  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.name.equals(propAlias))  {  for(Name  p  :  props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
427	[BUG]  [BUGGY]  Name  p  :  n.props.flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Name  p  :  n.props.flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Name  p  :  n.props.flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(p.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
428	[BUG]  [BUGGY]  if(n.name.equals(propAlias))  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.name.equals(propAlias))  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.name.equals(propAlias))  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(p.name.equals(propAlias))    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
429	[BUG]  [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
430	[BUG]  [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
431	[BUG]  [BUGGY]  if(p.inlineAlias)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.inlineAlias)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.inlineAlias)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    if(inlinePropertiesOnExternTypes)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
432	[BUG]  [BUGGY]  if(prototype!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(prototype!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(prototype!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    if(inlinePropertiesOnExternTypes)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
433	[BUG]  [BUGGY]  if(p.inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    if(inlinePropertiesOnExternTypes)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
434	[BUG]  [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  FlattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
435	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesFromCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  flattenReferencesFromCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesFromCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
436	[BUG]  [BUGGY]  if(n.props.contains(propAlias)||  p.canCollapseUnannotatedDescendantNames()  ||  p.props.contains(propAlias))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props.contains(propAlias)||  p.canCollapseUnannotatedDescendantNames()  ||  p.props.contains(propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props.contains(propAlias)||  p.canCollapseUnannotatedDescendantNames()  ||  p.props.contains(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    n.props.contains(propAlias))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
437	[BUG]  [BUGGY]  if(propAlias!=  null  ||  propAlias.length()  ==  0)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  ||  propAlias.length()  ==  0)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  ||  propAlias.length()  ==  0)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
438	[BUG]  [BUGGY]  parent.flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  parent.flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	parent.flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
439	[BUG]  [BUGGY]  if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias  ==  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
440	[BUG]  [BUGGY]  if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	74	None	replace
441	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||!p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||!p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||!p.canCollapseUnannotatedDescendantNames())  {	  if(!p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
442	[BUG]  [BUGGY]  if  (propAlias!=  null  &&  propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias!=  null  &&  propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias!=  null  &&  propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {	  if    (propAlias.canCollapse()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	23	None	replace
443	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
444	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
445	[BUG]  [BUGGY]  if(n.props!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
446	[BUG]  [BUGGY]  Iterator  <  Name>  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Iterator  <  Name>  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Iterator  <  Name>  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
447	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
448	[BUG]  [BUGGY]  if(propAlias.length()  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.length()  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.length()  >  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias.length()    ==    0)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
449	[BUG]  [BUGGY]  n.props  =  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  n.props  =  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	n.props  =  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  if(propAlias.length()    ==    0)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
450	[BUG]  [BUGGY]  if  (p.canInline(propAlias)&&  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline(propAlias)&&  propAlias  ==  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline(propAlias)&&  propAlias  ==  null)  {	  if    (p.canInline()    &&    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
451	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias  >=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  ||  propAlias  >=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias  >=  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias    ==    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	18	None	replace
452	[BUG]  [BUGGY]  if  (p.cancollapseType()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.cancollapseType()  ||  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.cancollapseType()  ||  propAlias!=  null)  {	  if    (p.cancollapse()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
453	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  p.canCollapseUnannotatedDescendantNames())  {	  if(n.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
454	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(prop))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(prop))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(prop))  {	  if    (p.canCollapse()    ||    propAlias.equals(propAlias))    {    	non-compiled	[CE]  not  a  statement	28	None	replace
455	[BUG]  [BUGGY]  if(propAlias.startsWith( "_ "))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.startsWith( "_ "))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.startsWith( "_ "))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	81	None	replace
456	[BUG]  [BUGGY]  if(propAlias.length()  ==  0)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.length()  ==  0)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.length()  ==  0)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	81	None	replace
457	[BUG]  [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias.canCollapse())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias.canCollapse())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias.canCollapse())  {	  if    (propAlias.canCollapse()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
458	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.isEmpty())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.isEmpty())  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.isEmpty())  {	  if    (propAlias.canCollapse()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
459	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(AppendPropForAlias(alias,  p.name)))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(AppendPropForAlias(alias,  p.name)))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(AppendPropForAlias(alias,  p.name)))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name)))    {    	non-compiled	[CE]  not  a  statement	88	None	replace
460	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name),  p.props)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name),  p.props)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name),  p.props)  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name)))    {    	non-compiled	[CE]  not  a  statement	88	None	replace
461	[BUG]  [BUGGY]  Preconditions.checkState(propAlias!=  null);  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  Preconditions.checkState(propAlias!=  null);  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	Preconditions.checkState(propAlias!=  null);  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }	  if(propAlias!=    null)    {    for(Name    p    :    propAlias)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    p.name);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
462	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  appendPropForAlias(alias,  p.name);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  appendPropForAlias(alias,  p.name);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  appendPropForAlias(alias,  p.name);  }	  if(propAlias!=    null)    {    for(Name    p    :    propAlias)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    p.name);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
463	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.alias);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.alias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.alias);  }	  if(propAlias!=    null)    {    for(Name    p    :    propAlias)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    p.name);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
464	[BUG]  [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
465	[BUG]  [BUGGY]  if(n.props!=  null)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(n.props!=  null)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.props!=  null)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	  if(propAlias!=    null)    {    for(Name    p    :    n.props)    {    flattenReferencesToCollapsibleDescendants(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
466	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias,  appendPropForAlias(alias,  p.name));	  FlattenReferencesToCollapsibleDescendantNames(p,    propAlias);    	non-compiled	[CE]  not  a  statement	75	None	replace
467	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  &&  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias.length()  >  0)  {	  if    (p.canCollapse()    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
468	[BUG]  [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.equals(p.name))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAl    	non-compiled	[CE]  not  a  statement	82	None	replace
469	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias  >=  null)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  &&  propAlias  >=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias  >=  null)  {	  if    (p.canCollapse()    ||    propAlias    >=    null)    {    	non-compiled	[CE]  not  a  statement	33	None	replace
470	[BUG]  [BUGGY]  if(p.name!=  null)  {  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name!=  null)  {  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name!=  null)  {  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	76	None	replace
471	[BUG]  [BUGGY]  if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	  if(propAlias!=    null)    {    flattenReferencesToCollapsibleDescendantNames(p.name,    propAlias);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	76	None	replace
472	[BUG]  [BUGGY]  if(p.name.equals(propAlias)&&  p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name.equals(propAlias)&&  p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias)&&  p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
473	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name)||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name)||  propAlias.equals(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name)||  propAlias.equals(p.name))  {	  if(p.canCollapseUnannotatedDescendantNames()    &&    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
474	[BUG]  [BUGGY]  if(propAlias!=  null  &&  p.collapsePropertiesOnExternTypes!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  &&  p.collapsePropertiesOnExternTypes!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  &&  p.collapsePropertiesOnExternTypes!=  null)  {	  if    (p.collapsePropertiesOnExternTypes    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
475	[BUG]  [BUGGY]  if  (p.collapsePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.collapsePropertiesOnExternTypes)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.collapsePropertiesOnExternTypes)  {	  if    (p.collapsePropertiesOnExternTypes    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	55	None	replace
476	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  flattenReferencesToCollapsibleDescendantNames(p,  propAlias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  flattenReferencesToCollapsibleDescendantNames(p,  propAlias))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  flattenReferencesToCollapsibleDescendantNames(p,  propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    appendPropForAlias(propAlias))    {    	non-compiled	[CE]  not  a  statement	66	None	replace
477	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias	  if(p.name.equals(propAlias))    {    propAlias    =    appendPropForAlias(alias,    p.name);    }    else    {    flattenReferencesToCollapsibleDescendantNames(p,    propA    	non-compiled	[CE]  not  a  statement	83	None	replace
478	[BUG]  [BUGGY]  if(propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  ||  propAlias.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {	  if(propAlias!=    null    ||    p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	19	None	replace
479	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  1)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  1)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  1)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
480	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  2)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  2)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  2)  {	  if(p.canCollapseUnannotatedDescendantNames()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
481	[BUG]  [BUGGY]  if  (p.canInline(propAlias)&&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline(propAlias)&&  propAlias!=  null)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline(propAlias)&&  propAlias!=  null)  {	  if    (p.canInline()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	51	None	replace
482	[BUG]  [BUGGY]  if  (propAlias!=  null  &&  propAlias.canCollapse()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (propAlias!=  null  &&  propAlias.canCollapse()  ||  propAlias.length()!=  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias!=  null  &&  propAlias.canCollapse()  ||  propAlias.length()!=  0)  {	  if    (propAlias.canCollapse()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	49	None	replace
483	[BUG]  [BUGGY]  if(p.canCollapse()  &&  propAlias  ==  null  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.canCollapse()  &&  propAlias  ==  null  &&  propAlias.length()  ==  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  &&  propAlias  ==  null  &&  propAlias.length()  ==  0)  {	  if(p.canCollapse()    &&    propAlias!=    null    &&    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	78	None	replace
484	[BUG]  [BUGGY]  AppendPropsToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  AppendPropsToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	AppendPropsToCollapsibleDescendantNames(p,  propAlias);	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	84	None	replace
485	[BUG]  [BUGGY]  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(n,  propAlias);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(n,  propAlias);  }  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(n,  propAlias);  }	  if(p.name.equals(propAlias))    {    flattenReferencesToCollapsibleDescendantNames(p,    propAlias);    }    	non-compiled	[CE]  not  a  statement	84	None	replace
486	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.propName))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.propName))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.propName))  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name))    {    	non-compiled	[CE]  not  a  statement	79	None	replace
487	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name),  p.type)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name),  p.type)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name),  p.type)  {	  if    (p.canCollapse()    ||    propAlias.equals(appendPropForAlias(alias,    p.name))    {    	non-compiled	[CE]  not  a  statement	79	None	replace
488	[BUG]  [BUGGY]  if  (p.canInline(propAlias)&&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if  (p.canInline(propAlias)&&  propAlias.length()  >  0)  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline(propAlias)&&  propAlias.length()  >  0)  {	  if    (p.canInline()    &&    propAlias.length()    >    0)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
489	[BUG]  [BUGGY]  if(propAlias.canCollapseTo(p)||  propAlias.canCollapseTo(p.name))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);      [BUGGY]  if(propAlias.canCollapseTo(p)||  propAlias.canCollapseTo(p.name))  {  [BUGGY]      flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapseTo(p)||  propAlias.canCollapseTo(p.name))  {	  if    (propAlias.canCollapseTo(p))    {    	non-compiled	[CE]  not  a  statement	60	None	replace
