bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.equals(p.name))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias.equals(p.name))  {	  if    (p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
2	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.length()  ==  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias.length()  ==  0)  {	  if    (p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
3	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias.length()!=  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias.length()!=  0)  {	  if    (p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
4	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.length()  >  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  propAlias.length()  >  0)  {	  if    (p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
5	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias.equals(p.name))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  propAlias.equals(p.name))  {	  if    (p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
6	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.equals(p.name))  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
7	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()  ==  0)  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
8	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.length()  >  0)  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
9	[BUG]  [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(!p.canCollapseUnannotatedDescendantNames())  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(!p.canCollapseUnannotatedDescendantNames())  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
10	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.length()!=  0)  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
11	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias.equals(p.name))  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
12	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias.isEmpty())  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
13	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)||  p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseTo(propAlias)||  p.canCollapseTo(propAlias))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)||  p.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
14	[BUG]  [BUGGY]  if  (!p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (!p.canCollapseTo(propAlias))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
15	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)||!p.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseTo(propAlias)||!p.canCollapseTo(propAlias))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)||!p.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
16	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)||  n.props.canCollapseTo(propAlias))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseTo(propAlias)||  n.props.canCollapseTo(propAlias))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)||  n.props.canCollapseTo(propAlias))  {	  if    (p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
17	[BUG]  [BUGGY]  if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
18	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias  ==  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
19	[BUG]  [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null  ||  p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
20	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias!=  null  &&  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
21	[BUG]  [BUGGY]  if(p.canCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  &&  propAlias!=  null  ||  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
22	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >=  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >=  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
23	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.length()  ==  0)  {	  if    (p.canCollapse()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
24	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapse()  &&  propAlias.length()  ==  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias.length()  ==  0)  {	  if    (p.canCollapse()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
25	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  ==  1)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  ==  1)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.length()  ==  1)  {	  if    (p.canCollapse()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
26	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  >=  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapse()  ||  propAlias.length()  >=  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.length()  >=  0)  {	  if    (p.canCollapse()    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
27	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapse()  &&  propAlias.equals(p.name))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias.equals(p.name))  {	  if    (p.canCollapse()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
28	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(propAlias))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(propAlias))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(propAlias))  {	  if    (p.canCollapse()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
29	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.equals(p.name))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.equals(p.name))  {	  if    (p.canCollapse()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
30	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(alias))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(alias))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(alias))  {	  if    (p.canCollapse()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
31	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias  ==  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias  ==  null)  {	  if    (p.canCollapse()    ||    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
32	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapse()  &&  propAlias  ==  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias  ==  null)  {	  if    (p.canCollapse()    ||    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
33	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias  >=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapse()  ||  propAlias  >=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias  >=  null)  {	  if    (p.canCollapse()    ||    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
34	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (propAlias.canCollapse()  &&  propAlias!=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  &&  propAlias!=  null)  {	  if    (p.canCollapse()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
35	[BUG]  [BUGGY]  if  (!p.canCollapse()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (!p.canCollapse()  &&  propAlias!=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (!p.canCollapse()  &&  propAlias!=  null)  {	  if    (p.canCollapse()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
36	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canInline()  ||  propAlias.equals(p.name))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias.equals(p.name))  {	  if    (p.canInline())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
37	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canInline()  ||  propAlias.length()  ==  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias.length()  ==  0)  {	  if    (p.canInline())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
38	[BUG]  [BUGGY]  if  (p.canInline()  &&  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canInline()  &&  propAlias.length()  >  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  propAlias.length()  >  0)  {	  if    (p.canInline())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
39	[BUG]  [BUGGY]  if  (p.canInline()  &&  propAlias.equals(p.name))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canInline()  &&  propAlias.equals(p.name))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  propAlias.equals(p.name))  {	  if    (p.canInline())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
40	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canInline()  ||  propAlias.length()!=  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias.length()!=  0)  {	  if    (p.canInline())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
41	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
42	[BUG]  [BUGGY]  if(propAlias.length()  ==  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias.length()  ==  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias.length()  ==  0)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
43	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendants(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
44	[BUG]  [BUGGY]  if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  if(inlinePropertiesOnExternTypes)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
45	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
46	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  propAlias)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  p.name);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
47	[BUG]  [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  for(Name  p  :  n.props)  {  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
48	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias!=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias!=  null)  {	  if    (p.canCollapse()    ||    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
49	[BUG]  [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (propAlias.canCollapse()  ||  propAlias.length()!=  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapse()  ||  propAlias.length()!=  0)  {	  if    (p.canCollapse()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
50	[BUG]  [BUGGY]  if  (p.canCollapse()  &&  propAlias.length()!=  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapse()  &&  propAlias.length()!=  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  &&  propAlias.length()!=  0)  {	  if    (p.canCollapse()    ||    propAlias.length()!=    0)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
51	[BUG]  [BUGGY]  if  (p.canInline()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canInline()  &&  propAlias!=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  propAlias!=  null)  {	  if    (p.canInline())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
52	[BUG]  [BUGGY]  if  (p.canInline()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canInline()  ||  propAlias!=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  propAlias!=  null)  {	  if    (p.canInline())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
53	[BUG]  [BUGGY]  if  (p.canInline()  ||  p.canInline())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canInline()  ||  p.canInline())  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  ||  p.canInline())  {	  if    (p.canInline())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
54	[BUG]  [BUGGY]  if  (p.canInline()  &&  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canInline()  &&  propAlias  ==  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canInline()  &&  propAlias  ==  null)  {	  if    (p.canInline())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
55	[BUG]  [BUGGY]  if  (p.collapsePropertiesOnExternTypes  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.collapsePropertiesOnExternTypes  &&  propAlias!=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.collapsePropertiesOnExternTypes  &&  propAlias!=  null)  {	  if    (p.canCollapse()    &&    propAlias!=    null)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
56	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)||  collapsePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseTo(propAlias)||  collapsePropertiesOnExternTypes)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)||  collapsePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
57	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)||  collidePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseTo(propAlias)||  collidePropertiesOnExternTypes)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)||  collidePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
58	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)&&  collapsePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseTo(propAlias)&&  collapsePropertiesOnExternTypes)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)&&  collapsePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
59	[BUG]  [BUGGY]  if  (p.canCollapseTo(propAlias)||  collatePropertiesOnExternTypes)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseTo(propAlias)||  collatePropertiesOnExternTypes)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseTo(propAlias)||  collatePropertiesOnExternTypes)  {	  if    (p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
60	[BUG]  [BUGGY]  if  (propAlias.canCollapseTo(p))  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (propAlias.canCollapseTo(p))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (propAlias.canCollapseTo(p))  {	  if    (p.canCollapseTo(propAlias))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
61	[BUG]  [BUGGY]  if  (p.cancollapse()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.cancollapse()  ||  propAlias!=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.cancollapse()  ||  propAlias!=  null)  {	  if    (p.canCollapse()    ||    propAlias    ==    null)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
62	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias!=  null)  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
63	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  &&  propAlias!=  null)  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
64	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  n.props.contains(propAlias))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  n.props.contains(propAlias))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  n.props.contains(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
65	[BUG]  [BUGGY]  if(n.canCollapseUnannotatedDescendantNames())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(n.canCollapseUnannotatedDescendantNames())  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(n.canCollapseUnannotatedDescendantNames())  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
66	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  appendPropForAlias(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
67	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  n.props.containsKey(propAlias))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  n.props.containsKey(propAlias))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  n.props.containsKey(propAlias))  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
68	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias!=  null)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias!=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias!=  null)  {	  if    (p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
69	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseUnannotated()  &&  propAlias!=  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  &&  propAlias!=  null)  {	  if    (p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
70	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseUnannotated()  ||  propAlias  ==  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  propAlias  ==  null)  {	  if    (p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
71	[BUG]  [BUGGY]  if  (p.canCollapseUnannotated()  ||  p.canCollapseUnannotated())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapseUnannotated()  ||  p.canCollapseUnannotated())  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapseUnannotated()  ||  p.canCollapseUnannotated())  {	  if    (p.canCollapseUnannotated())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
72	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
73	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
74	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
75	[BUG]  [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	FlattenReferencesToCollapsibleDescendantNames(p,  propAlias);	      	non-compiled	[CE]  not  a  statement	5	None	replace
76	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
77	[BUG]  [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(propAlias!=  null)  {  flattenReferencesToCollapsibleDescendantNames(p);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p.name,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
78	[BUG]  [BUGGY]  if(p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  &&  propAlias!=  null  &&  propAlias.length()  ==  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
79	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name))  {	  if    (p.canCollapse()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
80	[BUG]  [BUGGY]  if(p.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias))  {  for(Name  p  :  n.props)  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
81	[BUG]  [BUGGY]  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	      	non-compiled	[CE]  not  a  statement	5	None	replace
82	[BUG]  [BUGGY]  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl	      	non-compiled	[CE]  not  a  statement	5	None	replace
83	[BUG]  [BUGGY]  if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propA	      	non-compiled	[CE]  not  a  statement	5	None	replace
84	[BUG]  [BUGGY]  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
85	[BUG]  [BUGGY]  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias))  {  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAli	      	non-compiled	[CE]  not  a  statement	5	None	replace
86	[BUG]  [BUGGY]  if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.name.equals(propAlias))  {  propAlias  =  appendPropForAlias(alias,  p.name);  }  else  {  flattenReferencesToCollapsibleDescendantNames(p,  propAl	      	non-compiled	[CE]  not  a  statement	5	None	replace
87	[BUG]  [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapseUnannotatedDescendantNames()  ||  propAlias  ==  null)  {	  if(p.canCollapseUnannotatedDescendantNames())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
88	[BUG]  [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name)))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name)))  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if  (p.canCollapse()  ||  propAlias.equals(appendPropForAlias(alias,  p.name)))  {	  if    (p.canCollapse()    ||    propAlias.equals(p.name))    {    	non-compiled	[CE]  not  a  statement	3	None	replace
89	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >  0)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  >  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
90	[BUG]  [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <  0)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;  for  (Name  p  :  n.props)  {  String  propAlias  =  appendPropForAlias(alias,  p.name);    [BUGGY]  if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <  0)  {  [BUGGY]    flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	301	301	8	replace	if(p.canCollapse()  ||  propAlias!=  null  ||  propAlias.length()  <  0)  {	  if(p.canCollapse()    ||    propAlias!=    null    ||    propAlias.length()    ==    0)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
