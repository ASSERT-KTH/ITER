bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
2	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
3	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
4	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  &&  ref.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  &&  ref.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  &&  ref.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
5	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.localSets  >  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.localSets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.localSets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
6	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
7	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.scope.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
8	[BUG]  [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
9	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
10	[BUG]  [BUGGY]  if(namespace.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
11	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	47	None	replace
12	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	47	None	replace
13	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  name.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	47	None	replace
14	[BUG]  [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.type.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.type.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.type.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	47	None	replace
15	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	47	None	replace
16	[BUG]  [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(name.aliasingGets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(name.aliasingGets);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Deque  <  Ref>  namespace  =  refs.get(name.aliasingGets);	  Deque    <    Ref>    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	64	None	replace
17	[BUG]  [BUGGY]  Deque  <  Ref>  namespace  =  ref.get(ref);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Deque  <  Ref>  namespace  =  ref.get(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Deque  <  Ref>  namespace  =  ref.get(ref);	  Deque    <    Ref>    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	64	None	replace
18	[BUG]  [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(ref,  name.aliasingGets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(ref,  name.aliasingGets);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Deque  <  Ref>  namespace  =  refs.get(ref,  name.aliasingGets);	  Deque    <    Ref>    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	64	None	replace
19	[BUG]  [BUGGY]  Deque  <  Ref>  namespace  =  names.get(ref);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Deque  <  Ref>  namespace  =  names.get(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Deque  <  Ref>  namespace  =  names.get(ref);	  Deque    <    Ref>    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	64	None	replace
20	[BUG]  [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(name.namespace);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(name.namespace);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Deque  <  Ref>  namespace  =  refs.get(name.namespace);	  Deque    <    Ref>    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	64	None	replace
21	[BUG]  [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(ref.namespace);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(ref.namespace);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Deque  <  Ref>  namespace  =  refs.get(ref.namespace);	  Deque    <    Ref>    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	64	None	replace
22	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
23	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
24	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
25	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()!=  null)  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
26	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  ||  ref.scope.isLocal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
27	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isGlobal()!=  null)  {  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isGlobal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isGlobal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
28	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
29	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
30	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isGlobal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isGlobal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
31	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isAssignableFrom(namespace))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isAssignableFrom(namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isAssignableFrom(namespace))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
32	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isUnknown())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isUnknown())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isUnknown())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
33	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isNamespace())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isNamespace())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isNamespace())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
34	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
35	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  namespace!=  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  namespace!=  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  namespace!=  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
36	[BUG]  [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
37	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  null  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  null  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  null  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
38	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
39	[BUG]  [BUGGY]  Namespace  namespace  =  refs.get(name.aliasingGets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.get(name.aliasingGets);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.get(name.aliasingGets);	  Namespace    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	63	None	replace
40	[BUG]  [BUGGY]  Namespace  namespace  =  refs.get(ref.namespace);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.get(ref.namespace);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.get(ref.namespace);	  Namespace    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	63	None	replace
41	[BUG]  [BUGGY]  Namespace  namespace  =  refs.get(ref,  name.aliasingGets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.get(ref,  name.aliasingGets);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.get(ref,  name.aliasingGets);	  Namespace    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	63	None	replace
42	[BUG]  [BUGGY]  Namespace  namespace  =  refs.get(name.namespace);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.get(name.namespace);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.get(name.namespace);	  Namespace    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	63	None	replace
43	[BUG]  [BUGGY]  Namespace  namespace  =  names.get(ref);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  names.get(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  names.get(ref);	  Namespace    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	63	None	replace
44	[BUG]  [BUGGY]  Namespace  namespace  =  name.get(ref);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  name.get(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  name.get(ref);	  Namespace    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	63	None	replace
45	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace!=  null)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
46	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
47	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  nameSpace!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  nameSpace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  nameSpace!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
48	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
49	[BUG]  [BUGGY]  if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
50	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	26	None	replace
51	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	26	None	replace
52	[BUG]  [BUGGY]  name.addRef(ref);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  name.addRef(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	name.addRef(ref);	  name.removeRef(ref);    	non-compiled	[CE]  not  a  statement	29	None	replace
53	[BUG]  [BUGGY]  Name.removeRef(ref);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name.removeRef(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name.removeRef(ref);	  name.removeRef(ref);    	non-compiled	[CE]  not  a  statement	29	None	replace
54	[BUG]  [BUGGY]  name.removeAlias(ref);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  name.removeAlias(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	name.removeAlias(ref);	  name.removeRef(ref);    	non-compiled	[CE]  not  a  statement	29	None	replace
55	[BUG]  [BUGGY]  Name  name.removeRef(ref);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name  name.removeRef(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name.removeRef(ref);	  name.removeRef(ref);    	non-compiled	[CE]  ';'  expected	29	None	replace
56	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace.isLocal()    ||    ref.type.isLocal())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
57	[BUG]  [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  ||  ref.type.isLocal()  ||  ref.type.isLocal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  ||  ref.type.isLocal()  ||  ref.type.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Type.ALIASING_GET  ||  ref.type.isLocal()  ||  ref.type.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace.isLocal()    ||    ref.type.isLocal())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
58	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isGlobal()  ||  ref.type.isLocal())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isGlobal()  ||  ref.type.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isGlobal()  ||  ref.type.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace.isLocal()    ||    ref.type.isLocal())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
59	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isNamespace()  ||  ref.type.isLocal())  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isNamespace()  ||  ref.type.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isNamespace()  ||  ref.type.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace.isLocal()    ||    ref.type.isLocal())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
60	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  &&  ref.type.isLocal())  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  &&  ref.type.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  &&  ref.type.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace.isLocal()    ||    ref.type.isLocal())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
61	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type.isAliasingGets())  {  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type.isAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type.isAliasingGets())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace.isLocal()    ||    ref.type.isLocal())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
62	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAliasingGets())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAliasingGets())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
63	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isAliasingGets())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isAliasingGets())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
64	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isAliasingGets())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isAliasingGets())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
65	[BUG]  [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
66	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(namespace))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(namespace))  {	  if(Ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	77	None	replace
67	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.localSets  ==  1  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.localSets  ==  1  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.localSets  ==  1  &&  name.aliasingGets  >  0)  {	  if(Ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	77	None	replace
68	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	12	None	replace
69	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	12	None	replace
70	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	12	None	replace
71	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal()  ||  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal()  ||  ref.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal()  ||  ref.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	12	None	replace
72	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  ref.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  ref.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	12	None	replace
73	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(namespace))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
74	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.aliasingGets))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.aliasingGets))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.aliasingGets))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
75	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
76	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  name.scope.isAssignableFrom(ref))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  name.scope.isAssignableFrom(ref))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  name.scope.isAssignableFrom(ref))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
77	[BUG]  [BUGGY]  if(namespace  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
78	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.localSets))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.localSets))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.localSets))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
79	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isLocal())  {	  if(ref.type!=    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
80	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {	  if(ref.type!=    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
81	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal())  {	  if(ref.type!=    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
82	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace!=  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	49	None	replace
83	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	49	None	replace
84	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  namespace!=  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	49	None	replace
85	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  namespace!=  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	49	None	replace
86	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	74	None	replace
87	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	74	None	replace
88	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  1)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  1)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  1)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	74	None	replace
89	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.localSets  >  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.localSets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.localSets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	74	None	replace
90	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  ||  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	74	None	replace
91	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
92	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
93	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isGlobal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isGlobal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
94	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isNamespace())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isNamespace())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isNamespace())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
95	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isAlias())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isAlias())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isAlias())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
96	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
97	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  1)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  1)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  1)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
98	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.localSets  >  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.localSets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.localSets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
99	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
100	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
101	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  ||  ref.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  ||  ref.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  ||  ref.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
102	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  name.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  name.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
103	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
104	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  name.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  name.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
105	[BUG]  [BUGGY]  Name  name  =  ref.getNamespaceURI();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name  name  =  ref.getNamespaceURI();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name  =  ref.getNamespaceURI();	  Name    name    =    ref.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
106	[BUG]  [BUGGY]  Name  name  =  ref.getNamespace();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name  name  =  ref.getNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name  =  ref.getNamespace();	  Name    name    =    ref.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
107	[BUG]  [BUGGY]  Name  name  =  ref.name();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name  name  =  ref.name();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name  =  ref.name();	  Name    name    =    ref.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
108	[BUG]  [BUGGY]  Name  name  =  ref.namespace;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name  name  =  ref.namespace;  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name  =  ref.namespace;	  Name    name    =    ref.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
109	[BUG]  [BUGGY]  Name  name  =  ref.namespace.getName();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name  name  =  ref.namespace.getName();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name  =  ref.namespace.getName();	  Name    name    =    ref.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
110	[BUG]  [BUGGY]  Name  name  =  ref.name;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name  name  =  ref.name;  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name  =  ref.name;	  Name    name    =    ref.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
111	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
112	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
113	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
114	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
115	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
116	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    name.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	38	None	replace
117	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  name.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    name.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	38	None	replace
118	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace!=  null  &&  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace!=  null  &&  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace!=  null  &&  name.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    name.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	38	None	replace
119	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(ref.scope))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(ref.scope))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(ref.scope))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(ref.scope))    {    	non-compiled	[CE]  not  a  statement	75	None	replace
120	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(ref))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(ref))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(ref))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(ref.scope))    {    	non-compiled	[CE]  not  a  statement	75	None	replace
121	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.scope))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.scope))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.scope))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(ref.scope))    {    	non-compiled	[CE]  not  a  statement	75	None	replace
122	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.globalSets))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.globalSets))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.globalSets))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(ref.scope))    {    	non-compiled	[CE]  not  a  statement	75	None	replace
123	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(ref.namespace))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(ref.namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(ref.namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(ref.scope))    {    	non-compiled	[CE]  not  a  statement	75	None	replace
124	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isAssignableFrom(ref.scope))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isAssignableFrom(ref.scope))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isAssignableFrom(ref.scope))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(ref.scope))    {    	non-compiled	[CE]  not  a  statement	75	None	replace
125	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.aliasingGets!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
126	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.aliasingGets!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
127	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.aliasingGets!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
128	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  ||  name.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  ||  name.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  ||  name.aliasingGets!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
129	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isUnknownType())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isUnknownType())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isUnknownType())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isUnknownType())    {    	non-compiled	[CE]  not  a  statement	78	None	replace
130	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isUnknownType())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isUnknownType())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isUnknownType())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isUnknownType())    {    	non-compiled	[CE]  not  a  statement	78	None	replace
131	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isUnknownType())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isUnknownType())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isUnknownType())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isUnknownType())    {    	non-compiled	[CE]  not  a  statement	78	None	replace
132	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isUnknownType())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isUnknownType())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isUnknownType())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isUnknownType())    {    	non-compiled	[CE]  not  a  statement	78	None	replace
133	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
134	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.namespace!=  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
135	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.namespace!=  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
136	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
137	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  name.aliasingGets!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
138	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
139	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	37	None	replace
140	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	37	None	replace
141	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	37	None	replace
142	[BUG]  [BUGGY]  if(namespace.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	37	None	replace
143	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets.isLocal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	37	None	replace
144	[BUG]  [BUGGY]  if(namespace.isLocal()  ||  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.isLocal()  ||  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.isLocal()  ||  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	37	None	replace
145	[BUG]  [BUGGY]  Namespace  namespace  =  refs.namespace.getNamespace();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.namespace.getNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.namespace.getNamespace();	  Namespace    namespace    =    name.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	31	None	replace
146	[BUG]  [BUGGY]  Namespace  namespace  =  ref.getNamespace();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.getNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.getNamespace();	  Namespace    namespace    =    name.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	31	None	replace
147	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
148	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  1)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  1)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  1)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
149	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
150	[BUG]  [BUGGY]  if(name.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
151	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	16	None	replace
152	[BUG]  [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	16	None	replace
153	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	16	None	replace
154	[BUG]  [BUGGY]  if(namespace  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	16	None	replace
155	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	16	None	replace
156	[BUG]  [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.type!=    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
157	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.type!=    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
158	[BUG]  [BUGGY]  if(ref.namespace!=  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace!=  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace!=  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.type!=    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
159	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.type!=    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
160	[BUG]  [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.type!=    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
161	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespace.getNamespaceURI();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespace.getNamespaceURI();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespace.getNamespaceURI();	  Namespace    namespace    =    ref.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	33	None	replace
162	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespace.cloneTree();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespace.cloneTree();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespace.cloneTree();	  Namespace    namespace    =    ref.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	33	None	replace
163	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespace.getPrefix();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespace.getPrefix();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespace.getPrefix();	  Namespace    namespace    =    ref.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	33	None	replace
164	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespace.getLocalName();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespace.getLocalName();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespace.getLocalName();	  Namespace    namespace    =    ref.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	33	None	replace
165	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespace.getValue();  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespace.getValue();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespace.getValue();	  Namespace    namespace    =    ref.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	33	None	replace
166	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespace;  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespace;  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespace;	  Namespace    namespace    =    ref.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	33	None	replace
167	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  nameSpace!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  nameSpace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  nameSpace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
168	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.hasAliasingGets())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.hasAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.hasAliasingGets())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
169	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isAliasingGets())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isAliasingGets())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	50	None	replace
170	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isAliasingGets())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isAliasingGets())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	50	None	replace
171	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAliasingGets()  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAliasingGets()  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAliasingGets()  ||  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	50	None	replace
172	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.aliasingGets))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.aliasingGets))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name.aliasingGets))  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
173	[BUG]  [BUGGY]  if(namespace!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
174	[BUG]  [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
175	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
176	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
177	[BUG]  [BUGGY]  if(namespace!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
178	[BUG]  [BUGGY]  if(namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.namespace    ==    Type.ALIASING_GET    &&    ref.type    ==    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
179	[BUG]  [BUGGY]  if(name.namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.namespace    ==    Type.ALIASING_GET    &&    ref.type    ==    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
180	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  Type.ALIASING_GET)  {	  if(ref.namespace    ==    Type.ALIASING_GET    &&    ref.type    ==    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
181	[BUG]  [BUGGY]  if(ref.namespace!=  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace!=  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace!=  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.namespace    ==    Type.ALIASING_GET    &&    ref.type    ==    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
182	[BUG]  [BUGGY]  if(ref.namespace  ==  type  &&  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  type  &&  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  type  &&  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.namespace    ==    Type.ALIASING_GET    &&    ref.type    ==    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
183	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.isAliasingGets())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.isAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.isAliasingGets())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
184	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
185	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(ref,  name.aliasingGets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  nameMap.get(ref,  name.aliasingGets);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  nameMap.get(ref,  name.aliasingGets);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	30	None	replace
186	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(ref.namespace);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  nameMap.get(ref.namespace);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  nameMap.get(ref.namespace);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	30	None	replace
187	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.remove(ref);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  nameMap.remove(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  nameMap.remove(ref);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	30	None	replace
188	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace!=  null  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace!=  null  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace!=  null  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	69	None	replace
189	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace!=  null  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	69	None	replace
190	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  name.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  name.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  name.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	69	None	replace
191	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	69	None	replace
192	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	69	None	replace
193	[BUG]  [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	69	None	replace
194	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isGlobal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isGlobal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isGlobal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
195	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isGlobal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isGlobal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isGlobal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
196	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isGlobal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
197	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isGlobal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isGlobal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isGlobal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
198	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  name.aliasingGets!=  0)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  name.aliasingGets!=  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  name.aliasingGets!=  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isGlobal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
199	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.globalSets.isGlobal())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.globalSets.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.globalSets.isGlobal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isGlobal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
200	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isUnknownType())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
201	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  &&  name.aliasingGets!=  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  &&  name.aliasingGets!=  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  &&  name.aliasingGets!=  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isUnknownType())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
202	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type.isLocal())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	23	None	replace
203	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	23	None	replace
204	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	36	None	replace
205	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	36	None	replace
206	[BUG]  [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.type.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.type.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.type.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	36	None	replace
207	[BUG]  [BUGGY]  if(ref.namespace  ==  null  &&  ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  null  &&  ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  null  &&  ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	36	None	replace
208	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  name.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	36	None	replace
209	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
210	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
211	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  ref.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  ref.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  ref.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
212	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
213	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  1)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  1)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  1)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
214	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
215	[BUG]  [BUGGY]  Ref  namespace  =  ref.getNamespaceURI();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Ref  namespace  =  ref.getNamespaceURI();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  ref.getNamespaceURI();	  Ref    namespace    =    ref.getNamespace();    	non-compiled	[CE]  not  a  statement	56	None	replace
216	[BUG]  [BUGGY]  Ref  namespace  =  ref.getFunctionNamespace();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Ref  namespace  =  ref.getFunctionNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  ref.getFunctionNamespace();	  Ref    namespace    =    ref.getNamespace();    	non-compiled	[CE]  not  a  statement	56	None	replace
217	[BUG]  [BUGGY]  Ref  namespace  =  ref.getReferenceNamespace();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Ref  namespace  =  ref.getReferenceNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  ref.getReferenceNamespace();	  Ref    namespace    =    ref.getNamespace();    	non-compiled	[CE]  not  a  statement	56	None	replace
218	[BUG]  [BUGGY]  Ref  namespace  =  ref.getRawNamespace();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Ref  namespace  =  ref.getRawNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  ref.getRawNamespace();	  Ref    namespace    =    ref.getNamespace();    	non-compiled	[CE]  not  a  statement	56	None	replace
219	[BUG]  [BUGGY]  Ref  namespace  =  ref.getAlias();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Ref  namespace  =  ref.getAlias();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  ref.getAlias();	  Ref    namespace    =    ref.getNamespace();    	non-compiled	[CE]  not  a  statement	56	None	replace
220	[BUG]  [BUGGY]  Ref  namespace  =  ref.getNamespaceRef();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Ref  namespace  =  ref.getNamespaceRef();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  ref.getNamespaceRef();	  Ref    namespace    =    ref.getNamespace();    	non-compiled	[CE]  not  a  statement	56	None	replace
221	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
222	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
223	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  name.aliasingGets.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
224	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isLocal()  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isLocal()  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isLocal()  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
225	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
226	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  name.isLocal())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  name.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  name.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
227	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
228	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal()  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
229	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
230	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal()  ||  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal()  ||  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal()  ||  name.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
231	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
232	[BUG]  [BUGGY]  if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
233	[BUG]  [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
234	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
235	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isGlobal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isGlobal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
236	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  namespace!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
237	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
238	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  ||  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  ||  namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
239	[BUG]  [BUGGY]  if(ref.type  >=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  >=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  >=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {	  if(ref.type    >=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	43	None	replace
240	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	65	None	replace
241	[BUG]  [BUGGY]  if(name.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  ref.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  ref.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  ref.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	65	None	replace
242	[BUG]  [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    name.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
243	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  name.scope.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  name.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  name.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    name.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
244	[BUG]  [BUGGY]  if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    name.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
245	[BUG]  [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    name.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
246	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isGlobal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isGlobal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    name.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
247	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
248	[BUG]  [BUGGY]  if(namespace  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
249	[BUG]  [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
250	[BUG]  [BUGGY]  Namespace  namespace  =  refs.getNamespaceURI();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.getNamespaceURI();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.getNamespaceURI();	  Namespace    namespace    =    refs.getNamespace();    	non-compiled	[CE]  not  a  statement	57	None	replace
251	[BUG]  [BUGGY]  Namespace  namespace  =  refs.getNamespaceRoot();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.getNamespaceRoot();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.getNamespaceRoot();	  Namespace    namespace    =    refs.getNamespace();    	non-compiled	[CE]  not  a  statement	57	None	replace
252	[BUG]  [BUGGY]  Namespace  namespace  =  refs.getRootNamespace();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.getRootNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.getRootNamespace();	  Namespace    namespace    =    refs.getNamespace();    	non-compiled	[CE]  not  a  statement	57	None	replace
253	[BUG]  [BUGGY]  Namespace  namespace  =  refs.getNamespaceRef();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.getNamespaceRef();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.getNamespaceRef();	  Namespace    namespace    =    refs.getNamespace();    	non-compiled	[CE]  not  a  statement	57	None	replace
254	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  namespace!=  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
255	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  name.scope.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  name.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  name.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
256	[BUG]  [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
257	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isGlobal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isGlobal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
258	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
259	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isGlobal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isGlobal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isGlobal())    {    	non-compiled	[CE]  not  a  statement	44	None	replace
260	[BUG]  [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isGlobal())    {    	non-compiled	[CE]  not  a  statement	44	None	replace
261	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  name.scope.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  name.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  name.scope.isLocal())  {	  if(namespace.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
262	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  namespace.isLocal())  {	  if(namespace.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
263	[BUG]  [BUGGY]  if(namespace.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {	  if(namespace.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
264	[BUG]  [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  ref.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  ref.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  ref.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	76	None	replace
265	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	76	None	replace
266	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	76	None	replace
267	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isAssignableFrom(ref))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isAssignableFrom(ref))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isAssignableFrom(ref))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
268	[BUG]  [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(ref))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(ref))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(ref))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
269	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name.localSets))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name.localSets))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name.localSets))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
270	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name.aliasingGets))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name.aliasingGets))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name.aliasingGets))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
271	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name.globalSets))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name.globalSets))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name.globalSets))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
272	[BUG]  [BUGGY]  if(ref.namespace!=  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace!=  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace!=  Type.ALIASING_GET  &&  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	24	None	replace
273	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  name.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	24	None	replace
274	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.localSets.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.localSets.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.localSets.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
275	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
276	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope.isGlobal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.scope.isGlobal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
277	[BUG]  [BUGGY]  if(namespace.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {	  if(namespace.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	39	None	replace
278	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  ref.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  ref.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  ref.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	73	None	replace
279	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets!=  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets!=  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets!=  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	73	None	replace
280	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespace();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespace();	  Namespace    namespace    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	27	None	replace
281	[BUG]  [BUGGY]  if(ref.namespace!=  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace!=  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace!=  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
282	[BUG]  [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
283	[BUG]  [BUGGY]  if(namespace.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
284	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
285	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
286	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
287	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
288	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  namespace.isLocal()  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  namespace.isLocal()  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  namespace.isLocal()  &&  ref.scope.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
289	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
290	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  namespace!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
291	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
292	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
293	[BUG]  [BUGGY]  if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
294	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isGlobal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isGlobal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
295	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	59	None	replace
296	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	59	None	replace
297	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()  ||  name.namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()  ||  name.namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()  ||  name.namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	59	None	replace
298	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	59	None	replace
299	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null  &&  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null  &&  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null  &&  name.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	59	None	replace
300	[BUG]  [BUGGY]  Namespace  namespace  =  ref.getNamespace(name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.getNamespace(name);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.getNamespace(name);	  Namespace    namespace    =    name.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	32	None	replace
301	[BUG]  [BUGGY]  Namespace  namespace  =  ref.getNamespace(ref);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.getNamespace(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.getNamespace(ref);	  Namespace    namespace    =    name.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	32	None	replace
302	[BUG]  [BUGGY]  Namespace  namespace  =  refs.getNamespace(name);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.getNamespace(name);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.getNamespace(name);	  Namespace    namespace    =    name.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	32	None	replace
303	[BUG]  [BUGGY]  Namespace  namespace  =  refs.getNamespace(ref);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.getNamespace(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.getNamespace(ref);	  Namespace    namespace    =    name.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	32	None	replace
304	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name.aliasingGets);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name.aliasingGets);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getNamespace(ref,  name.aliasingGets);	  Namespace    namespace    =    compiler.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	55	None	replace
305	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name.localSets);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name.localSets);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getNamespace(ref,  name.localSets);	  Namespace    namespace    =    compiler.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	55	None	replace
306	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name.namespace);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name.namespace);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getNamespace(ref,  name.namespace);	  Namespace    namespace    =    compiler.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	55	None	replace
307	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name.globalSets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name.globalSets);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getNamespace(ref,  name.globalSets);	  Namespace    namespace    =    compiler.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	55	None	replace
308	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getNamespaceForRef(ref);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  compiler.getNamespaceForRef(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getNamespaceForRef(ref);	  Namespace    namespace    =    compiler.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	55	None	replace
309	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getNamespace(ref,  name);	  Namespace    namespace    =    compiler.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	55	None	replace
310	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	51	None	replace
311	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	51	None	replace
312	[BUG]  [BUGGY]  if(namespace.type!=  Type.ALIASING_GET  &&  ref.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.type!=  Type.ALIASING_GET  &&  ref.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type!=  Type.ALIASING_GET  &&  ref.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	51	None	replace
313	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isNamespace())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isNamespace())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.isNamespace())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	51	None	replace
314	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isGlobal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.isGlobal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	51	None	replace
315	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
316	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace  ==  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace  ==  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	49	None	replace
317	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	49	None	replace
318	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name,  namespace))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name,  namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(name,  namespace))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
319	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isAssignableFrom(namespace))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isAssignableFrom(namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isAssignableFrom(namespace))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
320	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(namespace))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(namespace))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
321	[BUG]  [BUGGY]  if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isUnknownType())    {    	non-compiled	[CE]  not  a  statement	78	None	replace
322	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets  ==  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets  ==  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets  ==  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
323	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets!=  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets!=  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets!=  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
324	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.type.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.type.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.type.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace.isLocal()    ||    ref.type.isLocal())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
325	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace.isLocal()    ||    ref.type.isLocal())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
326	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.type.isLocal())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.type.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.type.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace.isLocal()    ||    ref.type.isLocal())    {    	non-compiled	[CE]  not  a  statement	21	None	replace
327	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope!=  null  &&  name.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope!=  null  &&  name.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope!=  null  &&  name.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    name.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
328	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    name.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
329	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  1)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	65	None	replace
330	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
331	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
332	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.getNamespace(ref);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  nameMap.getNamespace(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  nameMap.getNamespace(ref);	  Namespace    namespace    =    name.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	32	None	replace
333	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.isLocal()  ||  name.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.isLocal()  ||  name.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.isLocal()  ||  name.aliasingGets!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
334	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  name.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  name.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  name.aliasingGets!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
335	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name.namespaces);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref,  name.namespaces);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getNamespace(ref,  name.namespaces);	  Namespace    namespace    =    compiler.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	55	None	replace
336	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getLocalNamespace(ref);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  compiler.getLocalNamespace(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getLocalNamespace(ref);	  Namespace    namespace    =    compiler.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	55	None	replace
337	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
338	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
339	[BUG]  [BUGGY]  Namespace  namespace  =  refs.get(ref).namespace;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.get(ref).namespace;  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.get(ref).namespace;	  Namespace    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	63	None	replace
340	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  null)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	16	None	replace
341	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
342	[BUG]  [BUGGY]  if(ref.namespace  ==  null  ||  ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  null  ||  ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  null  ||  ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	60	None	replace
343	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	74	None	replace
344	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >=  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >=  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >=  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	74	None	replace
345	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	74	None	replace
346	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null  &&  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	24	None	replace
347	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	24	None	replace
348	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
349	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  false)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  false)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  false)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
350	[BUG]  [BUGGY]  Name  name  =  ref.getName(ref);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name  name  =  ref.getName(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name  =  ref.getName(ref);	  Name    name    =    ref.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
351	[BUG]  [BUGGY]  Name  name  =  ref.getName(),  namespace;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name  name  =  ref.getName(),  namespace;  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name  =  ref.getName(),  namespace;	  Name    name    =    ref.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
352	[BUG]  [BUGGY]  if(namespace.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(namespace.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {	  if(namespace.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
353	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  ||  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isUnknownType())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
354	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace  ==  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace  ==  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace  ==  null  &&  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
355	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	23	None	replace
356	[BUG]  [BUGGY]  Namespace  namespace  =  name.namespace.cloneTree();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  name.namespace.cloneTree();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  name.namespace.cloneTree();	  Namespace    namespace    =    name.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	31	None	replace
357	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isGlobal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isGlobal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isGlobal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
358	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets!=  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets!=  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets!=  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	70	None	replace
359	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.type!=    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
360	[BUG]  [BUGGY]  if(ref.namespace  ==  null  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  null  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  null  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.type!=    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
361	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.type!=    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
362	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null  &&  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null  &&  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null  &&  name.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	59	None	replace
363	[BUG]  [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {	  if(Ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	77	None	replace
364	[BUG]  [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {	  if(Ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	77	None	replace
365	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
366	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
367	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
368	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
369	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope  ==  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope  ==  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
370	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
371	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  name.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  name.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
372	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
373	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  ==  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  ==  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  ==  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
374	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
375	[BUG]  [BUGGY]  Ref  namespace  =  ref.getNamespaceResolver();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Ref  namespace  =  ref.getNamespaceResolver();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  ref.getNamespaceResolver();	  Ref    namespace    =    ref.getNamespace();    	non-compiled	[CE]  not  a  statement	56	None	replace
376	[BUG]  [BUGGY]  Ref  namespace  =  ref.getRefNamespace();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Ref  namespace  =  ref.getRefNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  ref.getRefNamespace();	  Ref    namespace    =    ref.getNamespace();    	non-compiled	[CE]  not  a  statement	56	None	replace
377	[BUG]  [BUGGY]  Ref  namespace  =  ref.getNamespaceReference();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Ref  namespace  =  ref.getNamespaceReference();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  ref.getNamespaceReference();	  Ref    namespace    =    ref.getNamespace();    	non-compiled	[CE]  not  a  statement	56	None	replace
378	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name,  namespace))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name,  namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name,  namespace))  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
379	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	36	None	replace
380	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isUnknownType())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isUnknownType())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isUnknownType())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
381	[BUG]  [BUGGY]  if(ref.namespace  ==  Name.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  Name.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Name.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.namespace    ==    Type.ALIASING_GET    &&    ref.type    ==    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
382	[BUG]  [BUGGY]  if(ref.namespace!=  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace!=  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace!=  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.namespace    ==    Type.ALIASING_GET    &&    ref.type    ==    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
383	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  name.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
384	[BUG]  [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(ref).namespace;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(ref).namespace;  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Deque  <  Ref>  namespace  =  refs.get(ref).namespace;	  Deque    <    Ref>    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	64	None	replace
385	[BUG]  [BUGGY]  Deque  <  Ref>  namespace  =  refs.remove(ref);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Deque  <  Ref>  namespace  =  refs.remove(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Deque  <  Ref>  namespace  =  refs.remove(ref);	  Deque    <    Ref>    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	64	None	replace
386	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocalName())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocalName())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocalName())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	50	None	replace
387	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isGlobal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isGlobal())  {	  if(namespace.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	39	None	replace
388	[BUG]  [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {	  if(namespace.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	39	None	replace
389	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace  ==  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace  ==  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
390	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
391	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref.namespace))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref.namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref.namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(ref.scope))    {    	non-compiled	[CE]  not  a  statement	75	None	replace
392	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(ref.scope))    {    	non-compiled	[CE]  not  a  statement	75	None	replace
393	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
394	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets!=  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets!=  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets!=  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
395	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >=  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >=  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >=  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
396	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(ref,  ref.namespace);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  nameMap.get(ref,  ref.namespace);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  nameMap.get(ref,  ref.namespace);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	30	None	replace
397	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
398	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
399	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()  ==  null)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()  ==  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
400	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal()!=  null)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
401	[BUG]  [BUGGY]  if(ref.type  ==  Ref.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
402	[BUG]  [BUGGY]  Namespace  namespace  =  refs.getNamespace(name.aliasingGets);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.getNamespace(name.aliasingGets);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.getNamespace(name.aliasingGets);	  Namespace    namespace    =    refs.getNamespace();    	non-compiled	[CE]  not  a  statement	57	None	replace
403	[BUG]  [BUGGY]  Namespace  namespace  =  refs.getLocalNamespace();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.getLocalNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.getLocalNamespace();	  Namespace    namespace    =    refs.getNamespace();    	non-compiled	[CE]  not  a  statement	57	None	replace
404	[BUG]  [BUGGY]  Namespace  namespace  =  refs.getNamespaceResolver();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.getNamespaceResolver();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.getNamespaceResolver();	  Namespace    namespace    =    refs.getNamespace();    	non-compiled	[CE]  not  a  statement	57	None	replace
405	[BUG]  [BUGGY]  if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isGlobal())    {    	non-compiled	[CE]  not  a  statement	44	None	replace
406	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
407	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
408	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocalName())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocalName())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocalName())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
409	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isGlobal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isGlobal())  {	  if(ref.type!=    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
410	[BUG]  [BUGGY]  name.removeRef(ref,  namespace);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  name.removeRef(ref,  namespace);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	name.removeRef(ref,  namespace);	  name.removeRef(ref);    	non-compiled	[CE]  not  a  statement	29	None	replace
411	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	76	None	replace
412	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isNamespace()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isNamespace()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isNamespace()  &&  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	76	None	replace
413	[BUG]  [BUGGY]  if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
414	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocalName())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocalName())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocalName())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
415	[BUG]  [BUGGY]  if(ref.namespace  ==  null  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  null  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  null  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	47	None	replace
416	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	47	None	replace
417	[BUG]  [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {	  if(ref.type    >=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	43	None	replace
418	[BUG]  [BUGGY]  if(ref.namespace  ==  null  &&  ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  null  &&  ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  null  &&  ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	69	None	replace
419	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
420	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  name.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  name.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
421	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
422	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
423	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace  ==  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace  ==  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
424	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace  ==  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace  ==  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
425	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
426	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
427	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	37	None	replace
428	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	37	None	replace
429	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets!=  0)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets!=  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets!=  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	37	None	replace
430	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespace!=  null?  ref.namespace.getNamespace()  :  ref.namespace;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespace!=  null?  ref.namespace.getNamespace()  :  ref.namespace;  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespace!=  null?  ref.namespace.getNamespace()  :  ref.namespace;	  Namespace    namespace    =    ref.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	33	None	replace
431	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespace!=  null?  ref.namespace.getNamespace()  :  ref;  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespace!=  null?  ref.namespace.getNamespace()  :  ref;  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespace!=  null?  ref.namespace.getNamespace()  :  ref;	  Namespace    namespace    =    ref.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	33	None	replace
432	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null  ||  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null  ||  namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
433	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
434	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
435	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope!=  null  ||  namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
436	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
437	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    name.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	38	None	replace
438	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace!=  null  &&  name.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace!=  null  &&  name.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace!=  null  &&  name.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    name.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	38	None	replace
439	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  nameSpace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  nameSpace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  nameSpace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
440	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.globalSets  >  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.globalSets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.globalSets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	71	None	replace
441	[BUG]  [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isGlobal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isGlobal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isGlobal())    {    	non-compiled	[CE]  not  a  statement	44	None	replace
442	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  nameSpace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  nameSpace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal()  ||  nameSpace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
443	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  nameSpace.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  nameSpace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  nameSpace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
444	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  namespace.isGlobal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  namespace.isGlobal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  namespace.isGlobal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
445	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
446	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAliasingGets()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAliasingGets()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAliasingGets()  &&  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	50	None	replace
447	[BUG]  [BUGGY]  Deque  <  Ref>  namespace  =  ref.namespaces.get(ref);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Deque  <  Ref>  namespace  =  ref.namespaces.get(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Deque  <  Ref>  namespace  =  ref.namespaces.get(ref);	  Deque    <    Ref>    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	64	None	replace
448	[BUG]  [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(0);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(0);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Deque  <  Ref>  namespace  =  refs.get(0);	  Deque    <    Ref>    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	64	None	replace
449	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    ||    ref.type!=    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
450	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespaces.getNamespace();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespaces.getNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespaces.getNamespace();	  Namespace    namespace    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	27	None	replace
451	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespaces.get(ref);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespaces.get(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespaces.get(ref);	  Namespace    namespace    =    name.getNamespace();    	non-compiled	[CE]  not  a  statement	27	None	replace
452	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
453	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespace.getRootName();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.namespace.getRootName();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespace.getRootName();	  Namespace    namespace    =    ref.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	33	None	replace
454	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name,  namespace))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name,  namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(name,  namespace))  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
455	[BUG]  [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(namespace))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAssignableFrom(namespace))  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
456	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  name.scope.isAssignableFrom(ref))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  name.scope.isAssignableFrom(ref))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  name.scope.isAssignableFrom(ref))  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	35	None	replace
457	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	47	None	replace
458	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	26	None	replace
459	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isNamespace()  ||  namespace!=  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	49	None	replace
460	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  namespace.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  namespace.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  namespace.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	65	None	replace
461	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isUnknownRef())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isUnknownRef())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isUnknownRef())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
462	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isUnknownName())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isUnknownName())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isUnknownName())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
463	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace  ==  null)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace  ==  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	15	None	replace
464	[BUG]  [BUGGY]  if(ref.namespace  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
465	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.aliasingGets!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
466	[BUG]  [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
467	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {	  if(ref.type!=    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
468	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type!=    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
469	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type!=    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	53	None	replace
470	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  nameSpace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  nameSpace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  nameSpace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
471	[BUG]  [BUGGY]  Namespace  namespace  =  refMap.get(ref);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refMap.get(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refMap.get(ref);	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	30	None	replace
472	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(ref).namespace;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  nameMap.get(ref).namespace;  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  nameMap.get(ref).namespace;	  Namespace    namespace    =    nameMap.get(ref);    	non-compiled	[CE]  not  a  statement	30	None	replace
473	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.namespace!=  null  ||  ref.scope.isLocal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
474	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()!=  null)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.scope.isLocal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
475	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal()!=  null)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal()!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal()!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal()    [Delete]    null)    {    	non-compiled	[CE]  not  a  statement	17	None	replace
476	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace  ==  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace  ==  null)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	12	None	replace
477	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getNamespaceForReference(ref);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  compiler.getNamespaceForReference(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getNamespaceForReference(ref);	  Namespace    namespace    =    compiler.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	55	None	replace
478	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getNamespaceRoot(ref);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  compiler.getNamespaceRoot(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getNamespaceRoot(ref);	  Namespace    namespace    =    compiler.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	55	None	replace
479	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getNamespaceReference(ref);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  compiler.getNamespaceReference(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getNamespaceReference(ref);	  Namespace    namespace    =    compiler.getNamespace(ref);    	non-compiled	[CE]  not  a  statement	55	None	replace
480	[BUG]  [BUGGY]  Name  name  =  ref.namespace();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name  name  =  ref.namespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name  =  ref.namespace();	  Name    name    =    ref.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
481	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  &&  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isUnknownType())    {    	non-compiled	[CE]  not  a  statement	78	None	replace
482	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isUnknownType()  ||  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isUnknownType())    {    	non-compiled	[CE]  not  a  statement	78	None	replace
483	[BUG]  [BUGGY]  Namespace  namespace  =  ref.nameSpace.getNamespace();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  ref.nameSpace.getNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.nameSpace.getNamespace();	  Namespace    namespace    =    name.namespace.getNamespace();    	non-compiled	[CE]  not  a  statement	31	None	replace
484	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isFunctionDeclaration())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isFunctionDeclaration())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isFunctionDeclaration())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
485	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  ==  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
486	[BUG]  [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    name.aliasingGets!=    null)    {    	non-compiled	[CE]  not  a  statement	48	None	replace
487	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
488	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace  ==  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	46	None	replace
489	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
490	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  refs!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  refs!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  refs!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope!=    null)    {    	non-compiled	[CE]  not  a  statement	52	None	replace
491	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	37	None	replace
492	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	37	None	replace
493	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isAssignableFrom(ref))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isAssignableFrom(ref))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isAssignableFrom(ref))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
494	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  refs.isAssignableFrom(namespace))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  refs.isAssignableFrom(namespace))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  refs.isAssignableFrom(namespace))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	10	None	replace
495	[BUG]  [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	76	None	replace
496	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  ==  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  ==  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  ==  0)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  not  a  statement	76	None	replace
497	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  Type.ALIASING_GET)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace  ==  Type.ALIASING_GET)  {	  if(ref.namespace    ==    Type.ALIASING_GET    &&    ref.type    ==    Type.ALIASING_GET)    {    	non-compiled	[CE]  not  a  statement	61	None	replace
498	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal()  &&  namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isGlobal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
499	[BUG]  [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	13	None	replace
500	[BUG]  [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(name.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    name.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	58	None	replace
501	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace)&&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace)&&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace)&&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
502	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace,  name.aliasingGets))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace,  name.aliasingGets))  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace,  name.aliasingGets))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAssignableFrom(namespace))    {    	non-compiled	[CE]  not  a  statement	2	None	replace
503	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    name.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
504	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    name.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
505	[BUG]  [BUGGY]  Namespace  namespace  =  refs.get(ref):  refs.get(ref);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.get(ref):  refs.get(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.get(ref):  refs.get(ref);	  Namespace    namespace    =    refs.get(ref);    	non-compiled	[CE]  ';'  expected	63	None	replace
506	[BUG]  [BUGGY]  Namespace  namespace  =  refs.remove(ref);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.remove(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.remove(ref);	  Namespace    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	63	None	replace
507	[BUG]  [BUGGY]  Namespace  namespace  =  refs.get(ref).namespace();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.get(ref).namespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.get(ref).namespace();	  Namespace    namespace    =    refs.get(ref);    	non-compiled	[CE]  not  a  statement	63	None	replace
508	[BUG]  [BUGGY]  Namespace  namespace  =  refs.getNamespaceReference();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Namespace  namespace  =  refs.getNamespaceReference();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.getNamespaceReference();	  Namespace    namespace    =    refs.getNamespace();    	non-compiled	[CE]  not  a  statement	57	None	replace
509	[BUG]  [BUGGY]  Name  name  =  refs.get(ref);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Name  name  =  refs.get(ref);  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name  =  refs.get(ref);	  name.removeRef(ref);    	non-compiled	[CE]  not  a  statement	29	None	replace
510	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace  ==  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace!=    null    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	41	None	replace
511	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace  ==  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace  ==  null  ||  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace  ==  null  ||  ref.scope.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	23	None	replace
512	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
513	[BUG]  [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
514	[BUG]  [BUGGY]  Ref  namespace  =  refs.getNamespace();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Ref  namespace  =  refs.getNamespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  refs.getNamespace();	  Ref    namespace    =    ref.getNamespace();    	non-compiled	[CE]  not  a  statement	56	None	replace
515	[BUG]  [BUGGY]  Ref  namespace  =  ref.namespace();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  Ref  namespace  =  ref.namespace();  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  ref.namespace();	  Ref    namespace    =    ref.getNamespace();    	non-compiled	[CE]  not  a  statement	56	None	replace
516	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isFunctionDeclaration())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isFunctionDeclaration())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isFunctionDeclaration())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
517	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAllowAliasingGets())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAllowAliasingGets())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAllowAliasingGets())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isAliasingGets())    {    	non-compiled	[CE]  not  a  statement	45	None	replace
518	[BUG]  [BUGGY]  if(ref.namespace  ==  null  &&  ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.namespace  ==  null  &&  ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  null  &&  ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.namespace!=    null    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	69	None	replace
519	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal()  &&  namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal()  &&  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal()  &&  namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	51	None	replace
520	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	51	None	replace
521	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal()  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal()  ||  namespace.isLocal())  {  [BUGGY]        if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal()  ||  namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.isLocal())    {    	non-compiled	[CE]  not  a  statement	51	None	replace
