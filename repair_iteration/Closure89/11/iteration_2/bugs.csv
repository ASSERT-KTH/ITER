bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
2	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace))  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
3	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
4	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
5	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
6	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
7	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  name.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
8	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
9	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
10	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(namespace))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(namespace))  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isAssignableFrom(namespace))  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
11	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
12	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
13	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
14	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
15	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
16	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
17	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()  [Delete]  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()  [Delete]  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal()  [Delete]  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
18	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
19	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
20	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
21	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type.isLocal())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace.isLocal()  ||  ref.type.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
22	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  ||  ref.type!=  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
23	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
24	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
25	[BUG]  [BUGGY]  if(namespace.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(namespace.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
26	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
27	[BUG]  [BUGGY]  Namespace  namespace  =  name.getNamespace();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  Namespace  namespace  =  name.getNamespace();  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  name.getNamespace();	      	non-compiled	[CE]  not  a  statement	5	None	replace
28	[BUG]  [BUGGY]  Name  name  =  ref.getName();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  Name  name  =  ref.getName();  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Name  name  =  ref.getName();	      	non-compiled	[CE]  not  a  statement	5	None	replace
29	[BUG]  [BUGGY]  name.removeRef(ref);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  name.removeRef(ref);  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	name.removeRef(ref);	      	non-compiled	[CE]  not  a  statement	5	None	replace
30	[BUG]  [BUGGY]  Namespace  namespace  =  nameMap.get(ref);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  Namespace  namespace  =  nameMap.get(ref);  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  nameMap.get(ref);	      	non-compiled	[CE]  not  a  statement	5	None	replace
31	[BUG]  [BUGGY]  Namespace  namespace  =  name.namespace.getNamespace();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  Namespace  namespace  =  name.namespace.getNamespace();  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  name.namespace.getNamespace();	      	non-compiled	[CE]  not  a  statement	5	None	replace
32	[BUG]  [BUGGY]  Namespace  namespace  =  name.getNamespace(ref);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  Namespace  namespace  =  name.getNamespace(ref);  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  name.getNamespace(ref);	      	non-compiled	[CE]  not  a  statement	5	None	replace
33	[BUG]  [BUGGY]  Namespace  namespace  =  ref.namespace.getNamespace();  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  Namespace  namespace  =  ref.namespace.getNamespace();  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  ref.namespace.getNamespace();	      	non-compiled	[CE]  not  a  statement	5	None	replace
34	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
35	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace))  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(namespace))  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
36	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
37	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
38	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
39	[BUG]  [BUGGY]  if(namespace.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(namespace.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(namespace.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
40	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
41	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
42	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
43	[BUG]  [BUGGY]  if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  >=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
44	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isGlobal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
45	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAliasingGets())  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
46	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
47	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace!=  null  ||  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
48	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
49	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
50	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAliasingGets())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAliasingGets())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isAliasingGets())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
51	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
52	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
53	[BUG]  [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
54	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
55	[BUG]  [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  Namespace  namespace  =  compiler.getNamespace(ref);  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  compiler.getNamespace(ref);	      	non-compiled	[CE]  not  a  statement	5	None	replace
56	[BUG]  [BUGGY]  Ref  namespace  =  ref.getNamespace();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  Ref  namespace  =  ref.getNamespace();  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Ref  namespace  =  ref.getNamespace();	      	non-compiled	[CE]  not  a  statement	5	None	replace
57	[BUG]  [BUGGY]  Namespace  namespace  =  refs.getNamespace();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  Namespace  namespace  =  refs.getNamespace();  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.getNamespace();	      	non-compiled	[CE]  not  a  statement	5	None	replace
58	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.namespace!=  null)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace!=    null)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
59	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null  &&  ref.namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null  &&  ref.namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.namespace!=  null  &&  ref.namespace.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
60	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.namespace!=  null  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
61	[BUG]  [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.namespace  ==  Type.ALIASING_GET  &&  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
62	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.namespace.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.namespace.isLocal())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
63	[BUG]  [BUGGY]  Namespace  namespace  =  refs.get(ref);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  Namespace  namespace  =  refs.get(ref);  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Namespace  namespace  =  refs.get(ref);	      	non-compiled	[CE]  not  a  statement	5	None	replace
64	[BUG]  [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(ref);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  Deque  <  Ref>  namespace  =  refs.get(ref);  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	Deque  <  Ref>  namespace  =  refs.get(ref);	      	non-compiled	[CE]  not  a  statement	5	None	replace
65	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
66	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
67	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  namespace.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  &&  namespace.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
68	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
69	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.namespace!=  null  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
70	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
71	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
72	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  &&  ref.scope.isLocal()  ||  namespace.isLocal())  {	  if(ref.type    ==    Ref.NAMESPACE_REDEFINED_WARNING    &&    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
73	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
74	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
75	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref.scope))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref.scope))  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isAssignableFrom(ref.scope))  {	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
76	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  &&  name.aliasingGets  >  0)  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
77	[BUG]  [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(Ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
78	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);  for  (Ref  ref  :  refs)  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {  [BUGGY]      if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	170	170	8	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
