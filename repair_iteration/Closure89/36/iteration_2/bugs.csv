bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Name  p  =  n.props.get(alias);  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);	      	non-compiled	[CE]  not  a  statement	4	None	replace
2	[BUG]  [BUGGY]  Name  p  =  n.props.getName();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Name  p  =  n.props.getName();  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getName();	      	non-compiled	[CE]  not  a  statement	4	None	replace
3	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  p.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  p.name);  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  p.name);	      	non-compiled	[CE]  not  a  statement	4	None	replace
4	[BUG]  [BUGGY]  alias  =  n.props.getName();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  alias  =  n.props.getName();  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	alias  =  n.props.getName();	      	non-compiled	[CE]  not  a  statement	4	None	replace
5	[BUG]  [BUGGY]  Node  p  =  n.props.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Node  p  =  n.props.getFirstChild();  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.getFirstChild();	      	non-compiled	[CE]  not  a  statement	4	None	replace
6	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);	      	non-compiled	[CE]  not  a  statement	4	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME);  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Preconditions.checkState(n.props.getType()  ==  Token.NAME);	      	non-compiled	[CE]  not  a  statement	4	None	replace
8	[BUG]  [BUGGY]  for(Name  p  :  n.name,  alias)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.name,  alias)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name,  alias)  {	  for(Name    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
9	[BUG]  [BUGGY]  for(Name  p  :  n.names)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.names)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.names)  {	  for(Name    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
10	[BUG]  [BUGGY]  for(String  p  :  n.name)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(String  p  :  n.name)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.name)  {	  for(Name    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
11	[BUG]  [BUGGY]  For(Name  p  :  n.name)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  For(Name  p  :  n.name)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.name)  {	  for(Name    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
12	[BUG]  [BUGGY]  for(Name  p  :  n.props.names())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.names())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.names())  {	  for(Name    p    :    n.props.values())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
13	[BUG]  [BUGGY]  for(Name  p  :  n.name.values())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.name.values())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.values())  {	  for(Name    p    :    n.props.values())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
14	[BUG]  [BUGGY]  for(Name  p  :  n.props.name())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.name())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name())  {	  for(Name    p    :    n.props.values())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
15	[BUG]  [BUGGY]  for(Name  p  :  n.props.getName())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.getName())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.getName())  {	  for(Name    p    :    n.props.values())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
16	[BUG]  [BUGGY]  for(Name  p  :  n.props.nameSet())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.nameSet())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.nameSet())  {	  for(Name    p    :    n.props.keySet())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
17	[BUG]  [BUGGY]  For(Name  p  :  n.props.keySet())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  For(Name  p  :  n.props.keySet())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.keySet())  {	  for(Name    p    :    n.props.keySet())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
18	[BUG]  [BUGGY]  for(Name  p  :  n.name.keySet())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.name.keySet())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.keySet())  {	  for(Name    p    :    n.props.keySet())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
19	[BUG]  [BUGGY]  for(Name  p  :  n.props.name.asList())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.name.asList())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name.asList())  {	  for(Name    p    :    n.props.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
20	[BUG]  [BUGGY]  for(Name  p  :  n.name.asList())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.name.asList())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.asList())  {	  for(Name    p    :    n.props.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
21	[BUG]  [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name]))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name]))  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.toArray(new  Name[p.name]))  {	  for(Name    p    :    n.props.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
22	[BUG]  [BUGGY]  For  (Name  p  :  n.props.name,  alias)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  For  (Name  p  :  n.props.name,  alias)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.name,  alias)  {	  For    (Name    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
23	[BUG]  [BUGGY]  For  (String  p  :  n.props.name)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  For  (String  p  :  n.props.name)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (String  p  :  n.props.name)  {	  For    (Name    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
24	[BUG]  [BUGGY]  For  (Name  p  :  n.props.name,  p.name)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  For  (Name  p  :  n.props.name,  p.name)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.name,  p.name)  {	  For    (Name    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
25	[BUG]  [BUGGY]  For  (Name  p  :  n.props.getName())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  For  (Name  p  :  n.props.getName())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.getName())  {	  For    (Name    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
26	[BUG]  [BUGGY]  For  (Name  p  :  n.props)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  For  (Name  p  :  n.props)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props)  {	  For    (Name    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
27	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  alias)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.name,  alias)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  alias)  {	  for(Name    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
28	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  p.name)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.name,  p.name)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  p.name)  {	  for(Name    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
29	[BUG]  [BUGGY]  Context  ctxt  =  Context.getCurrentContext();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Context  ctxt  =  Context.getCurrentContext();  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.getCurrentContext();	      	non-compiled	[CE]  not  a  statement	4	None	replace
30	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  p.name);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  p.name);  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  p.name);	      	non-compiled	[CE]  not  a  statement	4	None	replace
31	[BUG]  [BUGGY]  n.props  =  n.props;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  n.props  =  n.props;  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	n.props  =  n.props;	      	non-compiled	[CE]  not  a  statement	4	None	replace
32	[BUG]  [BUGGY]  for(Name  p  :  n.props.entrySet())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.entrySet())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.entrySet())  {	  for(Name    p    :    n.props.keySet())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
33	[BUG]  [BUGGY]  for(Name  p  :  n.props.get(alias))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.get(alias))  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.get(alias))  {	  for(Name    p    :    n.props.keySet())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
34	[BUG]  [BUGGY]  for(Name  p  :  n.props.list())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.list())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.list())  {	  for(Name    p    :    n.props.keySet())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
35	[BUG]  [BUGGY]  for(String  p  :  n.props)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(String  p  :  n.props)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props)  {	  for(Name    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
36	[BUG]  [BUGGY]  for(String  p  :  n.props.name)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(String  p  :  n.props.name)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props.name)  {	  for(Name    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
37	[BUG]  [BUGGY]  for(Name  p  :  n.props,  alias)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props,  alias)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props,  alias)  {	  for(Name    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
38	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  alias.name)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.name,  alias.name)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  alias.name)  {	  for(Name    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
39	[BUG]  [BUGGY]  for(Name  p  :  n.props.asName)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  for(Name  p  :  n.props.asName)  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.asName)  {	  for(Name    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
40	[BUG]  [BUGGY]  For(Name  p  :  n.props.values())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  For(Name  p  :  n.props.values())  {  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.values())  {	  for(Name    p    :    n.props.values())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
41	[BUG]  [BUGGY]  p.name  =  n.props.getName();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  p.name  =  n.props.getName();  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	p.name  =  n.props.getName();	      	non-compiled	[CE]  not  a  statement	4	None	replace
42	[BUG]  [BUGGY]  Name  p  =  n.props.clone();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Name  p  =  n.props.clone();  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.clone();	      	non-compiled	[CE]  not  a  statement	4	None	replace
43	[BUG]  [BUGGY]  Name  p  =  n.props.remove(alias);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Name  p  =  n.props.remove(alias);  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.remove(alias);	      	non-compiled	[CE]  not  a  statement	4	None	replace
44	[BUG]  [BUGGY]  Name  p  =  n.props.cloneTree();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Name  p  =  n.props.cloneTree();  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.cloneTree();	      	non-compiled	[CE]  not  a  statement	4	None	replace
45	[BUG]  [BUGGY]  Node  p  =  n.props.get(alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;    [BUGGY]  Node  p  =  n.props.get(alias);  [BUGGY]    String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.get(alias);	      	non-compiled	[CE]  not  a  statement	4	None	replace
