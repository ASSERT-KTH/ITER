bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(Name  p  :  n.props.names())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.names())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.names())  {	  For(Name    p    :    n.props.values())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
2	[BUG]  [BUGGY]  For(Name  p  :  n.props.name())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.name())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.name())  {	  For(Name    p    :    n.props.values())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
3	[BUG]  [BUGGY]  For(Name  p  :  n.name.values())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.name.values())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.name.values())  {	  For(Name    p    :    n.props.values())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
4	[BUG]  [BUGGY]  For(Name  p  :  n.props.name,  p.values())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.name,  p.values())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.name,  p.values())  {	  For(Name    p    :    n.props.values())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
5	[BUG]  [BUGGY]  for(Name  p  :  n.props,  alias.name)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props,  alias.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props,  alias.name)  {	  for(Name    p    :    n.props.name,    alias.name)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
6	[BUG]  [BUGGY]  for(Name  p  :  n.name,  alias.name)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name,  alias.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name,  alias.name)  {	  for(Name    p    :    n.props.name,    alias.name)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
7	[BUG]  [BUGGY]  For(Name  p  :  n.props.name,  alias.name)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.name,  alias.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.name,  alias.name)  {	  for(Name    p    :    n.props.name,    alias.name)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
8	[BUG]  [BUGGY]  for(Name  p  :  n.props,  propAlias)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props,  propAlias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props,  propAlias)  {	  for(Name    p    :    n.props,    alias)    {    	non-compiled	[CE]  not  a  statement	37	None	replace
9	[BUG]  [BUGGY]  For(Name  p  :  n.props,  alias)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props,  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props,  alias)  {	  for(Name    p    :    n.props,    alias)    {    	non-compiled	[CE]  not  a  statement	37	None	replace
10	[BUG]  [BUGGY]  for(Name  p  :  n.props,  nameMap)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props,  nameMap)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props,  nameMap)  {	  for(Name    p    :    n.props,    alias)    {    	non-compiled	[CE]  not  a  statement	37	None	replace
11	[BUG]  [BUGGY]  for(Name  p  :  n.props.name.toLowerCase())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name.toLowerCase())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name.toLowerCase())  {	  for(Name    p    :    n.props.name.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
12	[BUG]  [BUGGY]  for(Name  p  :  n.props.name.as())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name.as())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name.as())  {	  for(Name    p    :    n.props.name.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
13	[BUG]  [BUGGY]  for(Name  p  :  n.props.name.toString())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name.toString())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name.toString())  {	  for(Name    p    :    n.props.name.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
14	[BUG]  [BUGGY]  for(Name  p  :  n.props.name.toAsList())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name.toAsList())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name.toAsList())  {	  for(Name    p    :    n.props.name.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
15	[BUG]  [BUGGY]  for(Name  p  :  n.props.name.toArray())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name.toArray())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name.toArray())  {	  for(Name    p    :    n.props.name.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
16	[BUG]  [BUGGY]  for(String  p  :  n.props.name,  alias)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props.name,  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props.name,  alias)  {	  for(String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
17	[BUG]  [BUGGY]  for(String  p  :  n.props.name,  p.name)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props.name,  p.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props.name,  p.name)  {	  for(String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
18	[BUG]  [BUGGY]  for(String  p  :  n.props.getName())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props.getName())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props.getName())  {	  for(String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
19	[BUG]  [BUGGY]  for(String  prop  :  n.props.name)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  prop  :  n.props.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  prop  :  n.props.name)  {	  for(String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
20	[BUG]  [BUGGY]  for(String  p  :  n.props.keySet())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props.keySet())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props.keySet())  {	  for(String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
21	[BUG]  [BUGGY]  for(String  p  :  n.props.name,  propAlias)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props.name,  propAlias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props.name,  propAlias)  {	  for(String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
22	[BUG]  [BUGGY]  Name  p  =  n.props.getValue(alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getValue(alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getValue(alias);	  Name    p    =    n.props.remove(alias);    	non-compiled	[CE]  not  a  statement	43	None	replace
23	[BUG]  [BUGGY]  Name  p  =  n.props.getProperty(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getProperty(alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getProperty(alias);	  Name    p    =    n.props.remove(alias);    	non-compiled	[CE]  not  a  statement	43	None	replace
24	[BUG]  [BUGGY]  Name  p  =  n.properties.get(alias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.properties.get(alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.properties.get(alias);	  Name    p    =    n.props.remove(alias);    	non-compiled	[CE]  not  a  statement	43	None	replace
25	[BUG]  [BUGGY]  Name  p  =  n.props.getPath();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getPath();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getPath();	  Name    p    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	2	None	replace
26	[BUG]  [BUGGY]  Name  p  =  n.props.getPropertyName();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getPropertyName();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getPropertyName();	  Name    p    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	2	None	replace
27	[BUG]  [BUGGY]  Name  p  =  n.props.getName()  +  1;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getName()  +  1;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getName()  +  1;	  Name    p    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	2	None	replace
28	[BUG]  [BUGGY]  Name  p  =  n.props.getPrettyPrint();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getPrettyPrint();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getPrettyPrint();	  Name    p    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	2	None	replace
29	[BUG]  [BUGGY]  Name  p  =  n.props.getPrefix();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getPrefix();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getPrefix();	  Name    p    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	2	None	replace
30	[BUG]  [BUGGY]  Name  p  =  n.props.getParent();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getParent();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getParent();	  Name    p    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	2	None	replace
31	[BUG]  [BUGGY]  for(Name  p  :  n.names())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.names())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.names())  {	  for(Name    p    :    n.props.names())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
32	[BUG]  [BUGGY]  for(Name  p  :  n.props.nameMap())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.nameMap())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.nameMap())  {	  for(Name    p    :    n.props.names())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
33	[BUG]  [BUGGY]  Node  p  =  n.props.get(alias,  n.name);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.get(alias,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.get(alias,  n.name);	  Node    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	45	None	replace
34	[BUG]  [BUGGY]  Node  p  =  n.props.get(alias).name;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.get(alias).name;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.get(alias).name;	  Node    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	45	None	replace
35	[BUG]  [BUGGY]  Node  p  =  n.props.get(alias  +  1);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.get(alias  +  1);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.get(alias  +  1);	  Node    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	45	None	replace
36	[BUG]  [BUGGY]  Node  p  =  n.props.get(alias)+  1;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.get(alias)+  1;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.get(alias)+  1;	  Node    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	45	None	replace
37	[BUG]  [BUGGY]  Node  p  =  n.props.get(alias,  propAlias);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.get(alias,  propAlias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.get(alias,  propAlias);	  Node    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	45	None	replace
38	[BUG]  [BUGGY]  Node  p  =  n.props.get(alias.name);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.get(alias.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.get(alias.name);	  Node    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	45	None	replace
39	[BUG]  [BUGGY]  For(Name  p  :  n.props.nameSet())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.nameSet())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.nameSet())  {	  for(Name    p    :    n.props.nameSet())    {    	non-compiled	[CE]  not  a  statement	16	None	replace
40	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  n.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  n.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendants(p,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
41	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  propAlias);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendants(p,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
42	[BUG]  [BUGGY]  Name  p  =  n.props.get(0);  flattenReferencesToCollapsibleDescendants(p,  n.name);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(0);  flattenReferencesToCollapsibleDescendants(p,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(0);  flattenReferencesToCollapsibleDescendants(p,  n.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendants(p,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
43	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  d.name);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  d.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  d.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendants(p,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
44	[BUG]  [BUGGY]  For  (Name  p  :  n.props,  p.name)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.props,  p.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props,  p.name)  {	  For    (Name    p    :    n.props.name,    p.name)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
45	[BUG]  [BUGGY]  For  (Name  p  :  n.name,  p.name)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.name,  p.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.name,  p.name)  {	  For    (Name    p    :    n.props.name,    p.name)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
46	[BUG]  [BUGGY]  For  (String  p  :  n.props.name,  p.name)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (String  p  :  n.props.name,  p.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (String  p  :  n.props.name,  p.name)  {	  For    (Name    p    :    n.props.name,    p.name)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
47	[BUG]  [BUGGY]  For  (Name  p  :  n.props.name,  p.alias)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.props.name,  p.alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.name,  p.alias)  {	  For    (Name    p    :    n.props.name,    p.name)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
48	[BUG]  [BUGGY]  for(Name  p  :  n.name.props.keySet())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.props.keySet())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.props.keySet())  {	  for(Name    p    :    n.name.keySet())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
49	[BUG]  [BUGGY]  for(Name  p  :  n.names.keySet())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.names.keySet())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.names.keySet())  {	  for(Name    p    :    n.name.keySet())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
50	[BUG]  [BUGGY]  for(Name  p  :  n.name.getKey())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.getKey())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.getKey())  {	  for(Name    p    :    n.name.keySet())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
51	[BUG]  [BUGGY]  for(Name  p  :  n.name.entrySet())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.entrySet())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.entrySet())  {	  for(Name    p    :    n.name.keySet())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
52	[BUG]  [BUGGY]  for(Name  p  :  n.names,  alias)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.names,  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.names,  alias)  {	  for(Name    p    :    n.names)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
53	[BUG]  [BUGGY]  For(Name  p  :  n.names)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.names)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.names)  {	  for(Name    p    :    n.names)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
54	[BUG]  [BUGGY]  for(Name  p  :  n.names,  propAlias)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.names,  propAlias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.names,  propAlias)  {	  for(Name    p    :    n.names)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
55	[BUG]  [BUGGY]  for(Name  p  :  n.name.list())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.list())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.list())  {	  for(Name    p    :    n.props.list())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
56	[BUG]  [BUGGY]  for(Name  p  :  n.name.toLowerCase())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.toLowerCase())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.toLowerCase())  {	  for(Name    p    :    n.name.asList())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
57	[BUG]  [BUGGY]  for(Name  p  :  n.name.asString())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.asString())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.asString())  {	  for(Name    p    :    n.name.asList())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
58	[BUG]  [BUGGY]  for(Name  p  :  n.name.toCharArray())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.toCharArray())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.toCharArray())  {	  for(Name    p    :    n.name.asList())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
59	[BUG]  [BUGGY]  for(Name  p  :  n.name.toString())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.toString())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.toString())  {	  for(Name    p    :    n.name.asList())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
60	[BUG]  [BUGGY]  for(Name  p  :  n.name.as())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.as())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.as())  {	  for(Name    p    :    n.name.asList())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
61	[BUG]  [BUGGY]  Name  p  =  n.props.cloneTree(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.cloneTree(alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.cloneTree(alias);	  Name    p    =    n.props.cloneTree();    	non-compiled	[CE]  not  a  statement	44	None	replace
62	[BUG]  [BUGGY]  Name  p  =  n.props.cloneName();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.cloneName();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.cloneName();	  Name    p    =    n.props.cloneTree();    	non-compiled	[CE]  not  a  statement	44	None	replace
63	[BUG]  [BUGGY]  Name  p  =  n.props.clonePath();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.clonePath();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.clonePath();	  Name    p    =    n.props.cloneTree();    	non-compiled	[CE]  not  a  statement	44	None	replace
64	[BUG]  [BUGGY]  Name  p  =  n.props.cloneAlias();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.cloneAlias();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.cloneAlias();	  Name    p    =    n.props.cloneTree();    	non-compiled	[CE]  not  a  statement	44	None	replace
65	[BUG]  [BUGGY]  alias  =  n.props.getName()  + ": "  +  n.name;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  alias  =  n.props.getName()  + ": "  +  n.name;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	alias  =  n.props.getName()  + ": "  +  n.name;	  alias    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	4	None	replace
66	[BUG]  [BUGGY]  alias  =  n.props.getLocalName();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  alias  =  n.props.getLocalName();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	alias  =  n.props.getLocalName();	  alias    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	4	None	replace
67	[BUG]  [BUGGY]  alias  =  n.props.getName()  + ", "  +  n.name;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  alias  =  n.props.getName()  + ", "  +  n.name;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	alias  =  n.props.getName()  + ", "  +  n.name;	  alias    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	4	None	replace
68	[BUG]  [BUGGY]  alias  =  n.props.getName()  + "_ "  +  n.name;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  alias  =  n.props.getName()  + "_ "  +  n.name;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	alias  =  n.props.getName()  + "_ "  +  n.name;	  alias    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	4	None	replace
69	[BUG]  [BUGGY]  alias  =  n.props.getName()  +  1;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  alias  =  n.props.getName()  +  1;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	alias  =  n.props.getName()  +  1;	  alias    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	4	None	replace
70	[BUG]  [BUGGY]  For(Name  p  :  n.name.keySet())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.name.keySet())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.name.keySet())  {	  For(Name    p    :    n.props.keySet())    {    	non-compiled	[CE]  not  a  statement	17	None	replace
71	[BUG]  [BUGGY]  For(String  p  :  n.props.keySet())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(String  p  :  n.props.keySet())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(String  p  :  n.props.keySet())  {	  For(Name    p    :    n.props.keySet())    {    	non-compiled	[CE]  not  a  statement	17	None	replace
72	[BUG]  [BUGGY]  For(Name  prop  :  n.props.keySet())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  prop  :  n.props.keySet())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  prop  :  n.props.keySet())  {	  For(Name    p    :    n.props.keySet())    {    	non-compiled	[CE]  not  a  statement	17	None	replace
73	[BUG]  [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name]),  alias)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name]),  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.toArray(new  Name[p.name]),  alias)  {	  for(Name    p    :    n.props.toArray(new    Name[p.name]))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
74	[BUG]  [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name],  alias))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name],  alias))  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.toArray(new  Name[p.name],  alias))  {	  for(Name    p    :    n.props.toArray(new    Name[p.name]))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
75	[BUG]  [BUGGY]  For(Name  p  :  n.props.toArray(new  Name[p.name]))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.toArray(new  Name[p.name]))  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.toArray(new  Name[p.name]))  {	  for(Name    p    :    n.props.toArray(new    Name[p.name]))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
76	[BUG]  [BUGGY]  for(Name  p  :  n.props.keySet().toArray(new  Name[p.name]))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.keySet().toArray(new  Name[p.name]))  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.keySet().toArray(new  Name[p.name]))  {	  for(Name    p    :    n.props.toArray(new    Name[p.name]))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
77	[BUG]  [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name]));  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name]));  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.toArray(new  Name[p.name]));	  for(Name    p    :    n.props.toArray(new    Name[p.name]))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
78	[BUG]  [BUGGY]  For  (String  p  :  n.props)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (String  p  :  n.props)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (String  p  :  n.props)  {	  For    (Name    p    :    n.props)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
79	[BUG]  [BUGGY]  For  (Name  prop  :  n.props)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  prop  :  n.props)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  prop  :  n.props)  {	  For    (Name    p    :    n.props)    {    	non-compiled	[CE]  not  a  statement	26	None	replace
80	[BUG]  [BUGGY]  For(Name  p  :  n.name,  alias)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.name,  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.name,  alias)  {	  For(Name    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
81	[BUG]  [BUGGY]  For(String  p  :  n.name)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(String  p  :  n.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(String  p  :  n.name)  {	  For(Name    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
82	[BUG]  [BUGGY]  For(Name  p  :  n,  alias)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n,  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n,  alias)  {	  For(Name    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
83	[BUG]  [BUGGY]  Node  p  =  n.props.getLastChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.getLastChild();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.getLastChild();	  Node    p    =    n.props.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
84	[BUG]  [BUGGY]  Node  p  =  n.props.getNext();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.getNext();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.getNext();	  Node    p    =    n.props.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
85	[BUG]  [BUGGY]  Node  p  =  n.props.getPreviousChild();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.getPreviousChild();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.getPreviousChild();	  Node    p    =    n.props.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
86	[BUG]  [BUGGY]  Node  p  =  n.props.getParent();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.getParent();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.getParent();	  Node    p    =    n.props.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
87	[BUG]  [BUGGY]  Node  p  =  n.props.getQualifiedName();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.getQualifiedName();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.getQualifiedName();	  Node    p    =    n.props.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
88	[BUG]  [BUGGY]  Node  p  =  n.props.getChildCount();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.getChildCount();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.getChildCount();	  Node    p    =    n.props.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
89	[BUG]  [BUGGY]  for(Name  p  :  n.name,  p.name)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name,  p.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name,  p.name)  {	  for(Name    p    :    n.props.name,    p.name)    {    	non-compiled	[CE]  not  a  statement	28	None	replace
90	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  p.alias)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name,  p.alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  p.alias)  {	  for(Name    p    :    n.props.name,    p.name)    {    	non-compiled	[CE]  not  a  statement	28	None	replace
91	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
92	[BUG]  [BUGGY]  Name  p  =  n.props.get(0);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(0);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(0);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
93	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantsNames(p,  n.name);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantsNames(p,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantsNames(p,  n.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
94	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  FlattenReferencesToCollapsibleDescendantNames(p,  n.name);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  FlattenReferencesToCollapsibleDescendantNames(p,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  FlattenReferencesToCollapsibleDescendantNames(p,  n.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
95	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  d.name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  d.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  d.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
96	[BUG]  [BUGGY]  n.props  =  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  n.props  =  alias;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	n.props  =  alias;	  n.props    =    n.props;    	non-compiled	[CE]  not  a  statement	31	None	replace
97	[BUG]  [BUGGY]  n.props  =  p.props;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  n.props  =  p.props;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	n.props  =  p.props;	  n.props    =    n.props;    	non-compiled	[CE]  not  a  statement	31	None	replace
98	[BUG]  [BUGGY]  n.props  =  props;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  n.props  =  props;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	n.props  =  props;	  n.props    =    n.props;    	non-compiled	[CE]  not  a  statement	31	None	replace
99	[BUG]  [BUGGY]  n.props  =  p.name;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  n.props  =  p.name;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	n.props  =  p.name;	  n.props    =    n.props;    	non-compiled	[CE]  not  a  statement	31	None	replace
100	[BUG]  [BUGGY]  n.props  =  n.properties;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  n.props  =  n.properties;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	n.props  =  n.properties;	  n.props    =    n.props;    	non-compiled	[CE]  not  a  statement	31	None	replace
101	[BUG]  [BUGGY]  for(Name  p  :  n.name,  propAlias)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name,  propAlias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name,  propAlias)  {	  for(Name    p    :    n.name,    alias)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
102	[BUG]  [BUGGY]  for(String  p  :  n.name,  alias)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.name,  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.name,  alias)  {	  for(Name    p    :    n.name,    alias)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME,  p.name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME,  p.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Preconditions.checkState(n.props.getType()  ==  Token.NAME,  p.name);	  Preconditions.checkState(n.props.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	7	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null  ||  n.props.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Preconditions.checkState(n.props!=  null  ||  n.props.getType()  ==  Token.NAME);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Preconditions.checkState(n.props!=  null  ||  n.props.getType()  ==  Token.NAME);	  Preconditions.checkState(n.props.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	7	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME  ||  n.props.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME  ||  n.props.getType()  ==  Token.NAME);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Preconditions.checkState(n.props.getType()  ==  Token.NAME  ||  n.props.getType()  ==  Token.NAME);	  Preconditions.checkState(n.props.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	7	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(n.props.getType()!=  Token.NAME);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Preconditions.checkState(n.props.getType()!=  Token.NAME);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Preconditions.checkState(n.props.getType()!=  Token.NAME);	  Preconditions.checkState(n.props.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	7	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(n.props  ==  null  ||  n.props.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Preconditions.checkState(n.props  ==  null  ||  n.props.getType()  ==  Token.NAME);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Preconditions.checkState(n.props  ==  null  ||  n.props.getType()  ==  Token.NAME);	  Preconditions.checkState(n.props.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	7	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME,  alias);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME,  alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Preconditions.checkState(n.props.getType()  ==  Token.NAME,  alias);	  Preconditions.checkState(n.props.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	7	None	replace
109	[BUG]  [BUGGY]  for(Name  p  :  n.name.props())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.props())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.props())  {	  for(Name    p    :    n.name.values())    {    	non-compiled	[CE]  not  a  statement	13	None	replace
110	[BUG]  [BUGGY]  for(Name  p  :  n.name.getValues())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.getValues())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.getValues())  {	  for(Name    p    :    n.name.values())    {    	non-compiled	[CE]  not  a  statement	13	None	replace
111	[BUG]  [BUGGY]  p.name  =  n.props.getName()  +  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  p.name  =  n.props.getName()  +  1;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	p.name  =  n.props.getName()  +  1;	  p.name    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	41	None	replace
112	[BUG]  [BUGGY]  p.name  =  n.props.getLocalName();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  p.name  =  n.props.getLocalName();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	p.name  =  n.props.getLocalName();	  p.name    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	41	None	replace
113	[BUG]  [BUGGY]  p.name  =  n.props.getName()  + ", ";  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  p.name  =  n.props.getName()  + ", ";  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	p.name  =  n.props.getName()  + ", ";	  p.name    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	41	None	replace
114	[BUG]  [BUGGY]  p.name  =  n.props.getName()  + ": ";  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  p.name  =  n.props.getName()  + ": ";  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	p.name  =  n.props.getName()  + ": ";	  p.name    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	41	None	replace
115	[BUG]  [BUGGY]  p.name  =  n.name.getName();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  p.name  =  n.name.getName();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	p.name  =  n.name.getName();	  p.name    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	41	None	replace
116	[BUG]  [BUGGY]  for(String  p  :  n.names)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.names)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.names)  {	  for(String    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
117	[BUG]  [BUGGY]  Name  p  =  n.props.toArray(new  Name[n.props.size()  ]);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.toArray(new  Name[n.props.size()  ]);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.toArray(new  Name[n.props.size()  ]);	  Name    p    =    n.props.clone();    	non-compiled	[CE]  not  a  statement	42	None	replace
118	[BUG]  [BUGGY]  Name  p  =  n.props.getProperty(alias).clone();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getProperty(alias).clone();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getProperty(alias).clone();	  Name    p    =    n.props.clone();    	non-compiled	[CE]  not  a  statement	42	None	replace
119	[BUG]  [BUGGY]  for(Name  p  :  n.props.name(),  alias)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name(),  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name(),  alias)  {	  for(Name    p    :    n.props.name())    {    	non-compiled	[CE]  not  a  statement	14	None	replace
120	[BUG]  [BUGGY]  Context  ctxt  =  Context.currentContext();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Context  ctxt  =  Context.currentContext();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.currentContext();	  Context    ctxt    =    Context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	29	None	replace
121	[BUG]  [BUGGY]  Context  ctxt  =  Context.getCurrentContext(n.props);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Context  ctxt  =  Context.getCurrentContext(n.props);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.getCurrentContext(n.props);	  Context    ctxt    =    Context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	29	None	replace
122	[BUG]  [BUGGY]  Context  ctxt  =  Context.getCurrentContext(n.name);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Context  ctxt  =  Context.getCurrentContext(n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.getCurrentContext(n.name);	  Context    ctxt    =    Context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	29	None	replace
123	[BUG]  [BUGGY]  Context  ctxt  =  Context.newCurrentContext();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Context  ctxt  =  Context.newCurrentContext();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.newCurrentContext();	  Context    ctxt    =    Context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	29	None	replace
124	[BUG]  [BUGGY]  Context  ctxt  =  Context.getCurrentContextForName(n.props);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Context  ctxt  =  Context.getCurrentContextForName(n.props);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.getCurrentContextForName(n.props);	  Context    ctxt    =    Context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	29	None	replace
125	[BUG]  [BUGGY]  Context  ctxt  =  Context.current();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Context  ctxt  =  Context.current();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.current();	  Context    ctxt    =    Context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	29	None	replace
126	[BUG]  [BUGGY]  For  (String  p  :  n.props.getName())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (String  p  :  n.props.getName())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (String  p  :  n.props.getName())  {	  For    (Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
127	[BUG]  [BUGGY]  For  (Name  p  :  n.props.name.getName())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.props.name.getName())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.name.getName())  {	  For    (Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
128	[BUG]  [BUGGY]  For  (Name  p  :  n.name.getName())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.name.getName())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.name.getName())  {	  For    (Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
129	[BUG]  [BUGGY]  For  (Name  prop  :  n.props.getName())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  prop  :  n.props.getName())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  prop  :  n.props.getName())  {	  For    (Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
130	[BUG]  [BUGGY]  for(Name  p  :  n.props.get(alias).name)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.get(alias).name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.get(alias).name)  {	  for(Name    p    :    n.props.get(alias))    {    	non-compiled	[CE]  not  a  statement	33	None	replace
131	[BUG]  [BUGGY]  for(Name  p  :  n.props.get(alias)&  0xFFFF)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.get(alias)&  0xFFFF)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.get(alias)&  0xFFFF)  {	  for(Name    p    :    n.props.get(alias))    {    	non-compiled	[CE]  not  a  statement	33	None	replace
132	[BUG]  [BUGGY]  For(Name  p  :  n.props.get(alias))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.get(alias))  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.get(alias))  {	  for(Name    p    :    n.props.get(alias))    {    	non-compiled	[CE]  not  a  statement	33	None	replace
133	[BUG]  [BUGGY]  for(Name  p  :  n.props.get(alias),  p.name)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.get(alias),  p.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.get(alias),  p.name)  {	  for(Name    p    :    n.props.get(alias))    {    	non-compiled	[CE]  not  a  statement	33	None	replace
134	[BUG]  [BUGGY]  for(Name  p  :  n.props.get(alias)&  0xffff)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.get(alias)&  0xffff)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.get(alias)&  0xffff)  {	  for(Name    p    :    n.props.get(alias))    {    	non-compiled	[CE]  not  a  statement	33	None	replace
135	[BUG]  [BUGGY]  for(Name  p  :  n.props.get(alias)).name)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.get(alias)).name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.get(alias)).name)  {	  for(Name    p    :    n.props.get(alias))    {    	non-compiled	[CE]  not  a  statement	33	None	replace
136	[BUG]  [BUGGY]  Name  p  =  n.props.get(name);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(name);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(name);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    n.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
137	[BUG]  [BUGGY]  Node  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    n.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
138	[BUG]  [BUGGY]  for(String  prop  :  n.props)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  prop  :  n.props)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  prop  :  n.props)  {	  for(String    p    :    n.props)    {    	non-compiled	[CE]  not  a  statement	35	None	replace
139	[BUG]  [BUGGY]  for(String  p  :  n.properties)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.properties)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.properties)  {	  for(String    p    :    n.props)    {    	non-compiled	[CE]  not  a  statement	35	None	replace
140	[BUG]  [BUGGY]  for(String  p  :  n.props,  alias)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props,  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props,  alias)  {	  for(String    p    :    n.props)    {    	non-compiled	[CE]  not  a  statement	35	None	replace
141	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias,  n.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias,  n.name);	  Name    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	1	None	replace
142	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias).name;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias).name;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias).name;	  Name    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	1	None	replace
143	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias  +  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias  +  1);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias  +  1);	  Name    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	1	None	replace
144	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias,  propAlias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias,  propAlias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias,  propAlias);	  Name    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	1	None	replace
145	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias)+  1;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias)+  1;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias)+  1;	  Name    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	1	None	replace
146	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias,  null);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias,  null);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias,  null);	  Name    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	1	None	replace
147	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  propAlias)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name,  propAlias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  propAlias)  {	  for(Name    p    :    n.props.name,    alias)    {    	non-compiled	[CE]  not  a  statement	27	None	replace
148	[BUG]  [BUGGY]  For  (String  p  :  n.props.name,  alias)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (String  p  :  n.props.name,  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (String  p  :  n.props.name,  alias)  {	  For    (String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	23	None	replace
149	[BUG]  [BUGGY]  For  (String  prop  :  n.props.name)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (String  prop  :  n.props.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (String  prop  :  n.props.name)  {	  For    (String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	23	None	replace
150	[BUG]  [BUGGY]  for(Name  p  :  n.name.getName())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.getName())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.getName())  {	  for(Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
151	[BUG]  [BUGGY]  for(Name  p  :  n.props.name.getName())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name.getName())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name.getName())  {	  for(Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
152	[BUG]  [BUGGY]  for(Name  p  :  n.props.getName(),  alias)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.getName(),  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.getName(),  alias)  {	  for(Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
153	[BUG]  [BUGGY]  For  (Name  p  :  n.props.name,  propAlias)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.props.name,  propAlias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.name,  propAlias)  {	  For    (Name    p    :    n.props.name,    alias)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
154	[BUG]  [BUGGY]  for(Name  p  :  n.name.props)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.props)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.props)  {	  for(Name    p    :    n.name.keySet())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
155	[BUG]  [BUGGY]  Node  p  =  n.props.getProp(Node.NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.getProp(Node.NAMESPACE_REDEFINED_WARNING);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.getProp(Node.NAMESPACE_REDEFINED_WARNING);	  Node    p    =    n.props.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
156	[BUG]  [BUGGY]  Node  p  =  n.props.getProp(Node.SOURCENAME_PROP);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.getProp(Node.SOURCENAME_PROP);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.getProp(Node.SOURCENAME_PROP);	  Node    p    =    n.props.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
157	[BUG]  [BUGGY]  Name  p  =  n.props.getName(alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getName(alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getName(alias);	  Name    p    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	2	None	replace
158	[BUG]  [BUGGY]  Name  p  =  n.props.getPrettyPrinter();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getPrettyPrinter();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getPrettyPrinter();	  Name    p    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	2	None	replace
159	[BUG]  [BUGGY]  Name  p  =  n.props.getPropertyName(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.getPropertyName(alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.getPropertyName(alias);	  Name    p    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	2	None	replace
160	[BUG]  [BUGGY]  for(String  p  :  n.props.alias)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props.alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props.alias)  {	  for(String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
161	[BUG]  [BUGGY]  for(String  p  :  n.props.asName)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props.asName)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props.asName)  {	  for(String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
162	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name,  propAlias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name,  propAlias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name,  propAlias);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    n.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
163	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias  +  1);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias  +  1);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias  +  1);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    n.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
164	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name,  p.name);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name,  p.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name,  p.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    n.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
165	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name,  p.type);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name,  p.type);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  n.name,  p.type);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    n.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
166	[BUG]  [BUGGY]  n.props  =  new  HashMap  <  String,String>();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  n.props  =  new  HashMap  <  String,String>();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	n.props  =  new  HashMap  <  String,String>();	  n.props    =    n.props;    	non-compiled	[CE]  not  a  statement	31	None	replace
167	[BUG]  [BUGGY]  n.props  =  new  HashMap  <  String,  Name>();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  n.props  =  new  HashMap  <  String,  Name>();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	n.props  =  new  HashMap  <  String,  Name>();	  n.props    =    n.props;    	non-compiled	[CE]  not  a  statement	31	None	replace
168	[BUG]  [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name]),  p.name)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name]),  p.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.toArray(new  Name[p.name]),  p.name)  {	  for(Name    p    :    n.props.toArray(new    Name[p.name]))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
169	[BUG]  [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name  +  1]))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name  +  1]))  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.toArray(new  Name[p.name  +  1]))  {	  for(Name    p    :    n.props.toArray(new    Name[p.name]))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
170	[BUG]  [BUGGY]  For(Name  p  :  n.props.entrySet())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.entrySet())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.entrySet())  {	  For(Name    p    :    n.props.keySet())    {    	non-compiled	[CE]  not  a  statement	17	None	replace
171	[BUG]  [BUGGY]  For(Name  p  :  n.props.list())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.list())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.list())  {	  For(Name    p    :    n.props.keySet())    {    	non-compiled	[CE]  not  a  statement	17	None	replace
172	[BUG]  [BUGGY]  for(Name  p  :  n.props.name.keySet())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name.keySet())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name.keySet())  {	  for(Name    p    :    n.props.name.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
173	[BUG]  [BUGGY]  for(Name  p  :  n.props.name.toList())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name.toList())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name.toList())  {	  for(Name    p    :    n.props.name.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
174	[BUG]  [BUGGY]  for(Name  p  :  n.props.name.values())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name.values())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name.values())  {	  for(Name    p    :    n.props.name.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
175	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  g.name);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  g.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  g.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
176	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  a.name);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  a.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  a.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
177	[BUG]  [BUGGY]  Name  p  =  n.props.substring(0,  n.props.length()  -  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.substring(0,  n.props.length()  -  1);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.substring(0,  n.props.length()  -  1);	  Name    p    =    n.props.clone();    	non-compiled	[CE]  not  a  statement	42	None	replace
178	[BUG]  [BUGGY]  Name  p  =  n.props.substring(0,  n.props.length());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.substring(0,  n.props.length());  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.substring(0,  n.props.length());	  Name    p    =    n.props.clone();    	non-compiled	[CE]  not  a  statement	42	None	replace
179	[BUG]  [BUGGY]  Name  p  =  n.props.subList(0,  n.props.length);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.subList(0,  n.props.length);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.subList(0,  n.props.length);	  Name    p    =    n.props.clone();    	non-compiled	[CE]  not  a  statement	42	None	replace
180	[BUG]  [BUGGY]  Context  ctxt  =  Context.currentTimeMillis();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Context  ctxt  =  Context.currentTimeMillis();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.currentTimeMillis();	  Context    ctxt    =    Context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	29	None	replace
181	[BUG]  [BUGGY]  Context  ctxt  =  Context.currentToken();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Context  ctxt  =  Context.currentToken();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.currentToken();	  Context    ctxt    =    Context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	29	None	replace
182	[BUG]  [BUGGY]  Context  ctxt  =  Context.currentTree();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Context  ctxt  =  Context.currentTree();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.currentTree();	  Context    ctxt    =    Context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	29	None	replace
183	[BUG]  [BUGGY]  Context  ctxt  =  Context.currentTail();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Context  ctxt  =  Context.currentTail();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.currentTail();	  Context    ctxt    =    Context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	29	None	replace
184	[BUG]  [BUGGY]  alias  =  n.props.getName()  + ", "  +  p.name;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  alias  =  n.props.getName()  + ", "  +  p.name;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	alias  =  n.props.getName()  + ", "  +  p.name;	  alias    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	4	None	replace
185	[BUG]  [BUGGY]  alias  =  n.props.getName(alias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  alias  =  n.props.getName(alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	alias  =  n.props.getName(alias);	  alias    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	4	None	replace
186	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias  +  1);  flattenReferencesToCollapsibleDescendants(p,  p.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias  +  1);  flattenReferencesToCollapsibleDescendants(p,  p.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias  +  1);  flattenReferencesToCollapsibleDescendants(p,  p.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendants(p,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
187	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  p.name,  p.type);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  p.name,  p.type);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  p.name,  p.type);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendants(p,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
188	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  propName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  propName);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  propName);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendants(p,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
189	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias,  p.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias,  p.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias,  p.name);	  Name    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	1	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(n.props!=  null  &&  n.props.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Preconditions.checkState(n.props!=  null  &&  n.props.getType()  ==  Token.NAME);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Preconditions.checkState(n.props!=  null  &&  n.props.getType()  ==  Token.NAME);	  Preconditions.checkState(n.props.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	7	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME,  n.name);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Preconditions.checkState(n.props.getType()  ==  Token.NAME,  n.name);	  Preconditions.checkState(n.props.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	7	None	replace
192	[BUG]  [BUGGY]  for(Name  p  :  n.props.namespaces())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.namespaces())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.namespaces())  {	  for(Name    p    :    n.props.nameSet())    {    	non-compiled	[CE]  not  a  statement	16	None	replace
193	[BUG]  [BUGGY]  for(Name  p  :  n.name,  alias.values())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name,  alias.values())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name,  alias.values())  {	  for(Name    p    :    n.name.values())    {    	non-compiled	[CE]  not  a  statement	13	None	replace
194	[BUG]  [BUGGY]  for(Name  p  :  n.props.list(alias))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.list(alias))  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.list(alias))  {	  for(Name    p    :    n.props.list())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
195	[BUG]  [BUGGY]  for(Name  p  :  n.props.getNames())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.getNames())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.getNames())  {	  for(Name    p    :    n.props.names())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
196	[BUG]  [BUGGY]  for(Name  p  :  n.names,  nameMap)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.names,  nameMap)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.names,  nameMap)  {	  for(Name    p    :    n.names)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
197	[BUG]  [BUGGY]  Node  p  =  n.props.get(alias,  null);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.get(alias,  null);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.get(alias,  null);	  Node    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	45	None	replace
198	[BUG]  [BUGGY]  Node  p  =  n.props.get(alias,  nameMap);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.get(alias,  nameMap);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.get(alias,  nameMap);	  Node    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	45	None	replace
199	[BUG]  [BUGGY]  for(Name  p  :  n.props.alias)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.alias)  {	  for(Name    p    :    n.props.asName)    {    	non-compiled	[CE]  not  a  statement	39	None	replace
200	[BUG]  [BUGGY]  For  (Name  p  :  n.props.getName(alias))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.props.getName(alias))  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.getName(alias))  {	  For    (Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
201	[BUG]  [BUGGY]  For  (Name  p  :  n.props.getPropertyName(alias))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.props.getPropertyName(alias))  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.getPropertyName(alias))  {	  For    (Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
202	[BUG]  [BUGGY]  For  (Name  p  :  n.props.name,  p.type)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.props.name,  p.type)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.name,  p.type)  {	  For    (Name    p    :    n.props.name,    p.name)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
203	[BUG]  [BUGGY]  Name  p  =  n.props.cloneTree(this);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.cloneTree(this);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.cloneTree(this);	  Name    p    =    n.props.cloneTree();    	non-compiled	[CE]  not  a  statement	44	None	replace
204	[BUG]  [BUGGY]  for(String  p  :  n,  alias)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n,  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n,  alias)  {	  for(String    p    :    n.name)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
205	[BUG]  [BUGGY]  for(String  p  :  n.props.values())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props.values())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props.values())  {	  for(String    p    :    n.props)    {    	non-compiled	[CE]  not  a  statement	35	None	replace
206	[BUG]  [BUGGY]  for(String  p  :  n.props,  p.name)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props,  p.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props,  p.name)  {	  for(String    p    :    n.props)    {    	non-compiled	[CE]  not  a  statement	35	None	replace
207	[BUG]  [BUGGY]  for(String  p  :  n.props,  nameMap)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props,  nameMap)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props,  nameMap)  {	  for(String    p    :    n.props)    {    	non-compiled	[CE]  not  a  statement	35	None	replace
208	[BUG]  [BUGGY]  for(Name  p  :  n.props.get(alias,  p.name))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.get(alias,  p.name))  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.get(alias,  p.name))  {	  for(Name    p    :    n.props.get(alias))    {    	non-compiled	[CE]  not  a  statement	33	None	replace
209	[BUG]  [BUGGY]  for(Name  p  :  n.props.get(alias)||  p.name!=  null)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.get(alias)||  p.name!=  null)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.get(alias)||  p.name!=  null)  {	  for(Name    p    :    n.props.get(alias))    {    	non-compiled	[CE]  not  a  statement	33	None	replace
210	[BUG]  [BUGGY]  for(Name  p  :  n.props.get(alias)&  0  <=  0;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.get(alias)&  0  <=  0;  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.get(alias)&  0  <=  0;	  for(Name    p    :    n.props.get(alias))    {    	non-compiled	[CE]  not  a  statement	33	None	replace
211	[BUG]  [BUGGY]  for(Name  p  :  n.props,  p.name)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props,  p.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props,  p.name)  {	  for(Name    p    :    n.props.name,    p.name)    {    	non-compiled	[CE]  not  a  statement	28	None	replace
212	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  p.type)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name,  p.type)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  p.type)  {	  for(Name    p    :    n.props.name,    p.name)    {    	non-compiled	[CE]  not  a  statement	28	None	replace
213	[BUG]  [BUGGY]  for(Name  p  :  n.props,  alias.getName())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props,  alias.getName())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props,  alias.getName())  {	  for(Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
214	[BUG]  [BUGGY]  for(Name  p  :  n.props.getName()  +  1)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.getName()  +  1)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.getName()  +  1)  {	  for(Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
215	[BUG]  [BUGGY]  p.name  =  n.props.getName(alias);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  p.name  =  n.props.getName(alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	p.name  =  n.props.getName(alias);	  p.name    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	41	None	replace
216	[BUG]  [BUGGY]  p.name  =  n.props.getName()  + ": "  +  n.props.getName();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  p.name  =  n.props.getName()  + ": "  +  n.props.getName();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	p.name  =  n.props.getName()  + ": "  +  n.props.getName();	  p.name    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	41	None	replace
217	[BUG]  [BUGGY]  p.name  =  n.props.getName()  + ", "  +  n.props.getName();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  p.name  =  n.props.getName()  + ", "  +  n.props.getName();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	p.name  =  n.props.getName()  + ", "  +  n.props.getName();	  p.name    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	41	None	replace
218	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  alias.asName)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name,  alias.asName)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  alias.asName)  {	  for(Name    p    :    n.props.name,    alias.name)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
219	[BUG]  [BUGGY]  for(Name  p  :  n.name.props.asList())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name.props.asList())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name.props.asList())  {	  for(Name    p    :    n.name.asList())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
220	[BUG]  [BUGGY]  Context  ctxt  =  Context.getCurrentContextInfoForName(n.props);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Context  ctxt  =  Context.getCurrentContextInfoForName(n.props);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Context  ctxt  =  Context.getCurrentContextInfoForName(n.props);	  Context    ctxt    =    Context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	29	None	replace
221	[BUG]  [BUGGY]  n.props  =  new  HashMap  <  String,Object>();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  n.props  =  new  HashMap  <  String,Object>();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	n.props  =  new  HashMap  <  String,Object>();	  n.props    =    n.props;    	non-compiled	[CE]  not  a  statement	31	None	replace
222	[BUG]  [BUGGY]  n.props  =  new  LinkedHashMap  <  String,Object>();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  n.props  =  new  LinkedHashMap  <  String,Object>();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	n.props  =  new  LinkedHashMap  <  String,Object>();	  n.props    =    n.props;    	non-compiled	[CE]  not  a  statement	31	None	replace
223	[BUG]  [BUGGY]  n.props  =  new  LinkedHashMap  <  String,String>();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  n.props  =  new  LinkedHashMap  <  String,String>();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	n.props  =  new  LinkedHashMap  <  String,String>();	  n.props    =    n.props;    	non-compiled	[CE]  not  a  statement	31	None	replace
224	[BUG]  [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name]),  p.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[p.name]),  p.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.toArray(new  Name[p.name]),  p.name);	  for(Name    p    :    n.props.toArray(new    Name[p.name]))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
225	[BUG]  [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[alias.name]))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.toArray(new  Name[alias.name]))  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.toArray(new  Name[alias.name]))  {	  for(Name    p    :    n.props.toArray(new    Name[p.name]))    {    	non-compiled	[CE]  not  a  statement	21	None	replace
226	[BUG]  [BUGGY]  Name  p  =  n.props.get(0);  flattenReferencesToCollapsibleDescendants(p,  p.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(0);  flattenReferencesToCollapsibleDescendants(p,  p.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(0);  flattenReferencesToCollapsibleDescendants(p,  p.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendants(p,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
227	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  a.name);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  a.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendants(p,  a.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendants(p,    p.name);    	non-compiled	[CE]  not  a  statement	30	None	replace
228	[BUG]  [BUGGY]  for(Name  p  :  n.props.asName,  alias)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.asName,  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.asName,  alias)  {	  for(Name    p    :    n.props.asName)    {    	non-compiled	[CE]  not  a  statement	39	None	replace
229	[BUG]  [BUGGY]  for(Name  p  :  n.props.listIterator())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.listIterator())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.listIterator())  {	  for(Name    p    :    n.props.list())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
230	[BUG]  [BUGGY]  for(Name  p  :  n.props.getNamespaceURI())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.getNamespaceURI())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.getNamespaceURI())  {	  for(Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
231	[BUG]  [BUGGY]  for(Name  p  :  n.props.getNamespace())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.getNamespace())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.getNamespace())  {	  for(Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
232	[BUG]  [BUGGY]  for(Name  p  :  n.props.getPropertyName())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.getPropertyName())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.getPropertyName())  {	  for(Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
233	[BUG]  [BUGGY]  p.name  =  n.props.getQualifiedName();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  p.name  =  n.props.getQualifiedName();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	p.name  =  n.props.getQualifiedName();	  p.name    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	41	None	replace
234	[BUG]  [BUGGY]  p.name  =  n.props.getSimpleName();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  p.name  =  n.props.getSimpleName();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	p.name  =  n.props.getSimpleName();	  p.name    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	41	None	replace
235	[BUG]  [BUGGY]  for(String  p  :  n.props.name,  alias.name)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props.name,  alias.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props.name,  alias.name)  {	  for(String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
236	[BUG]  [BUGGY]  for(Name  p  :  n,  alias)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n,  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n,  alias)  {	  for(Name    p    :    n.names)    {    	non-compiled	[CE]  not  a  statement	9	None	replace
237	[BUG]  [BUGGY]  For  (String  p  :  n.props.values())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (String  p  :  n.props.values())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (String  p  :  n.props.values())  {	  For    (String    p    :    n.props.name)    {    	non-compiled	[CE]  not  a  statement	23	None	replace
238	[BUG]  [BUGGY]  Node  p  =  n.props.remove(alias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.remove(alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.remove(alias);	  Node    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	45	None	replace
239	[BUG]  [BUGGY]  Node  p  =  n.props.get(nameMap);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.get(nameMap);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.get(nameMap);	  Node    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	45	None	replace
240	[BUG]  [BUGGY]  For(Name  p  :  n.props.asList())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.asList())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.asList())  {	  for(Name    p    :    n.name.asList())    {    	non-compiled	[CE]  not  a  statement	20	None	replace
241	[BUG]  [BUGGY]  for(Name  p  :  n.name,  props)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name,  props)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name,  props)  {	  for(Name    p    :    n.name,    alias)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
242	[BUG]  [BUGGY]  for(Name  p  :  n.props.get(alias));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.get(alias));  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.get(alias));	  for(Name    p    :    n.props.get(alias))    {    	non-compiled	[CE]  not  a  statement	33	None	replace
243	[BUG]  [BUGGY]  for(Name  p  :  n.props.clone())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.clone())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.clone())  {	  for(Name    p    :    n.props.entrySet())    {    	non-compiled	[CE]  not  a  statement	32	None	replace
244	[BUG]  [BUGGY]  for(String  p  :  n.props.asList())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.props.asList())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.props.asList())  {	  for(String    p    :    n.props)    {    	non-compiled	[CE]  not  a  statement	35	None	replace
245	[BUG]  [BUGGY]  Name  p  =  n.props.cloneName(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.cloneName(alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.cloneName(alias);	  Name    p    =    n.props.cloneTree();    	non-compiled	[CE]  not  a  statement	44	None	replace
246	[BUG]  [BUGGY]  Node  p  =  n.props.removeFirstChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.removeFirstChild();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.removeFirstChild();	  Node    p    =    n.props.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
247	[BUG]  [BUGGY]  Node  p  =  n.props.cloneTree();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.cloneTree();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.cloneTree();	  Node    p    =    n.props.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
248	[BUG]  [BUGGY]  Node  p  =  n.props.findFirstChild();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Node  p  =  n.props.findFirstChild();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Node  p  =  n.props.findFirstChild();	  Node    p    =    n.props.getFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
249	[BUG]  [BUGGY]  Name  p  =  n.props.get(i);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(i);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(i);  flattenReferencesToCollapsibleDescendantNames(p,  n.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    n.name);    	non-compiled	[CE]  not  a  statement	6	None	replace
250	[BUG]  [BUGGY]  Name  p  =  n.props.get(name);  flattenReferencesToCollapsibleDescendantNames(p,  alias.name);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(name);  flattenReferencesToCollapsibleDescendantNames(p,  alias.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(name);  flattenReferencesToCollapsibleDescendantNames(p,  alias.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
251	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  m.name);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  m.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias);  flattenReferencesToCollapsibleDescendantNames(p,  m.name);	  Name    p    =    n.props.get(alias);    flattenReferencesToCollapsibleDescendantNames(p,    p.name);    	non-compiled	[CE]  not  a  statement	3	None	replace
252	[BUG]  [BUGGY]  for(Name  p  :  n.props.alias,  p.name)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.alias,  p.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.alias,  p.name)  {	  for(Name    p    :    n.props.name,    p.name)    {    	non-compiled	[CE]  not  a  statement	28	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME,  n.props.getName());  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME,  n.props.getName());  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Preconditions.checkState(n.props.getType()  ==  Token.NAME,  n.props.getName());	  Preconditions.checkState(n.props.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	7	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME,  n.props.name);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Preconditions.checkState(n.props.getType()  ==  Token.NAME,  n.props.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Preconditions.checkState(n.props.getType()  ==  Token.NAME,  n.props.name);	  Preconditions.checkState(n.props.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	7	None	replace
255	[BUG]  [BUGGY]  For  (Name  p  :  n.props,  alias.name)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.props,  alias.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props,  alias.name)  {	  For    (Name    p    :    n.props.name,    p.name)    {    	non-compiled	[CE]  not  a  statement	24	None	replace
256	[BUG]  [BUGGY]  for(Name  p  :  n.props.name.toCharArray())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name.toCharArray())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name.toCharArray())  {	  for(Name    p    :    n.props.name.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
257	[BUG]  [BUGGY]  for(Name  p  :  n.props.entities())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.entities())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.entities())  {	  for(Name    p    :    n.props.names())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
258	[BUG]  [BUGGY]  for(Name  p  :  n.props.as())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.as())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.as())  {	  for(Name    p    :    n.props.names())    {    	non-compiled	[CE]  not  a  statement	12	None	replace
259	[BUG]  [BUGGY]  For(Name  p  :  n.props.values()  ||  p.name!=  null  &&  p.name.length()  >  0)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.values()  ||  p.name!=  null  &&  p.name.length()  >  0)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.values()  ||  p.name!=  null  &&  p.name.length()  >  0)  {	  For(Name    p    :    n.props.values())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
260	[BUG]  [BUGGY]  For(Name  p  :  n.props.values()  ||  p.name!=  null?  p.name  :  n.props.values())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For(Name  p  :  n.props.values()  ||  p.name!=  null?  p.name  :  n.props.values())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For(Name  p  :  n.props.values()  ||  p.name!=  null?  p.name  :  n.props.values())  {	  For(Name    p    :    n.props.values())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
261	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  alias.path)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name,  alias.path)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  alias.path)  {	  for(Name    p    :    n.props.name,    alias.name)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
262	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  alias.prototype)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name,  alias.prototype)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  alias.prototype)  {	  for(Name    p    :    n.props.name,    alias.name)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
263	[BUG]  [BUGGY]  for(Name  p  :  n.name,  alias.props)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.name,  alias.props)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.name,  alias.props)  {	  for(Name    p    :    n.props.name,    alias.name)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
264	[BUG]  [BUGGY]  For  (Name  p  :  n.props.getNamespace())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.props.getNamespace())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.getNamespace())  {	  For    (Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
265	[BUG]  [BUGGY]  For  (Name  p  :  n.props.getNamespaceURI())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.props.getNamespaceURI())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.getNamespaceURI())  {	  For    (Name    p    :    n.props.getName())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
266	[BUG]  [BUGGY]  For  (Name  p  :  n.props.getName(),  alias)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  For  (Name  p  :  n.props.getName(),  alias)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	For  (Name  p  :  n.props.getName(),  alias)  {	  For    (Name    p    :    n.props.name,    alias)    {    	non-compiled	[CE]  not  a  statement	22	None	replace
267	[BUG]  [BUGGY]  alias  =  n.props.getPropertyName();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  alias  =  n.props.getPropertyName();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	alias  =  n.props.getPropertyName();	  alias    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	4	None	replace
268	[BUG]  [BUGGY]  alias  =  n.props.get(alias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  alias  =  n.props.get(alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	alias  =  n.props.get(alias);	  alias    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	4	None	replace
269	[BUG]  [BUGGY]  alias  =  n.props.getNamespaceURI();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  alias  =  n.props.getNamespaceURI();  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	alias  =  n.props.getNamespaceURI();	  alias    =    n.props.getName();    	non-compiled	[CE]  not  a  statement	4	None	replace
270	[BUG]  [BUGGY]  for(Name  p  :  n.props,  alias).name)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props,  alias).name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props,  alias).name)  {	  for(Name    p    :    n.props,    alias)    {    	non-compiled	[CE]  not  a  statement	37	None	replace
271	[BUG]  [BUGGY]  for(String  p  :  n.name.values())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(String  p  :  n.name.values())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(String  p  :  n.name.values())  {	  for(Name    p    :    n.name.values())    {    	non-compiled	[CE]  not  a  statement	13	None	replace
272	[BUG]  [BUGGY]  for(Name  p  :  n.props.alias())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.alias())  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.alias())  {	  for(Name    p    :    n.props.name())    {    	non-compiled	[CE]  not  a  statement	14	None	replace
273	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  alias,  appendPropForAlias(alias,  p.name))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name,  alias,  appendPropForAlias(alias,  p.name))  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  alias,  appendPropForAlias(alias,  p.name))  {	  for(Name    p    :    n.props.name,    alias)    {    	non-compiled	[CE]  not  a  statement	27	None	replace
274	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  alias,  p.name)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name,  alias,  p.name)  {  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  alias,  p.name)  {	  for(Name    p    :    n.props.name,    alias)    {    	non-compiled	[CE]  not  a  statement	27	None	replace
275	[BUG]  [BUGGY]  for(Name  p  :  n.props.name,  alias);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  for(Name  p  :  n.props.name,  alias);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	for(Name  p  :  n.props.name,  alias);	  for(Name    p    :    n.props.name,    alias)    {    	non-compiled	[CE]  not  a  statement	27	None	replace
276	[BUG]  [BUGGY]  Name  p  =  n.props.replace(alias,  p.name);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.replace(alias,  p.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.replace(alias,  p.name);	  Name    p    =    n.props.clone();    	non-compiled	[CE]  not  a  statement	42	None	replace
277	[BUG]  [BUGGY]  Name  p  =  n.props.get(alias.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.get(alias.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.get(alias.name);	  Name    p    =    n.props.get(alias);    	non-compiled	[CE]  not  a  statement	1	None	replace
278	[BUG]  [BUGGY]  Name  p  =  n.props.remove(alias,  n.name);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesToCollapsibleDescendantNames(  Name  n,  String  alias)  {  if  (n.props  ==  null)  return;      [BUGGY]  Name  p  =  n.props.remove(alias,  n.name);  [BUGGY]      String  propAlias  =  appendPropForAlias(alias,  p.name);  if  (p.canCollapse())  {  flattenReferencesTo(p,  propAlias);  }  flattenReferencesToCollapsibleDescendantNames(p,  propAlias);  }  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesToCollapsibleDescendantNames  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  String  alias  propAlias  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.20683507599800766	298	298	8	replace	Name  p  =  n.props.remove(alias,  n.name);	  Name    p    =    n.props.remove(alias);    	non-compiled	[CE]  not  a  statement	43	None	replace
