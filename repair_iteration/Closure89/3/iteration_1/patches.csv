bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(nameNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(nameNode);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(nameNode);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(nameNode);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
2	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameNode,  parent);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameNode,  parent);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameNode,  parent);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(nameNode);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
3	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameNode,  p.name);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameNode,  p.name);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameNode,  p.name);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(p.name);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
4	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(propAlias,  p.name);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(propAlias,  p.name);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(propAlias,  p.name);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(p.name);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
5	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(alias,  p.name);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(alias,  p.name);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(alias,  p.name);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(p.name);    	non-compiled	[CE]  ';'  expected	10	None	replace
6	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(p.name);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(p.name);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(p.name);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(p.name);    	non-compiled	[CE]  ';'  expected	10	None	replace
7	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.name,  parent);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.name,  parent);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.name,  parent);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(p.name);    	non-compiled	[CE]  ';'  expected	10	None	replace
8	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.name,  nameNode);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.name,  nameNode);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.name,  nameNode);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(p.name);    	non-compiled	[CE]  ';'  expected	10	None	replace
9	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(numStubs);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(numStubs);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(numStubs);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(numStubs);    	non-compiled	[CE]  ';'  expected	2	None	replace
10	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  numStubs);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  numStubs);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  numStubs);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(numStubs);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(params);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(params);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(params);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(numStubs);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
12	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(numStubs,  parent);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(numStubs,  parent);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(numStubs,  parent);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(numStubs);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(propAlias,  parent);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(propAlias,  parent);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(propAlias,  parent);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(propAlias);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(propAlias);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(propAlias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(propAlias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(propAlias);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  propAlias);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  propAlias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  propAlias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(propAlias);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(alias,  parent);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(alias,  parent);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(alias,  parent);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(alias);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(alias);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(alias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(alias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(alias);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  alias);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  alias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  alias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(alias);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  alias).copyInformationFromForTree(nameNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  alias).copyInformationFromForTree(nameNode);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  alias).copyInformationFromForTree(nameNode);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(alias);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(parent);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(parent);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(parent);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(parent);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  addAfter);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  addAfter);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  addAfter);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(parent);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
22	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(n);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(n);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(n);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(parent);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  newVar);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  newVar);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  newVar);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(newVar);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(newVar);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(newVar);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(newVar);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(newVar);    	non-compiled	[CE]  ';'  expected	8	None	replace
25	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(newVar,  propAlias);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(newVar,  propAlias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(newVar,  propAlias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(newVar);    	non-compiled	[CE]  ';'  expected	8	None	replace
26	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(newVar,  parent);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(newVar,  parent);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(newVar,  parent);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(newVar);    	non-compiled	[CE]  ';'  expected	8	None	replace
27	[BUG]  [BUGGY]  Node  newVar  =  nameNode.getLastChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  nameNode.getLastChild();  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  nameNode.getLastChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
28	[BUG]  [BUGGY]  Node  newVar  =  Node.newString(Token.NAME,  nameNode);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  Node.newString(Token.NAME,  nameNode);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  Node.newString(Token.NAME,  nameNode);	      	non-compiled	[CE]  ';'  expected	7	None	replace
29	[BUG]  [BUGGY]  Node  newVar  =  nameNode.getFirstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  nameNode.getFirstChild();  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  nameNode.getFirstChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
30	[BUG]  [BUGGY]  Name  newVar  =  nameNode.getLastChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Name  newVar  =  nameNode.getLastChild();  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Name  newVar  =  nameNode.getLastChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
31	[BUG]  [BUGGY]  Node  newVar  =  Node.newString(Token.NAME,  propAlias);  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  Node.newString(Token.NAME,  propAlias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  Node.newString(Token.NAME,  propAlias);	      	non-compiled	[CE]  ';'  expected	7	None	replace
32	[BUG]  [BUGGY]  Name  newVar  =  nameNode.getFirstChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Name  newVar  =  nameNode.getFirstChild();  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Name  newVar  =  nameNode.getFirstChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
33	[BUG]  [BUGGY]  Node  newVar  =  nameNode.getNext();  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  nameNode.getNext();  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  nameNode.getNext();	      	non-compiled	[CE]  ';'  expected	7	None	replace
34	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(nameAlias);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(nameAlias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(nameAlias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(nameAlias);    	non-compiled	[CE]  ';'  expected	5	None	replace
35	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameAlias,  propAlias);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameAlias,  propAlias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameAlias,  propAlias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(nameAlias);    	non-compiled	[CE]  ';'  expected	5	None	replace
36	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode,  compiler).copyInformationFromForTree(propAlias);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode,  compiler).copyInformationFromForTree(propAlias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode,  compiler).copyInformationFromForTree(propAlias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(nameAlias);    	non-compiled	[CE]  ';'  expected	5	None	replace
37	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode,  compiler).copyInformationFromForTree(nameAlias);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode,  compiler).copyInformationFromForTree(nameAlias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode,  compiler).copyInformationFromForTree(nameAlias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(nameAlias);    	non-compiled	[CE]  ';'  expected	5	None	replace
38	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(node);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(node);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode),  compiler.copyInformationFromForTree(node);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(node);    	non-compiled	[CE]  ';'  expected	9	None	replace
39	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(node,  parent);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(node,  parent);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(node,  parent);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(node);    	non-compiled	[CE]  ';'  expected	9	None	replace
40	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  node);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  node);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(parent,  node);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(node);    	non-compiled	[CE]  ';'  expected	9	None	replace
41	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.nameNode);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.nameNode);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.nameNode);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(nameNode);    	non-compiled	[CE]  ';'  expected	3	None	replace
42	[BUG]  [BUGGY]  Node  newVar  =  Node.newString(Token.NAME,  nameNode);  compiler.reportCodeChange();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  Node.newString(Token.NAME,  nameNode);  compiler.reportCodeChange();  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  Node.newString(Token.NAME,  nameNode);  compiler.reportCodeChange();	      	non-compiled	[CE]  ';'  expected	7	None	replace
43	[BUG]  [BUGGY]  Node  newVar  =  Node.newString(Token.NAME,  nameNode);  parent.addChildAfter(newVar,  addAfter);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  Node.newString(Token.NAME,  nameNode);  parent.addChildAfter(newVar,  addAfter);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  Node.newString(Token.NAME,  nameNode);  parent.addChildAfter(newVar,  addAfter);	      	non-compiled	[CE]  ';'  expected	7	None	replace
44	[BUG]  [BUGGY]  Node  newVar  =  Node.newString(Token.NAME,  nameNode);  numStubs++;  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  Node.newString(Token.NAME,  nameNode);  numStubs++;  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  Node.newString(Token.NAME,  nameNode);  numStubs++;	      	non-compiled	[CE]  ';'  expected	7	None	replace
45	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(propAlias,  nameNode);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(propAlias,  nameNode);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(propAlias,  nameNode);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(propAlias);    	non-compiled	[CE]  ';'  expected	1	None	replace
46	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameAlias,  parent);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameAlias,  parent);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(nameAlias,  parent);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(nameAlias);    	non-compiled	[CE]  ';'  expected	5	None	replace
47	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  p.nameNode).copyInformationFromForTree(alias);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  p.nameNode).copyInformationFromForTree(alias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  p.nameNode).copyInformationFromForTree(alias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(alias);    	non-compiled	[CE]  ';'  expected	6	None	replace
48	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  p.copyInformationFromForTree(alias);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  p.copyInformationFromForTree(alias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode),  p.copyInformationFromForTree(alias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(alias);    	non-compiled	[CE]  ';'  expected	6	None	replace
49	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  p.copyInformationFromForTree(nameAlias);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode),  p.copyInformationFromForTree(nameAlias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode),  p.copyInformationFromForTree(nameAlias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(nameAlias);    	non-compiled	[CE]  ';'  expected	5	None	replace
50	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.name,  propAlias);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.name,  propAlias);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  nameNode).copyInformationFromForTree(p.name,  propAlias);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(p.name);    	non-compiled	[CE]  ';'  expected	10	None	replace
51	[BUG]  [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  p.name).copyInformationFromForTree(nameNode);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  Node  newVar  =  new  Node(Token.VAR,  p.name).copyInformationFromForTree(nameNode);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	Node  newVar  =  new  Node(Token.VAR,  p.name).copyInformationFromForTree(nameNode);	  Node    newVar    =    new    Node(Token.VAR,    nameNode).copyInformationFromForTree(p.name);    	non-compiled	[CE]  ';'  expected	10	None	replace
52	[BUG]  [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME));  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME));  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME));	      	non-compiled	[CE]  ';'  expected	7	None	replace
53	[BUG]  [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    Name  n,  String  alias,  Node  parent,  Node  addAfter)  {  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));  Preconditions.checkNotNull(addAfter);  int  numStubs  =  0;  if  (n.props  !=  null)  {  for  (Name  p  :  n.props)  {  if  (p.needsToBeStubbed())  {  String  propAlias  =  appendPropForAlias(alias,  p.name);  Node  nameNode  =  Node.newString(Token.NAME,  propAlias);    [BUGGY]  n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME);  [BUGGY]    .copyInformationFromForTree(addAfter);  parent.addChildAfter(newVar,  addAfter);  addAfter  =  newVar;  numStubs++;  compiler.reportCodeChange();    if  (p.refs.get(0).node.getLastChild().getBooleanProp(  Node.IS_CONSTANT_NAME))  {  [CLASS]  CollapseProperties  1  [METHOD]  addStubsForUndeclaredProperties  [RETURN_TYPE]  int  Name  n  String  alias  Node  parent  Node  addAfter  [VARIABLES]  AbstractCompiler  compiler  boolean  canCollapseChildNames  collapsePropertiesOnExternTypes  discardKeys  initialized  inlineAliases  isJsIdentifier  isObjKey  isObjLit  isQName  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  addAfter  nameNode  newVar  parent  List  globalNames  refs  String  alias  propAlias  Map  nameMap  int  numStubs  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.3922322702763681	825	826	8	replace	n.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
