bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Name  r  =  r.getName();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Name  r  =  r.getName();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Name  r  =  r.getName();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
2	[BUG]  [BUGGY]  Name  r  =  n.refs.getName();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Name  r  =  n.refs.getName();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Name  r  =  n.refs.getName();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
3	[BUG]  [BUGGY]  Name  r  =  r.node.getName();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Name  r  =  r.node.getName();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Name  r  =  r.node.getName();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
4	[BUG]  [BUGGY]  Name  r  =  n.getRawName();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Name  r  =  n.getRawName();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Name  r  =  n.getRawName();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
5	[BUG]  [BUGGY]  Name  r  =  n.getReferenceName();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Name  r  =  n.getReferenceName();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Name  r  =  n.getReferenceName();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
6	[BUG]  [BUGGY]  Name  r  =  n.getRef();  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Name  r  =  n.getRef();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Name  r  =  n.getRef();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
7	[BUG]  [BUGGY]  Node  rParent  =  n.node.clone();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.clone();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.clone();	  Node    rParent    =    r.node.clone();    	non-compiled	[CE]  not  a  statement	9	None	replace
8	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneBody();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneBody();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneBody();	  Node    rParent    =    r.node.clone();    	non-compiled	[CE]  not  a  statement	9	None	replace
9	[BUG]  [BUGGY]  Node  rParent  =  n.node.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getFirstChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getFirstChild();	  Node    rParent    =    n.node.removeFirstChild();    	non-compiled	[CE]  not  a  statement	52	None	replace
10	[BUG]  [BUGGY]  Node  rParent  =  n.node.getLastChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getLastChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getLastChild();	  Node    rParent    =    n.node.removeFirstChild();    	non-compiled	[CE]  not  a  statement	52	None	replace
11	[BUG]  [BUGGY]  Node  rParent  =  r.removeFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.removeFirstChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.removeFirstChild();	  Node    rParent    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
12	[BUG]  [BUGGY]  Node  rParent  =  n.removeLastChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.removeLastChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.removeLastChild();	  Node    rParent    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
13	[BUG]  [BUGGY]  Node  rParent  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getFirstChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getFirstChild();	  Node    rParent    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
14	[BUG]  [BUGGY]  Node  rParent  =  n.removeChild(r);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.removeChild(r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.removeChild(r);	  Node    rParent    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
15	[BUG]  [BUGGY]  Node  rParent  =  n.removeChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.removeChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.removeChild();	  Node    rParent    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
16	[BUG]  [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  alias));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  alias));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  alias));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
17	[BUG]  [BUGGY]  Context.report(JSError.make(r,  UNSAFE_THIS,  originalName));  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  UNSAFE_THIS,  originalName));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  UNSAFE_THIS,  originalName));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
18	[BUG]  [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  n.fullName()));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  n.fullName()));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  n.fullName()));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
19	[BUG]  [BUGGY]  Context.report(JSError.make(r,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  UNSAFE_THIS));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  UNSAFE_THIS));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
20	[BUG]  [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
21	[BUG]  [BUGGY]  Context.report(JSError.make(r,  NAMESPACE_REDEFINED_WARNING,  n.fullName()));  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  NAMESPACE_REDEFINED_WARNING,  n.fullName()));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  NAMESPACE_REDEFINED_WARNING,  n.fullName()));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
22	[BUG]  [BUGGY]  Node  rParent  =  n.node.getRefParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getRefParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getRefParent();	  Node    rParent    =    r.node.getRefParent();    	non-compiled	[CE]  not  a  statement	23	None	replace
23	[BUG]  [BUGGY]  Node  rParent  =  n.getRefParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getRefParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getRefParent();	  Node    rParent    =    r.node.getRefParent();    	non-compiled	[CE]  not  a  statement	23	None	replace
24	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneTwin()  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.cloneTwin()  +  1;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneTwin()  +  1;	  Node    rParent    =    r.node.cloneTwin()    +    1;    	non-compiled	[CE]  not  a  statement	16	None	replace
25	[BUG]  [BUGGY]  Node  rParent  =  r.getNode().cloneTwin()  +  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.getNode().cloneTwin()  +  1;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.getNode().cloneTwin()  +  1;	  Node    rParent    =    r.node.cloneTwin()    +    1;    	non-compiled	[CE]  not  a  statement	16	None	replace
26	[BUG]  [BUGGY]  Node  rParent  =  r.refs.cloneTwin()  +  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.refs.cloneTwin()  +  1;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.refs.cloneTwin()  +  1;	  Node    rParent    =    r.node.cloneTwin()    +    1;    	non-compiled	[CE]  not  a  statement	16	None	replace
27	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(params,  originalName);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneTwin(params,  originalName);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(params,  originalName);	  Node    rParent    =    r.node.cloneTwin(params);    	non-compiled	[CE]  not  a  statement	34	None	replace
28	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneTwin(params);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.cloneTwin(params);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneTwin(params);	  Node    rParent    =    r.node.cloneTwin(params);    	non-compiled	[CE]  not  a  statement	34	None	replace
29	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(alias);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneTwin(alias);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(alias);	  Node    rParent    =    r.node.cloneTwin(params);    	non-compiled	[CE]  not  a  statement	34	None	replace
30	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneTwin(name);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(name);	  Node    rParent    =    r.node.cloneTwin(params);    	non-compiled	[CE]  not  a  statement	34	None	replace
31	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(ref);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneTwin(ref);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(ref);	  Node    rParent    =    r.node.cloneTwin(params);    	non-compiled	[CE]  not  a  statement	34	None	replace
32	[BUG]  [BUGGY]  Node  rParent  =  n.getLastChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getLastChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getLastChild();	  Node    rParent    =    r.node.getLastChild();    	non-compiled	[CE]  not  a  statement	33	None	replace
33	[BUG]  [BUGGY]  Node  rParent  =  r.getRawParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.getRawParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.getRawParent();	  Node    rParent    =    n.getRawParent();    	non-compiled	[CE]  not  a  statement	3	None	replace
34	[BUG]  [BUGGY]  Node  rParent  =  n.getCurrentParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getCurrentParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getCurrentParent();	  Node    rParent    =    n.getRawParent();    	non-compiled	[CE]  not  a  statement	3	None	replace
35	[BUG]  [BUGGY]  Node  rParent  =  n.getRootParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getRootParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getRootParent();	  Node    rParent    =    n.getRawParent();    	non-compiled	[CE]  not  a  statement	3	None	replace
36	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getReferenceParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refs.getReferenceParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.getReferenceParent();	  Node    rParent    =    n.node.getReferenceParent();    	non-compiled	[CE]  not  a  statement	22	None	replace
37	[BUG]  [BUGGY]  Node  rParent  =  n.node.getReferenceParent(r);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getReferenceParent(r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getReferenceParent(r);	  Node    rParent    =    n.node.getReferenceParent();    	non-compiled	[CE]  not  a  statement	22	None	replace
38	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneChildren();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.cloneChildren();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneChildren();	  Node    rParent    =    r.node.cloneChildren();    	non-compiled	[CE]  not  a  statement	48	None	replace
39	[BUG]  [BUGGY]  Node  rParent  =  r.refs.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.refs.getParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.refs.getParent();	  Node    rParent    =    r.getParent();    	non-compiled	[CE]  not  a  statement	1	None	replace
40	[BUG]  [BUGGY]  Node  rParent  =  r.parent;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.parent;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.parent;	  Node    rParent    =    r.getParent();    	non-compiled	[CE]  not  a  statement	1	None	replace
41	[BUG]  [BUGGY]  Node  rParent  =  r.getNext();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.getNext();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.getNext();	  Node    rParent    =    r.getParent();    	non-compiled	[CE]  not  a  statement	1	None	replace
42	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneTwin(r);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.cloneTwin(r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneTwin(r);	  Node    rParent    =    n.node.cloneTwin();    	non-compiled	[CE]  not  a  statement	14	None	replace
43	[BUG]  [BUGGY]  Node  rParent  =  n.refs.cloneTwin();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refs.cloneTwin();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.cloneTwin();	  Node    rParent    =    n.node.cloneTwin();    	non-compiled	[CE]  not  a  statement	14	None	replace
44	[BUG]  [BUGGY]  Node  rParent  =  n.parentNode.getParentNode();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.parentNode.getParentNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.parentNode.getParentNode();	  Node    rParent    =    n.node.getParentNode();    	non-compiled	[CE]  not  a  statement	17	None	replace
45	[BUG]  [BUGGY]  Node  rParent  =  n.node.getRefNode();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getRefNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getRefNode();	  Node    rParent    =    n.node.getParentNode();    	non-compiled	[CE]  not  a  statement	17	None	replace
46	[BUG]  [BUGGY]  Node  rParent  =  n.node.getReferenceNameNode();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getReferenceNameNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getReferenceNameNode();	  Node    rParent    =    n.node.getParentNode();    	non-compiled	[CE]  not  a  statement	17	None	replace
47	[BUG]  [BUGGY]  r.node  =  r.node.getFirstChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node.getFirstChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node.getFirstChild();	  r.node    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	49	None	replace
48	[BUG]  [BUGGY]  r.node  =  r.node.cloneTwin();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node.cloneTwin();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node.cloneTwin();	  r.node    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	49	None	replace
49	[BUG]  [BUGGY]  r.node  =  r.node  +  1;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node  +  1;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node  +  1;	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
50	[BUG]  [BUGGY]  r.node  =  r;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r;	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
51	[BUG]  [BUGGY]  r.node  =  new  Ref(r.node,  originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  new  Ref(r.node,  originalName);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  new  Ref(r.node,  originalName);	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
52	[BUG]  [BUGGY]  r.node  =  r.node,  originalName;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node,  originalName;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node,  originalName;	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
53	[BUG]  [BUGGY]  r.node  =  r.node  ||  r.isSet();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node  ||  r.isSet();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node  ||  r.isSet();	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
54	[BUG]  [BUGGY]  Node  rParent  =  n.node.getNameNode();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getNameNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getNameNode();	  Node    rParent    =    r.node.getNameNode();    	non-compiled	[CE]  not  a  statement	24	None	replace
55	[BUG]  [BUGGY]  Node  rParent  =  r.getParentNode();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.getParentNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.getParentNode();	  Node    rParent    =    n.getParentNode();    	non-compiled	[CE]  not  a  statement	42	None	replace
56	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getParentNode();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refs.getParentNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.getParentNode();	  Node    rParent    =    n.getParentNode();    	non-compiled	[CE]  not  a  statement	42	None	replace
57	[BUG]  [BUGGY]  Node  rParent  =  n.getRawParentNode();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getRawParentNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getRawParentNode();	  Node    rParent    =    n.getParentNode();    	non-compiled	[CE]  not  a  statement	42	None	replace
58	[BUG]  [BUGGY]  Node  rParent  =  n.ref();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.ref();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.ref();	  Node    rParent    =    r.node.ref();    	non-compiled	[CE]  not  a  statement	30	None	replace
59	[BUG]  [BUGGY]  Node  rParent  =  r.node.parent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.parent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.parent();	  Node    rParent    =    r.node.ref();    	non-compiled	[CE]  not  a  statement	30	None	replace
60	[BUG]  [BUGGY]  Node  rParent  =  n.node.getName();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getName();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getName();	  Node    rParent    =    r.node.getName();    	non-compiled	[CE]  not  a  statement	31	None	replace
61	[BUG]  [BUGGY]  Node  rParent  =  r.getNameNode();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.getNameNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.getNameNode();	  Node    rParent    =    n.getNameNode();    	non-compiled	[CE]  not  a  statement	41	None	replace
62	[BUG]  [BUGGY]  Node  rParent  =  n.getReferenceNameNode();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getReferenceNameNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getReferenceNameNode();	  Node    rParent    =    n.getNameNode();    	non-compiled	[CE]  not  a  statement	41	None	replace
63	[BUG]  [BUGGY]  Node  rParent  =  n.getRefNameNode();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getRefNameNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getRefNameNode();	  Node    rParent    =    n.getNameNode();    	non-compiled	[CE]  not  a  statement	41	None	replace
64	[BUG]  [BUGGY]  Node  rParent  =  n.getRefNode();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getRefNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getRefNode();	  Node    rParent    =    n.getNameNode();    	non-compiled	[CE]  not  a  statement	41	None	replace
65	[BUG]  [BUGGY]  Node  rParent  =  n.getReferenceName();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getReferenceName();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getReferenceName();	  Node    rParent    =    n.getNameNode();    	non-compiled	[CE]  not  a  statement	41	None	replace
66	[BUG]  [BUGGY]  Node  rParent  =  r.getParent(n);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.getParent(n);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.getParent(n);	  Node    rParent    =    n.getParent(r);    	non-compiled	[CE]  not  a  statement	40	None	replace
67	[BUG]  [BUGGY]  Node  rParent  =  n.getParent(r,  originalName);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getParent(r,  originalName);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getParent(r,  originalName);	  Node    rParent    =    n.getParent(r);    	non-compiled	[CE]  not  a  statement	40	None	replace
68	[BUG]  [BUGGY]  Node  rParent  =  n.getParent(ref);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getParent(ref);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getParent(ref);	  Node    rParent    =    n.getParent(r);    	non-compiled	[CE]  not  a  statement	40	None	replace
69	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getParent(r);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refs.getParent(r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.getParent(r);	  Node    rParent    =    n.getParent(r);    	non-compiled	[CE]  not  a  statement	40	None	replace
70	[BUG]  [BUGGY]  Node  rParent  =  n.node.clonePath();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.clonePath();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.clonePath();	  Node    rParent    =    r.node.clonePath();    	non-compiled	[CE]  not  a  statement	7	None	replace
71	[BUG]  [BUGGY]  Node  rParent  =  r.node.clonePath()  +  1;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.clonePath()  +  1;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.clonePath()  +  1;	  Node    rParent    =    r.node.clonePath();    	non-compiled	[CE]  not  a  statement	7	None	replace
72	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneFile();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneFile();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneFile();	  Node    rParent    =    r.node.clonePath();    	non-compiled	[CE]  not  a  statement	7	None	replace
73	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneAlias();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneAlias();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneAlias();	  Node    rParent    =    r.node.clonePath();    	non-compiled	[CE]  not  a  statement	7	None	replace
74	[BUG]  [BUGGY]  Node  rParent  =  n.parent.getRawParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.parent.getRawParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.parent.getRawParent();	  Node    rParent    =    n.node.getRawParent();    	non-compiled	[CE]  not  a  statement	11	None	replace
75	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getRef();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refs.getRef();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.getRef();	  Node    rParent    =    n.node.getRef();    	non-compiled	[CE]  not  a  statement	29	None	replace
76	[BUG]  [BUGGY]  Node  rParent  =  n.node.ref();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.ref();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.ref();	  Node    rParent    =    n.node.getRef();    	non-compiled	[CE]  not  a  statement	29	None	replace
77	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneRef();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.cloneRef();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneRef();	  Node    rParent    =    r.node.cloneRef();    	non-compiled	[CE]  not  a  statement	10	None	replace
78	[BUG]  [BUGGY]  Node  r  =  n.node.getNext();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  n.node.getNext();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  n.node.getNext();	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	38	None	replace
79	[BUG]  [BUGGY]  Node  r  =  r.node.getNext()  +  1;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  r.node.getNext()  +  1;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.getNext()  +  1;	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	38	None	replace
80	[BUG]  [BUGGY]  Node  r  =  r.node.cloneTwin();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  r.node.cloneTwin();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.cloneTwin();	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	38	None	replace
81	[BUG]  [BUGGY]  Node  r  =  r.node.getPrevious();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  r.node.getPrevious();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.getPrevious();	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	38	None	replace
82	[BUG]  [BUGGY]  Node  rParent  =  n.node.getParentOfThis();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getParentOfThis();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getParentOfThis();	  Node    rParent    =    r.node.getParentOfThis();    	non-compiled	[CE]  not  a  statement	47	None	replace
83	[BUG]  [BUGGY]  Node  rParent  =  r.node.getReferenceName();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.getReferenceName();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getReferenceName();	  Node    rParent    =    r.node.getParentOfThis();    	non-compiled	[CE]  not  a  statement	47	None	replace
84	[BUG]  [BUGGY]  Node  rParent  =  r.node.getReferenceNameNode()  +  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.getReferenceNameNode()  +  1;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getReferenceNameNode()  +  1;	  Node    rParent    =    r.node.getReferenceNameNode();    	non-compiled	[CE]  not  a  statement	19	None	replace
85	[BUG]  [BUGGY]  Node  rParent  =  r.node.getReferenceNameNode(originalName);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.getReferenceNameNode(originalName);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getReferenceNameNode(originalName);	  Node    rParent    =    r.node.getReferenceNameNode();    	non-compiled	[CE]  not  a  statement	19	None	replace
86	[BUG]  [BUGGY]  Node  rParent  =  r.getReferenceParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.getReferenceParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.getReferenceParent();	  Node    rParent    =    n.getReferenceParent();    	non-compiled	[CE]  not  a  statement	50	None	replace
87	[BUG]  [BUGGY]  Node  rParent  =  n.refParent;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refParent;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refParent;	  Node    rParent    =    n.getReferenceParent();    	non-compiled	[CE]  not  a  statement	50	None	replace
88	[BUG]  [BUGGY]  Node  rParent  =  n.getReferenceParent(r);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getReferenceParent(r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getReferenceParent(r);	  Node    rParent    =    n.getReferenceParent();    	non-compiled	[CE]  not  a  statement	50	None	replace
89	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refs.getNext();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.getNext();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	2	None	replace
90	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getRootNode();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refs.getRootNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.getRootNode();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	2	None	replace
91	[BUG]  [BUGGY]  Node  rParent  =  n.refs.cloneTree();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refs.cloneTree();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.cloneTree();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	2	None	replace
92	[BUG]  [BUGGY]  Node  r  =  r.node.getLastChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  r.node.getLastChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.getLastChild();	  Node    r    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	36	None	replace
93	[BUG]  [BUGGY]  Node  r  =  n.node.getFirstChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  n.node.getFirstChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  n.node.getFirstChild();	  Node    r    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	36	None	replace
94	[BUG]  [BUGGY]  Node  r  =  n.node.getLastChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  n.node.getLastChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  n.node.getLastChild();	  Node    r    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	36	None	replace
95	[BUG]  [BUGGY]  Node  r  =  r.node.getAncestor(1);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  r.node.getAncestor(1);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.getAncestor(1);	  Node    r    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	36	None	replace
96	[BUG]  [BUGGY]  Node  rParent  =  r.getRef();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.getRef();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.getRef();	  Node    rParent    =    n.getRef();    	non-compiled	[CE]  not  a  statement	5	None	replace
97	[BUG]  [BUGGY]  Node  rParent  =  n.getReference();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getReference();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getReference();	  Node    rParent    =    n.getRef();    	non-compiled	[CE]  not  a  statement	5	None	replace
98	[BUG]  [BUGGY]  Node  rParent  =  r.node.getPreviousChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.getPreviousChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getPreviousChild();	  Node    rParent    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	12	None	replace
99	[BUG]  [BUGGY]  Node  rParent  =  r.getPreviousParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.getPreviousParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.getPreviousParent();	  Node    rParent    =    n.getPreviousParent();    	non-compiled	[CE]  not  a  statement	46	None	replace
100	[BUG]  [BUGGY]  Node  rParent  =  n.getReviousParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getReviousParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getReviousParent();	  Node    rParent    =    n.getPreviousParent();    	non-compiled	[CE]  not  a  statement	46	None	replace
101	[BUG]  [BUGGY]  Node  rParent  =  r.node.getPreviousParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.getPreviousParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getPreviousParent();	  Node    rParent    =    n.getPreviousParent();    	non-compiled	[CE]  not  a  statement	46	None	replace
102	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getPreviousParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refs.getPreviousParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.getPreviousParent();	  Node    rParent    =    n.getPreviousParent();    	non-compiled	[CE]  not  a  statement	46	None	replace
103	[BUG]  [BUGGY]  Node  rParent  =  n.node.getNode();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getNode();	  Node    rParent    =    r.node.getNode();    	non-compiled	[CE]  not  a  statement	35	None	replace
104	[BUG]  [BUGGY]  Node  rParent  =  r.node.getRootNode();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.getRootNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getRootNode();	  Node    rParent    =    r.node.getNode();    	non-compiled	[CE]  not  a  statement	35	None	replace
105	[BUG]  [BUGGY]  Node  rParent  =  r.next();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.next();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.next();	  Node    rParent    =    n.getNext();    	non-compiled	[CE]  not  a  statement	4	None	replace
106	[BUG]  [BUGGY]  Node  rParent  =  n.getPrevious();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getPrevious();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getPrevious();	  Node    rParent    =    n.getNext();    	non-compiled	[CE]  not  a  statement	4	None	replace
107	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.cloneParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneParent();	  Node    rParent    =    r.node.cloneParent();    	non-compiled	[CE]  not  a  statement	43	None	replace
108	[BUG]  [BUGGY]  Node  rParent  =  n.node.getRootParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getRootParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getRootParent();	  Node    rParent    =    r.node.getRootParent();    	non-compiled	[CE]  not  a  statement	13	None	replace
109	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(param,  originalName);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneTwin(param,  originalName);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(param,  originalName);	  Node    rParent    =    r.node.cloneTwin(param);    	non-compiled	[CE]  not  a  statement	53	None	replace
110	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneTwin(param);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.cloneTwin(param);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneTwin(param);	  Node    rParent    =    r.node.cloneTwin(param);    	non-compiled	[CE]  not  a  statement	53	None	replace
111	[BUG]  [BUGGY]  Node  r  =  n.node.getParent();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  n.node.getParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  n.node.getParent();	  Node    r    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
112	[BUG]  [BUGGY]  Node  r  =  r.node.getRawParent();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  r.node.getRawParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.getRawParent();	  Node    r    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
113	[BUG]  [BUGGY]  Node  r  =  r.node.getPrefix();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  r.node.getPrefix();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.getPrefix();	  Node    r    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
114	[BUG]  [BUGGY]  Node  rParent  =  n.node.getPrevious();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getPrevious();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getPrevious();	  Node    rParent    =    r.node.getPrevious();    	non-compiled	[CE]  not  a  statement	21	None	replace
115	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneTwin(originalName);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.cloneTwin(originalName);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneTwin(originalName);	  Node    rParent    =    r.node.cloneTwin(originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
116	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(alias,  originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneTwin(alias,  originalName);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(alias,  originalName);	  Node    rParent    =    r.node.cloneTwin(originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
117	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(originalName,  n.refs);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneTwin(originalName,  n.refs);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(originalName,  n.refs);	  Node    rParent    =    r.node.cloneTwin(originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
118	[BUG]  [BUGGY]  r.node  =  r.node.getNext()  +  1;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node.getNext()  +  1;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node.getNext()  +  1;	  r.node    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	26	None	replace
119	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneNode();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.cloneNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneNode();	  Node    rParent    =    r.node.cloneNode();    	non-compiled	[CE]  not  a  statement	8	None	replace
120	[BUG]  [BUGGY]  Node  rParent  =  n.node.getParentRootNode();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getParentRootNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getParentRootNode();	  Node    rParent    =    r.node.getParentRootNode();    	non-compiled	[CE]  not  a  statement	39	None	replace
121	[BUG]  [BUGGY]  Node  rParent  =  n.getParentRootNode();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getParentRootNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getParentRootNode();	  Node    rParent    =    r.node.getParentRootNode();    	non-compiled	[CE]  not  a  statement	39	None	replace
122	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneTree(r);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.cloneTree(r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneTree(r);	  Node    rParent    =    n.node.cloneTree();    	non-compiled	[CE]  not  a  statement	6	None	replace
123	[BUG]  [BUGGY]  Node  rParent  =  r.node.getFirst();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.getFirst();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getFirst();	  Node    rParent    =    r.node.removeFirst();    	non-compiled	[CE]  not  a  statement	45	None	replace
124	[BUG]  [BUGGY]  r.node  =  l.node;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  l.node;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  l.node;	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
125	[BUG]  [BUGGY]  r.node  =  new  Ref(r.node);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  new  Ref(r.node);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  new  Ref(r.node);	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
126	[BUG]  [BUGGY]  Node  rParent  =  n.referenceParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.referenceParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.referenceParent();	  Node    rParent    =    n.getReferenceParent();    	non-compiled	[CE]  not  a  statement	50	None	replace
127	[BUG]  [BUGGY]  Node  rParent  =  n.refParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refParent();	  Node    rParent    =    n.getReferenceParent();    	non-compiled	[CE]  not  a  statement	50	None	replace
128	[BUG]  [BUGGY]  Node  rParent  =  r.node.getParentOwnerNode();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.getParentOwnerNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getParentOwnerNode();	  Node    rParent    =    r.node.getParentRootNode();    	non-compiled	[CE]  not  a  statement	39	None	replace
129	[BUG]  [BUGGY]  Node  rParent  =  n.parent.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.parent.getParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.parent.getParent();	  Node    rParent    =    n.node.getParent();    	non-compiled	[CE]  not  a  statement	44	None	replace
130	[BUG]  [BUGGY]  Node  rParent  =  n.getParentOwnerNode();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getParentOwnerNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getParentOwnerNode();	  Node    rParent    =    n.getParentNode();    	non-compiled	[CE]  not  a  statement	42	None	replace
131	[BUG]  [BUGGY]  Node  rParent  =  n.getReferenceParentNode();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getReferenceParentNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getReferenceParentNode();	  Node    rParent    =    n.getParentNode();    	non-compiled	[CE]  not  a  statement	42	None	replace
132	[BUG]  [BUGGY]  Node  rParent  =  n.node.getRef(r);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.getRef(r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getRef(r);	  Node    rParent    =    n.node.getRef();    	non-compiled	[CE]  not  a  statement	29	None	replace
133	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getNameParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refs.getNameParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.getNameParent();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	2	None	replace
134	[BUG]  [BUGGY]  Node  rParent  =  params.node.cloneTwin(r);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  params.node.cloneTwin(r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  params.node.cloneTwin(r);	  Node    rParent    =    r.node.cloneTwin(params);    	non-compiled	[CE]  not  a  statement	34	None	replace
135	[BUG]  [BUGGY]  Node  rParent  =  r.node.refParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.refParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.refParent();	  Node    rParent    =    r.node.getRefParent();    	non-compiled	[CE]  not  a  statement	23	None	replace
136	[BUG]  [BUGGY]  r.node  =  r.node.getNode();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node.getNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node.getNode();	  r.node    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	26	None	replace
137	[BUG]  [BUGGY]  Node  rParent  =  n.getParent(r,  true);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getParent(r,  true);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getParent(r,  true);	  Node    rParent    =    n.getParent(r);    	non-compiled	[CE]  not  a  statement	40	None	replace
138	[BUG]  [BUGGY]  Node  rParent  =  r.node.getReferenceNameNode().cloneTree();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.getReferenceNameNode().cloneTree();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getReferenceNameNode().cloneTree();	  Node    rParent    =    r.node.getReferenceNameNode();    	non-compiled	[CE]  not  a  statement	19	None	replace
139	[BUG]  [BUGGY]  r.node  =  r.node.getNameNode();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node.getNameNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node.getNameNode();	  r.node    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	49	None	replace
140	[BUG]  [BUGGY]  r.node  =  r.node.cloneTree();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node.cloneTree();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node.cloneTree();	  r.node    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	49	None	replace
141	[BUG]  [BUGGY]  Name  r  =  n.getName()  +  1;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Name  r  =  n.getName()  +  1;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Name  r  =  n.getName()  +  1;	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
142	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  originalName));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  originalName));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  originalName));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
143	[BUG]  [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName));  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  UNSAFE_NAMESPACE_REDEFINED_WARNING,  originalName));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
144	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_REDEFINED_WARNING));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_REDEFINED_WARNING));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_REDEFINED_WARNING));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
145	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS));  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_THIS));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_THIS));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
146	[BUG]  [BUGGY]  Node  r  =  r.node.cloneTree();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  r.node.cloneTree();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.cloneTree();	  Node    r    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
147	[BUG]  [BUGGY]  Node  r  =  r.node.removeFirstChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  r.node.removeFirstChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.removeFirstChild();	  Node    r    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
148	[BUG]  [BUGGY]  Node  rParent  =  r.node.getParent()  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.getParent()  +  1;  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getParent()  +  1;	  Node    rParent    =    r.node.cloneTwin()    +    1;    	non-compiled	[CE]  not  a  statement	16	None	replace
149	[BUG]  [BUGGY]  Node  r  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  n.getFirstChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  n.getFirstChild();	  Node    r    =    r.node.getFirstChild();    	non-compiled	[CE]  not  a  statement	36	None	replace
150	[BUG]  [BUGGY]  Node  rParent  =  r.node.param();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.param();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.param();	  Node    rParent    =    r.node.ref();    	non-compiled	[CE]  not  a  statement	30	None	replace
151	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneRoot();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneRoot();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneRoot();	  Node    rParent    =    r.node.clone();    	non-compiled	[CE]  not  a  statement	9	None	replace
152	[BUG]  [BUGGY]  Node  rParent  =  n.getNode();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getNode();	  Node    rParent    =    n.getRef();    	non-compiled	[CE]  not  a  statement	5	None	replace
153	[BUG]  [BUGGY]  Node  rParent  =  n.getName();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getName();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getName();	  Node    rParent    =    n.getRef();    	non-compiled	[CE]  not  a  statement	5	None	replace
154	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(param,  null);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneTwin(param,  null);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(param,  null);	  Node    rParent    =    r.node.cloneTwin(param);    	non-compiled	[CE]  not  a  statement	53	None	replace
155	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(param,  refs);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneTwin(param,  refs);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(param,  refs);	  Node    rParent    =    r.node.cloneTwin(param);    	non-compiled	[CE]  not  a  statement	53	None	replace
156	[BUG]  [BUGGY]  Node  rParent  =  n.getRawParent(r);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getRawParent(r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getRawParent(r);	  Node    rParent    =    n.getRawParent();    	non-compiled	[CE]  not  a  statement	3	None	replace
157	[BUG]  [BUGGY]  Node  r  =  r.node.removeFirst();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  r  =  r.node.removeFirst();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.removeFirst();	  Node    r    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	38	None	replace
158	[BUG]  [BUGGY]  Node  rParent  =  r.node.toString();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.toString();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.toString();	  Node    rParent    =    r.node.getName();    	non-compiled	[CE]  not  a  statement	31	None	replace
159	[BUG]  [BUGGY]  Node  rParent  =  n.replaceChild(n,  r);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.replaceChild(n,  r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.replaceChild(n,  r);	  Node    rParent    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
160	[BUG]  [BUGGY]  r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenNameRef(alias,  r.node,  rParent,  originalName);	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
161	[BUG]  [BUGGY]  r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenNameRef(alias,  r.node,  rParent);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenNameRef(alias,  r.node,  rParent);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenNameRef(alias,  r.node,  rParent);	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
162	[BUG]  [BUGGY]  r.node  =  r.node  ||!NodeUtil.isObjectLitKey(r.node,  rParent);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node  ||!NodeUtil.isObjectLitKey(r.node,  rParent);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node  ||!NodeUtil.isObjectLitKey(r.node,  rParent);	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
163	[BUG]  [BUGGY]  r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenRef(alias,  r.node,  rParent,  originalName);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenRef(alias,  r.node,  rParent,  originalName);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenRef(alias,  r.node,  rParent,  originalName);	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
164	[BUG]  [BUGGY]  r.node  =  r.node  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node  ||!NodeUtil.isObjectLitKey(r.node,  rParent)&&!NodeUtil.isObjectLitKey(r.node,  rParent);	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
165	[BUG]  [BUGGY]  r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node  ||  r.getTwin()  ==  null  ||  r.isSet())  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }	  r.node    =    r.node;    	non-compiled	[CE]  not  a  statement	25	None	replace
166	[BUG]  [BUGGY]  Node  rParent  =  param.node.cloneTwin(r);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  param.node.cloneTwin(r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  param.node.cloneTwin(r);	  Node    rParent    =    r.node.cloneTwin(param);    	non-compiled	[CE]  not  a  statement	53	None	replace
167	[BUG]  [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_WARNING,  alias));  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_WARNING,  alias));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  UNSAFE_NAMESPACE_WARNING,  alias));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
168	[BUG]  [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_WARNING,  n.fullName()));  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  UNSAFE_NAMESPACE_WARNING,  n.fullName()));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  UNSAFE_NAMESPACE_WARNING,  n.fullName()));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
169	[BUG]  [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  alias));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  alias));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.report(JSError.make(r,  n,  UNSAFE_NAMESPACE_WARNING,  alias));	  Context.reportCodeChange();    	non-compiled	[CE]  not  a  statement	27	None	replace
170	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneTwinNode();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.cloneTwinNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneTwinNode();	  Node    rParent    =    n.node.cloneTwin();    	non-compiled	[CE]  not  a  statement	14	None	replace
171	[BUG]  [BUGGY]  Node  rParent  =  n.cloneTree();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.cloneTree();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.cloneTree();	  Node    rParent    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
172	[BUG]  [BUGGY]  Node  rParent  =  n.replaceChild(r,  new  Node(Token.NAMESPACE));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.replaceChild(r,  new  Node(Token.NAMESPACE));  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.replaceChild(r,  new  Node(Token.NAMESPACE));	  Node    rParent    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
173	[BUG]  [BUGGY]  r.node  =  r.node.removeFirstChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node.removeFirstChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node.removeFirstChild();	  r.node    =    r.node.getParent();    	non-compiled	[CE]  not  a  statement	49	None	replace
174	[BUG]  [BUGGY]  Node  rParent  =  r.cloneTree();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.cloneTree();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.cloneTree();	  Node    rParent    =    r.getParent();    	non-compiled	[CE]  not  a  statement	1	None	replace
175	[BUG]  [BUGGY]  Node  rParent  =  n.getOwnerParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getOwnerParent();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getOwnerParent();	  Node    rParent    =    n.getPreviousParent();    	non-compiled	[CE]  not  a  statement	46	None	replace
176	[BUG]  [BUGGY]  Name  r  =  n.getNamespaceURI();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Name  r  =  n.getNamespaceURI();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Name  r  =  n.getNamespaceURI();	  Name    r    =    n.getName();    	non-compiled	[CE]  not  a  statement	28	None	replace
177	[BUG]  [BUGGY]  Node  rParent  =  r.node.getReferenceNameNode(ref);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.getReferenceNameNode(ref);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getReferenceNameNode(ref);	  Node    rParent    =    r.node.getReferenceNameNode();    	non-compiled	[CE]  not  a  statement	19	None	replace
178	[BUG]  [BUGGY]  Node  rParent  =  n.getParentByName(r);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getParentByName(r);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getParentByName(r);	  Node    rParent    =    n.getParent(r);    	non-compiled	[CE]  not  a  statement	40	None	replace
179	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneBlock();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneBlock();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneBlock();	  Node    rParent    =    r.node.cloneNode();    	non-compiled	[CE]  not  a  statement	8	None	replace
180	[BUG]  [BUGGY]  Node  rParent  =  n.node.removeFirst();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.removeFirst();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.removeFirst();	  Node    rParent    =    n.node.getNext();    	non-compiled	[CE]  not  a  statement	20	None	replace
181	[BUG]  [BUGGY]  Node  rParent  =  r.node.removeLast();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.removeLast();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.removeLast();	  Node    rParent    =    r.node.removeFirst();    	non-compiled	[CE]  not  a  statement	45	None	replace
182	[BUG]  [BUGGY]  Node  rParent  =  n.removeFirst();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.removeFirst();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.removeFirst();	  Node    rParent    =    r.node.removeFirst();    	non-compiled	[CE]  not  a  statement	45	None	replace
183	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getParentOfThis();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.refs.getParentOfThis();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.getParentOfThis();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	2	None	replace
184	[BUG]  [BUGGY]  NodeRParent  rParent  =  r.node.cloneTwin();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  NodeRParent  rParent  =  r.node.cloneTwin();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	NodeRParent  rParent  =  r.node.cloneTwin();	  Node    rParent    =    r.node.cloneTwin()    +    1;    	non-compiled	[CE]  not  a  statement	16	None	replace
185	[BUG]  [BUGGY]  Node  rParent  =  n.node.removeLastChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.node.removeLastChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.removeLastChild();	  Node    rParent    =    r.node.removeLastChild();    	non-compiled	[CE]  not  a  statement	51	None	replace
186	[BUG]  [BUGGY]  Node  rParent  =  r.node.parseFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.parseFirstChild();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.parseFirstChild();	  Node    rParent    =    r.node.removeLastChild();    	non-compiled	[CE]  not  a  statement	51	None	replace
187	[BUG]  [BUGGY]  r.node  =  r.node.removeFirst();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  r.node  =  r.node.removeFirst();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node.removeFirst();	  r.node    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	26	None	replace
188	[BUG]  [BUGGY]  Node  rParent  =  n.getOwnerFunction();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getOwnerFunction();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getOwnerFunction();	  Node    rParent    =    n.getRef();    	non-compiled	[CE]  not  a  statement	5	None	replace
189	[BUG]  [BUGGY]  Node  rParent  =  n.getRootNode();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  n.getRootNode();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getRootNode();	  Node    rParent    =    n.getRef();    	non-compiled	[CE]  not  a  statement	5	None	replace
190	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(alias,  r.node);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneTwin(alias,  r.node);  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(alias,  r.node);	  Node    rParent    =    r.node.cloneTwin(originalName);    	non-compiled	[CE]  not  a  statement	15	None	replace
191	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneAliases();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {      [BUGGY]  Node  rParent  =  r.node.cloneAliases();  [BUGGY]            if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneAliases();	  Node    rParent    =    r.node.cloneChildren();    	non-compiled	[CE]  not  a  statement	48	None	replace
