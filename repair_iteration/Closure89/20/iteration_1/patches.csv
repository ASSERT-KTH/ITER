bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  rParent  =  r.getParent();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.getParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.getParent();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	10	None	replace
2	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getParent();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.refs.getParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.refs.getParent();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	10	None	replace
3	[BUG]  [BUGGY]  Node  rParent  =  n.getRawParent();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.getRawParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getRawParent();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	10	None	replace
4	[BUG]  [BUGGY]  Node  rParent  =  n.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.getNext();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getNext();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	10	None	replace
5	[BUG]  [BUGGY]  Node  rParent  =  n.getRef();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.getRef();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getRef();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	10	None	replace
6	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneTree();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.node.cloneTree();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneTree();	  Node    rParent    =    r.node.cloneTree();    	non-compiled	[CE]  not  a  statement	6	None	replace
7	[BUG]  [BUGGY]  Node  rParent  =  r.node.clonePath();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.clonePath();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.clonePath();	  Node    rParent    =    r.node.cloneTree();    	non-compiled	[CE]  not  a  statement	6	None	replace
8	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneNode();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.cloneNode();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneNode();	  Node    rParent    =    r.node.cloneTree();    	non-compiled	[CE]  not  a  statement	6	None	replace
9	[BUG]  [BUGGY]  Node  rParent  =  r.node.clone();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.clone();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.clone();	  Node    rParent    =    r.node.cloneTree();    	non-compiled	[CE]  not  a  statement	6	None	replace
10	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneRef();  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.cloneRef();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneRef();	  Node    rParent    =    r.node.cloneTree();    	non-compiled	[CE]  not  a  statement	6	None	replace
11	[BUG]  [BUGGY]  Node  rParent  =  n.node.getRawParent();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.node.getRawParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getRawParent();	  Node    rParent    =    r.node.getRawParent();    	non-compiled	[CE]  not  a  statement	3	None	replace
12	[BUG]  [BUGGY]  Node  rParent  =  r.node.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getFirstChild();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getFirstChild();	  Node    rParent    =    r.node.getRawParent();    	non-compiled	[CE]  not  a  statement	3	None	replace
13	[BUG]  [BUGGY]  Node  rParent  =  r.node.getRootParent();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getRootParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getRootParent();	  Node    rParent    =    r.node.getRawParent();    	non-compiled	[CE]  not  a  statement	3	None	replace
14	[BUG]  [BUGGY]  Node  rParent  =  n.node.cloneTwin();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.node.cloneTwin();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.cloneTwin();	  Node    rParent    =    r.node.cloneTwin();    	non-compiled	[CE]  not  a  statement	1	None	replace
15	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(originalName);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.cloneTwin(originalName);  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(originalName);	  Node    rParent    =    r.node.cloneTwin();    	non-compiled	[CE]  not  a  statement	1	None	replace
16	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin()  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.cloneTwin()  +  1;  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin()  +  1;	  Node    rParent    =    r.node.cloneTwin();    	non-compiled	[CE]  not  a  statement	1	None	replace
17	[BUG]  [BUGGY]  Node  rParent  =  n.node.getParentNode();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.node.getParentNode();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getParentNode();	  Node    rParent    =    r.node.getParentNode();    	non-compiled	[CE]  not  a  statement	9	None	replace
18	[BUG]  [BUGGY]  Node  rParent  =  r.node.getRefNode();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getRefNode();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getRefNode();	  Node    rParent    =    r.node.getParentNode();    	non-compiled	[CE]  not  a  statement	9	None	replace
19	[BUG]  [BUGGY]  Node  rParent  =  r.node.getReferenceNameNode();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getReferenceNameNode();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getReferenceNameNode();	  Node    rParent    =    r.node.getParentNode();    	non-compiled	[CE]  not  a  statement	9	None	replace
20	[BUG]  [BUGGY]  Node  rParent  =  n.node.getNext();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.node.getNext();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getNext();	  Node    rParent    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	2	None	replace
21	[BUG]  [BUGGY]  Node  rParent  =  r.node.getPrevious();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getPrevious();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getPrevious();	  Node    rParent    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	2	None	replace
22	[BUG]  [BUGGY]  Node  rParent  =  n.node.getReferenceParent();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.node.getReferenceParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getReferenceParent();	  Node    rParent    =    r.node.getReferenceParent();    	non-compiled	[CE]  not  a  statement	8	None	replace
23	[BUG]  [BUGGY]  Node  rParent  =  r.node.getRefParent();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getRefParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getRefParent();	  Node    rParent    =    r.node.getReferenceParent();    	non-compiled	[CE]  not  a  statement	8	None	replace
24	[BUG]  [BUGGY]  Node  rParent  =  r.node.getNameNode();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getNameNode();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getNameNode();	  Node    rParent    =    r.node.getReferenceParent();    	non-compiled	[CE]  not  a  statement	8	None	replace
25	[BUG]  [BUGGY]  r.node  =  r.node;  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  r.node  =  r.node;  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node;	      	non-compiled	[CE]  not  a  statement	7	None	replace
26	[BUG]  [BUGGY]  r.node  =  r.node.getNext();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  r.node  =  r.node.getNext();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node.getNext();	      	non-compiled	[CE]  not  a  statement	7	None	replace
27	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Context.reportCodeChange();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Context.reportCodeChange();	      	non-compiled	[CE]  not  a  statement	7	None	replace
28	[BUG]  [BUGGY]  Name  r  =  n.getName();  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Name  r  =  n.getName();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Name  r  =  n.getName();	      	non-compiled	[CE]  not  a  statement	7	None	replace
29	[BUG]  [BUGGY]  Node  rParent  =  n.node.getRef();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.node.getRef();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getRef();	  Node    rParent    =    r.node.getRef();    	non-compiled	[CE]  not  a  statement	4	None	replace
30	[BUG]  [BUGGY]  Node  rParent  =  r.node.ref();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.ref();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.ref();	  Node    rParent    =    r.node.getRef();    	non-compiled	[CE]  not  a  statement	4	None	replace
31	[BUG]  [BUGGY]  Node  rParent  =  r.node.getName();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getName();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getName();	  Node    rParent    =    r.node.getRef();    	non-compiled	[CE]  not  a  statement	4	None	replace
32	[BUG]  [BUGGY]  Node  rParent  =  n.removeFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.removeFirstChild();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.removeFirstChild();	  Node    rParent    =    r.node.removeFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
33	[BUG]  [BUGGY]  Node  rParent  =  r.node.getLastChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getLastChild();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getLastChild();	  Node    rParent    =    r.node.removeFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
34	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(params);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.cloneTwin(params);  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(params);	  Node    rParent    =    r.node.cloneTwin();    	non-compiled	[CE]  not  a  statement	1	None	replace
35	[BUG]  [BUGGY]  Node  rParent  =  r.node.getNode();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getNode();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getNode();	  Node    rParent    =    r.node.getReferenceParent();    	non-compiled	[CE]  not  a  statement	8	None	replace
36	[BUG]  [BUGGY]  Node  r  =  r.node.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  r  =  r.node.getFirstChild();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.getFirstChild();	      	non-compiled	[CE]  not  a  statement	7	None	replace
37	[BUG]  [BUGGY]  Node  r  =  r.node.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  r  =  r.node.getParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.getParent();	      	non-compiled	[CE]  not  a  statement	7	None	replace
38	[BUG]  [BUGGY]  Node  r  =  r.node.getNext();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  r  =  r.node.getNext();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  r  =  r.node.getNext();	      	non-compiled	[CE]  not  a  statement	7	None	replace
39	[BUG]  [BUGGY]  Node  rParent  =  r.node.getParentRootNode();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getParentRootNode();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getParentRootNode();	  Node    rParent    =    r.node.getParentNode();    	non-compiled	[CE]  not  a  statement	9	None	replace
40	[BUG]  [BUGGY]  Node  rParent  =  n.getParent(r);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.getParent(r);  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getParent(r);	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	10	None	replace
41	[BUG]  [BUGGY]  Node  rParent  =  n.getNameNode();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.getNameNode();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getNameNode();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	10	None	replace
42	[BUG]  [BUGGY]  Node  rParent  =  n.getParentNode();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.getParentNode();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getParentNode();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	10	None	replace
43	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.cloneParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneParent();	  Node    rParent    =    r.node.cloneTree();    	non-compiled	[CE]  not  a  statement	6	None	replace
44	[BUG]  [BUGGY]  Node  rParent  =  n.node.getParent();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.node.getParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.getParent();	  Node    rParent    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	2	None	replace
45	[BUG]  [BUGGY]  Node  rParent  =  r.node.removeFirst();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.removeFirst();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.removeFirst();	  Node    rParent    =    r.node.getNext();    	non-compiled	[CE]  not  a  statement	2	None	replace
46	[BUG]  [BUGGY]  Node  rParent  =  n.getPreviousParent();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.getPreviousParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getPreviousParent();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	10	None	replace
47	[BUG]  [BUGGY]  Node  rParent  =  r.node.getParentOfThis();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.getParentOfThis();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.getParentOfThis();	  Node    rParent    =    r.node.getParentNode();    	non-compiled	[CE]  not  a  statement	9	None	replace
48	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneChildren();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.cloneChildren();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneChildren();	  Node    rParent    =    r.node.cloneTree();    	non-compiled	[CE]  not  a  statement	6	None	replace
49	[BUG]  [BUGGY]  r.node  =  r.node.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  r.node  =  r.node.getParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	r.node  =  r.node.getParent();	      	non-compiled	[CE]  not  a  statement	7	None	replace
50	[BUG]  [BUGGY]  Node  rParent  =  n.getReferenceParent();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.getReferenceParent();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.getReferenceParent();	  Node    rParent    =    r.node.getReferenceParent();    	non-compiled	[CE]  not  a  statement	8	None	replace
51	[BUG]  [BUGGY]  Node  rParent  =  r.node.removeLastChild();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.removeLastChild();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.removeLastChild();	  Node    rParent    =    r.node.removeFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
52	[BUG]  [BUGGY]  Node  rParent  =  n.node.removeFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  n.node.removeFirstChild();  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  n.node.removeFirstChild();	  Node    rParent    =    r.node.removeFirstChild();    	non-compiled	[CE]  not  a  statement	5	None	replace
53	[BUG]  [BUGGY]  Node  rParent  =  r.node.cloneTwin(param);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {  String  originalName  =  n.fullName();  for  (Ref  r  :  n.refs)  {    [BUGGY]  Node  rParent  =  r.node.cloneTwin(param);  [BUGGY]          if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  flattenNameRef(alias,  r.node,  rParent,  originalName);  }  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	320	320	8	replace	Node  rParent  =  r.node.cloneTwin(param);	  Node    rParent    =    r.node.cloneTwin();    	non-compiled	[CE]  not  a  statement	1	None	replace
