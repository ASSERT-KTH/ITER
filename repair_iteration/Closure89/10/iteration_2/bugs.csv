bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespace)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.namespace)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespace)  {	  for(Ref    ref    :    refs.namespace)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
2	[BUG]  [BUGGY]  for(Ref  ref  :  namespace)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  namespace)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace)  {	  for(Ref    ref    :    refs.namespace)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
3	[BUG]  [BUGGY]  for(Ref  ref  :  name.refs)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.refs)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.refs)  {	  for(Ref    ref    :    refs.namespace)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
4	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.globalSets)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.namespace,  name.globalSets)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.globalSets)  {	  for(Ref    ref    :    refs.namespace)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
5	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.localSets)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.namespace,  name.localSets)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.localSets)  {	  for(Ref    ref    :    refs.namespace)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
6	[BUG]  [BUGGY]  for(Ref  ref  :  names.namespace)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  names.namespace)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.namespace)  {	  for(Ref    ref    :    refs.namespace)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
7	[BUG]  [BUGGY]  for(Ref  ref  :  name.names)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.names)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.names)  {	  for(Ref    ref    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
8	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.names)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  namespace.names)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.names)  {	  for(Ref    ref    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
9	[BUG]  [BUGGY]  for(Ref  ref  :  names.names)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  names.names)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.names)  {	  for(Ref    ref    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
10	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces.names)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  namespaces.names)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces.names)  {	  for(Ref    ref    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
11	[BUG]  [BUGGY]  for(Ref  ref  :  names)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  names)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names)  {	  for(Ref    ref    :    refs.names)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
12	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.refs)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  namespace.refs)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.refs)  {	  for(Ref    ref    :    refs.refs)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
13	[BUG]  [BUGGY]  for(Ref  ref  :  names.refs)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  names.refs)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.refs)  {	  for(Ref    ref    :    refs.refs)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
14	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces.refs)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  namespaces.refs)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces.refs)  {	  for(Ref    ref    :    refs.refs)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
15	[BUG]  [BUGGY]  for(Ref  ref  :  name.refs.asList())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.refs.asList())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.refs.asList())  {	  for(Ref    ref    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
16	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.asList())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  namespace.asList())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.asList())  {	  for(Ref    ref    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
17	[BUG]  [BUGGY]  for(Ref  ref  :  name.asList())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.asList())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.asList())  {	  for(Ref    ref    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
18	[BUG]  [BUGGY]  for(Ref  ref  :  name.names.asList())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.names.asList())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.names.asList())  {	  for(Ref    ref    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
19	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespaces.asList())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.namespaces.asList())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespaces.asList())  {	  for(Ref    ref    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
20	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  namespaces)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces)  {	  for(Ref    ref    :    refs.namespaces)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
21	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespaces)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.namespaces)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespaces)  {	  for(Ref    ref    :    refs.namespaces)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
22	[BUG]  [BUGGY]  for(Ref  ref  :  names.namespaces)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  names.namespaces)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.namespaces)  {	  for(Ref    ref    :    refs.namespaces)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
23	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.globalSets)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.globalSets)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.globalSets)  {	  for(Ref    ref    :    refs.namespaces)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
24	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.localSets)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.localSets)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.localSets)  {	  for(Ref    ref    :    refs.namespaces)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
25	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.aliasingGets)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.aliasingGets)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.aliasingGets)  {	  for(Ref    ref    :    refs.namespaces)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
26	[BUG]  [BUGGY]  for(Ref  ref  :  name.types)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.types)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.types)  {	  for(Ref    ref    :    refs.types)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
27	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.types)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  namespace.types)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.types)  {	  for(Ref    ref    :    refs.types)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
28	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(refs.size()  -  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  Name  ref  =  nameMap.get(refs.size()  -  1);  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(refs.size()  -  1);	      	non-compiled	[CE]  not  a  statement	6	None	replace
29	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(refs);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  Name  ref  =  nameMap.get(refs);  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(refs);	      	non-compiled	[CE]  not  a  statement	6	None	replace
30	[BUG]  [BUGGY]  Name  ref  =  name.getName();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  Name  ref  =  name.getName();  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.getName();	      	non-compiled	[CE]  not  a  statement	6	None	replace
31	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  Name  ref  =  nameMap.get(name.localSets);  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.localSets);	      	non-compiled	[CE]  not  a  statement	6	None	replace
32	[BUG]  [BUGGY]  refs.addAll(name.globalSets);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  refs.addAll(name.globalSets);  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.addAll(name.globalSets);	      	non-compiled	[CE]  not  a  statement	6	None	replace
33	[BUG]  [BUGGY]  Name  ref  =  name.getRef();  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  Name  ref  =  name.getRef();  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.getRef();	      	non-compiled	[CE]  not  a  statement	6	None	replace
34	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  1);  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  1);  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.localSets  +  1);	      	non-compiled	[CE]  not  a  statement	6	None	replace
35	[BUG]  [BUGGY]  for(Ref  ref  :  name.values())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.values())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.values())  {	  for(Ref    ref    :    refs.values())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
36	[BUG]  [BUGGY]  for(Ref  ref  :  name.refs.values())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.refs.values())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.refs.values())  {	  for(Ref    ref    :    refs.values())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
37	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.values())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  namespace.values())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.values())  {	  for(Ref    ref    :    refs.values())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
38	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.namespaces())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces())  {	  for(Ref    ref    :    refs.values())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
39	[BUG]  [BUGGY]  for(Ref  ref  :  name.names())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.names())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.names())  {	  for(Ref    ref    :    refs.values())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
40	[BUG]  [BUGGY]  for(Ref  ref  :  names.values())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  names.values())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.values())  {	  for(Ref    ref    :    refs.values())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
41	[BUG]  [BUGGY]  for(Ref  ref  :  refs,  namespace)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs,  namespace)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs,  namespace)  {	  for(Ref    ref    :    refs.names)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
42	[BUG]  [BUGGY]  for(Ref  ref  :  refs.keySet())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.keySet())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.keySet())  {	  for(Ref    ref    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
43	[BUG]  [BUGGY]  for(Ref  ref  :  refs.list())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.list())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.list())  {	  for(Ref    ref    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
44	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace	      	non-compiled	[CE]  ')'  expected	6	None	replace
45	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
46	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name	      	non-compiled	[CE]  ')'  expected	6	None	replace
47	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
48	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace)  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace)  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace)	      	non-compiled	[CE]  ')'  expected	6	None	replace
49	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace	      	non-compiled	[CE]  ')'  expected	6	None	replace
50	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.aliasingGets)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.namespace,  name.aliasingGets)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.aliasingGets)  {	  for(Ref    ref    :    refs.namespace)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
51	[BUG]  [BUGGY]  for(Ref  ref  :  refs.refs,  namespace)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.refs,  namespace)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.refs,  namespace)  {	  for(Ref    ref    :    refs.refs)    {    	non-compiled	[CE]  ')'  expected	3	None	replace
52	[BUG]  [BUGGY]  for(Ref  ref  :  name.refs())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  name.refs())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.refs())  {	  for(Ref    ref    :    refs.values())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
53	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  namespace)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.namespaces,  namespace)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  namespace)  {	  for(Ref    ref    :    refs.namespaces)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
54	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.refs.asList())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  namespace.refs.asList())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.refs.asList())  {	  for(Ref    ref    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
55	[BUG]  [BUGGY]  for(Ref  ref  :  names.asList())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  names.asList())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.asList())  {	  for(Ref    ref    :    refs.asList())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
56	[BUG]  [BUGGY]  for(Ref  ref  :  refs.types,  namespace)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.types,  namespace)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.types,  namespace)  {	  for(Ref    ref    :    refs.types)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
57	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaceNames)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  refs.namespaceNames)  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaceNames)  {	  for(Ref    ref    :    refs.namespace)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
58	[BUG]  [BUGGY]  if(refs.size()  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs.size()  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs.size()  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
59	[BUG]  [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
60	[BUG]  [BUGGY]  if(refs.size()  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs.size()  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs.size()  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
61	[BUG]  [BUGGY]  if(refs.size()  >  0)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs.size()  >  0)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs.size()  >  0)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  name.removeRef(ref);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
62	[BUG]  [BUGGY]  if(refs.size()  >  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs.size()  >  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs.size()  >  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  name.removeRef(ref);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
63	[BUG]  [BUGGY]  if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  name.removeRef(ref);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
64	[BUG]  [BUGGY]  if(refs.size()  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  if(refs.size()  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs.size()  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	      	non-compiled	[CE]  not  a  statement	6	None	replace
65	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.names())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);    [BUGGY]  for(Ref  ref  :  namespace.names())  {  [BUGGY]    if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.names())  {	  for(Ref    ref    :    refs.values())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
