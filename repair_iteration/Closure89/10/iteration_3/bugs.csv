bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.namespaces)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.namespaces)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.namespaces)  {	  for(Ref    ref    :    namespace.types)    {    	non-compiled	[CE]  not  a  statement	27	None	replace
2	[BUG]  [BUGGY]  for(Ref  ref  :  names.types)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  names.types)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.types)  {	  for(Ref    ref    :    namespace.types)    {    	non-compiled	[CE]  not  a  statement	27	None	replace
3	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  namespace)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  namespace)  {	  for(Ref    ref    :    refs.refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
4	[BUG]  [BUGGY]  for(Ref  ref  :  refs.refs,  namespace.aliasingGets)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.refs,  namespace.aliasingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.refs,  namespace.aliasingGets)  {	  for(Ref    ref    :    refs.refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
5	[BUG]  [BUGGY]  for(Ref  ref  :  refs.refs,  namespace.namespace)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.refs,  namespace.namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.refs,  namespace.namespace)  {	  for(Ref    ref    :    refs.refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
6	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.refs);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.refs);	  Name    ref    =    nameMap.get(refs);    	non-compiled	[CE]  not  a  statement	29	None	replace
7	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(refs,  name.aliasingGets);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(refs,  name.aliasingGets);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(refs,  name.aliasingGets);	  Name    ref    =    nameMap.get(refs);    	non-compiled	[CE]  not  a  statement	29	None	replace
8	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.aliasingGets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.aliasingGets);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.aliasingGets);	  Name    ref    =    nameMap.get(refs);    	non-compiled	[CE]  not  a  statement	29	None	replace
9	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(refs.namespace);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(refs.namespace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(refs.namespace);	  Name    ref    =    nameMap.get(refs);    	non-compiled	[CE]  not  a  statement	29	None	replace
10	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.globalSets);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.globalSets);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.globalSets);	  Name    ref    =    nameMap.get(refs);    	non-compiled	[CE]  not  a  statement	29	None	replace
11	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name	  if(refs!=    null)    {    Ref    ref    =    refs.newRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace    	non-compiled	[CE]  ')'  expected	49	None	replace
12	[BUG]  [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs  ==  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name	  if(refs!=    null)    {    Ref    ref    =    refs.newRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace    	non-compiled	[CE]  ')'  expected	49	None	replace
13	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,	  if(refs!=    null)    {    Ref    ref    =    refs.newRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
14	[BUG]  [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs  ==  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace	  if(refs!=    null)    {    Ref    ref    =    refs.newRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace    	non-compiled	[CE]  ')'  expected	49	None	replace
15	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name	  if(refs!=    null)    {    Ref    ref    =    refs.newRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace    	non-compiled	[CE]  ')'  expected	49	None	replace
16	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  }  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  }	  if(refs!=    null)    {    Ref    ref    =    refs.newRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace    	non-compiled	[CE]  ')'  expected	49	None	replace
17	[BUG]  [BUGGY]  for(Ref  ref  :  names.keySet())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  names.keySet())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.keySet())  {	  for(Ref    ref    :    names)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
18	[BUG]  [BUGGY]  for(Ref  ref  :  nameSpace.names)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  nameSpace.names)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  nameSpace.names)  {	  for(Ref    ref    :    namespace.names)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
19	[BUG]  [BUGGY]  for(Ref  ref  :  name.refs.keySet())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.refs.keySet())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.refs.keySet())  {	  for(Ref    ref    :    name.refs.asList())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
20	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespace.asList())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespace.asList())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespace.asList())  {	  for(Ref    ref    :    name.refs.asList())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
21	[BUG]  [BUGGY]  for(Ref  ref  :  name.refs.toArray())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.refs.toArray())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.refs.toArray())  {	  for(Ref    ref    :    name.refs.asList())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
22	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespaces.values())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespaces.values())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespaces.values())  {	  for(Ref    ref    :    name.namespaces.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
23	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespaces.keySet())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespaces.keySet())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespaces.keySet())  {	  for(Ref    ref    :    name.namespaces.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
24	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespaces.iterator().next())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespaces.iterator().next())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespaces.iterator().next())  {	  for(Ref    ref    :    name.namespaces.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
25	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespaces.toArray(refs))  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespaces.toArray(refs))  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespaces.toArray(refs))  {	  for(Ref    ref    :    name.namespaces.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
26	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.namespaces.values())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.namespaces.values())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.namespaces.values())  {	  for(Ref    ref    :    name.namespaces.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
27	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces.asList())  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces.asList())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces.asList())  {	  for(Ref    ref    :    name.namespaces.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
28	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespaceNames)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespaceNames)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespaceNames)  {	  for(Ref    ref    :    refs.namespaceNames)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
29	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.namespaceNames)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.namespaceNames)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.namespaceNames)  {	  for(Ref    ref    :    refs.namespaceNames)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
30	[BUG]  [BUGGY]  for(Ref  ref  :  namespaceNames)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaceNames)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaceNames)  {	  for(Ref    ref    :    refs.namespaceNames)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
31	[BUG]  [BUGGY]  for(Ref  ref  :  names.namespaceNames)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  names.namespaceNames)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.namespaceNames)  {	  for(Ref    ref    :    refs.namespaceNames)    {    	non-compiled	[CE]  not  a  statement	57	None	replace
32	[BUG]  [BUGGY]  Name  ref  =  refs.get(0);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  refs.get(0);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  refs.get(0);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
33	[BUG]  [BUGGY]  Name  ref  =  refs.get(ref);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  refs.get(ref);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  refs.get(ref);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
34	[BUG]  [BUGGY]  Name  name  =  refs.get(0);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name  =  refs.get(0);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name  =  refs.get(0);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
35	[BUG]  [BUGGY]  Name  name  =  refs.get(ref);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name  =  refs.get(ref);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name  =  refs.get(ref);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
36	[BUG]  [BUGGY]  name.addRef(ref);  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  name.addRef(ref);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	name.addRef(ref);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
37	[BUG]  [BUGGY]  Name  name.addRef(ref);  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name.addRef(ref);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name.addRef(ref);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
38	[BUG]  [BUGGY]  names.add(ref);  [CE]  not  a  statement  [FE]                                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  names.add(ref);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	names.add(ref);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
39	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespaces())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespaces())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespaces())  {	  for(Ref    ref    :    names.values())    {    	non-compiled	[CE]  not  a  statement	40	None	replace
40	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(refs.size());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(refs.size());  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(refs.size());	  Name    ref    =    nameMap.get(refs.size()    -    1);    	non-compiled	[CE]  not  a  statement	28	None	replace
41	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.refs.size()  -  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.refs.size()  -  1);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.refs.size()  -  1);	  Name    ref    =    nameMap.get(refs.size()    -    1);    	non-compiled	[CE]  not  a  statement	28	None	replace
42	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.refs.size());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.refs.size());  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.refs.size());	  Name    ref    =    nameMap.get(refs.size()    -    1);    	non-compiled	[CE]  not  a  statement	28	None	replace
43	[BUG]  [BUGGY]  Name  ref  =  names.get(refs.size()  -  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  names.get(refs.size()  -  1);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  names.get(refs.size()  -  1);	  Name    ref    =    nameMap.get(refs.size()    -    1);    	non-compiled	[CE]  not  a  statement	28	None	replace
44	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.globalSets.size()  -  1);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.globalSets.size()  -  1);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.globalSets.size()  -  1);	  Name    ref    =    nameMap.get(refs.size()    -    1);    	non-compiled	[CE]  not  a  statement	28	None	replace
45	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespace,  refs.aliasingGets)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespace,  refs.aliasingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespace,  refs.aliasingGets)  {	  for(Ref    ref    :    refs.namespace,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
46	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.scope)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  name.scope)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.scope)  {	  for(Ref    ref    :    refs.namespace,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
47	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.localNames)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  name.localNames)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.localNames)  {	  for(Ref    ref    :    refs.namespace,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
48	[BUG]  [BUGGY]  for(Ref  ref  :  refs.values(),  namespace)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.values(),  namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.values(),  namespace)  {	  for(Ref    ref    :    refs.types,    namespace)    {    	non-compiled	[CE]  ')'  expected	56	None	replace
49	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespaces,  refs.localSets)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespaces,  refs.localSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespaces,  refs.localSets)  {	  for(Ref    ref    :    refs.namespaces,    name.localSets)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
50	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.localSets,  name.aliasingGets)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.localSets,  name.aliasingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.localSets,  name.aliasingGets)  {	  for(Ref    ref    :    refs.namespaces,    name.localSets)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
51	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.localNames)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.localNames)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.localNames)  {	  for(Ref    ref    :    refs.namespaces,    name.localSets)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
52	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces,  refs.localSets)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces,  refs.localSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces,  refs.localSets)  {	  for(Ref    ref    :    refs.namespaces,    name.localSets)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
53	[BUG]  [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    name    	non-compiled	[CE]  ')'  expected	46	None	replace
54	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    name    	non-compiled	[CE]  ')'  expected	46	None	replace
55	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    name    	non-compiled	[CE]  ')'  expected	46	None	replace
56	[BUG]  [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    name    	non-compiled	[CE]  ')'  expected	46	None	replace
57	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.refs.values())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.refs.values())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.refs.values())  {	  for(Ref    ref    :    namespace.refs.asList())    {    	non-compiled	[CE]  not  a  statement	54	None	replace
58	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.names.asList())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.names.asList())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.names.asList())  {	  for(Ref    ref    :    namespace.refs.asList())    {    	non-compiled	[CE]  not  a  statement	54	None	replace
59	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.namespaces.asList())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.namespaces.asList())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.namespaces.asList())  {	  for(Ref    ref    :    namespace.refs.asList())    {    	non-compiled	[CE]  not  a  statement	54	None	replace
60	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.refs.keySet())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.refs.keySet())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.refs.keySet())  {	  for(Ref    ref    :    namespace.refs.asList())    {    	non-compiled	[CE]  not  a  statement	54	None	replace
61	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces.values())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces.values())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces.values())  {	  for(Ref    ref    :    namespaces.names)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
62	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces.namespaces)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces.namespaces)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces.namespaces)  {	  for(Ref    ref    :    namespaces.names)    {    	non-compiled	[CE]  not  a  statement	10	None	replace
63	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces,  refs.names)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces,  refs.names)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces,  refs.names)  {	  for(Ref    ref    :    namespaces.names)    {    	non-compiled	[CE]  ')'  expected	10	None	replace
64	[BUG]  [BUGGY]  Name.removeRef(ref);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name.removeRef(ref);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name.removeRef(ref);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
65	[BUG]  [BUGGY]  refs.add(ref);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.add(ref);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.add(ref);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
66	[BUG]  [BUGGY]  Name  name  =  refs.get(name.name);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name  =  refs.get(name.name);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name  =  refs.get(name.name);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
67	[BUG]  [BUGGY]  for(Ref  ref  :  name.names.values())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.names.values())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.names.values())  {	  for(Ref    ref    :    name.names.asList())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
68	[BUG]  [BUGGY]  for(Ref  ref  :  name.names.iterator().next())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.names.iterator().next())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.names.iterator().next())  {	  for(Ref    ref    :    name.names.asList())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
69	[BUG]  [BUGGY]  for(Ref  ref  :  name.names.toArray(refs))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.names.toArray(refs))  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.names.toArray(refs))  {	  for(Ref    ref    :    name.names.asList())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
70	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(refs  +  1);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(refs  +  1);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(refs  +  1);	  Name    ref    =    nameMap.get(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
71	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  2);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  2);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.localSets  +  2);	  Name    ref    =    nameMap.get(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
72	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  1  -  name.aliasingGets);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  1  -  name.aliasingGets);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.localSets  +  1  -  name.aliasingGets);	  Name    ref    =    nameMap.get(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
73	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.refs  +  1);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.refs  +  1);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.refs  +  1);	  Name    ref    =    nameMap.get(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
74	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  1).refs;  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  1).refs;  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.localSets  +  1).refs;	  Name    ref    =    nameMap.get(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
75	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.globalSets  +  1);  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.globalSets  +  1);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.globalSets  +  1);	  Name    ref    =    nameMap.get(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
76	[BUG]  [BUGGY]  for(Ref  ref  :  name.refs,  namespace)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.refs,  namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.refs,  namespace)  {	  for(Ref    ref    :    name.refs)    {    	non-compiled	[CE]  ')'  expected	3	None	replace
77	[BUG]  [BUGGY]  for(Ref  ref  :  name.globalSets)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.globalSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.globalSets)  {	  for(Ref    ref    :    name.refs)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
78	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespace,  refs.globalSets)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespace,  refs.globalSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespace,  refs.globalSets)  {	  for(Ref    ref    :    refs.namespace,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
79	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.globalNames)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  name.globalNames)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.globalNames)  {	  for(Ref    ref    :    refs.namespace,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
80	[BUG]  [BUGGY]  for(Ref  ref  :  namespace,  refs.globalSets)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace,  refs.globalSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace,  refs.globalSets)  {	  for(Ref    ref    :    refs.namespace,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
81	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.rootSets)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  name.rootSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.rootSets)  {	  for(Ref    ref    :    refs.namespace,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
82	[BUG]  [BUGGY]  for(Ref  ref  :  name.types,  namespace)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.types,  namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.types,  namespace)  {	  for(Ref    ref    :    name.types)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
83	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces.name)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces.name)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces.name)  {	  for(Ref    ref    :    name.namespaces)    {    	non-compiled	[CE]  not  a  statement	21	None	replace
84	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces.keySet())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces.keySet())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces.keySet())  {	  for(Ref    ref    :    namespaces.refs)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
85	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces.get(refs))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces.get(refs))  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces.get(refs))  {	  for(Ref    ref    :    namespaces.refs)    {    	non-compiled	[CE]  not  a  statement	14	None	replace
86	[BUG]  [BUGGY]  for(Ref  ref  :  name.names,  namespace)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.names,  namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.names,  namespace)  {	  for(Ref    ref    :    name.names)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
87	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
88	[BUG]  [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
89	[BUG]  [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
90	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(re  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(re  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(re	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    	non-compiled	[CE]  ')'  expected	47	None	replace
91	[BUG]  [BUGGY]  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
92	[BUG]  [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs  ==  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  ')'  expected	48	None	replace
93	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  ')'  expected	48	None	replace
94	[BUG]  [BUGGY]  refs.addAll(name.globalSets,  name.localSets);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.addAll(name.globalSets,  name.localSets);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.addAll(name.globalSets,  name.localSets);	  refs.addAll(name.globalSets);    	non-compiled	[CE]  not  a  statement	32	None	replace
95	[BUG]  [BUGGY]  refs.add(name.globalSets);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.add(name.globalSets);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.add(name.globalSets);	  refs.addAll(name.globalSets);    	non-compiled	[CE]  not  a  statement	32	None	replace
96	[BUG]  [BUGGY]  refs.addAll(name.globalSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.addAll(name.globalSets,  name.aliasingGets);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.addAll(name.globalSets,  name.aliasingGets);	  refs.addAll(name.globalSets);    	non-compiled	[CE]  not  a  statement	32	None	replace
97	[BUG]  [BUGGY]  reps.addAll(name.globalSets);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  reps.addAll(name.globalSets);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	reps.addAll(name.globalSets);	  refs.addAll(name.globalSets);    	non-compiled	[CE]  not  a  statement	32	None	replace
98	[BUG]  [BUGGY]  refs.addAll(name.globalSets  +  name.aliasingGets);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.addAll(name.globalSets  +  name.aliasingGets);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.addAll(name.globalSets  +  name.aliasingGets);	  refs.addAll(name.globalSets);    	non-compiled	[CE]  not  a  statement	32	None	replace
99	[BUG]  [BUGGY]  for(Ref  ref  :  ref.namespaces)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  ref.namespaces)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  ref.namespaces)  {	  for(Ref    ref    :    namespaces)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
100	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets,  name.aliasingGets);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.localSets,  name.aliasingGets);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.localSets,  name.aliasingGets);	  Name    ref    =    nameMap.get(name.localSets);    	non-compiled	[CE]  not  a  statement	31	None	replace
101	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets  -  1);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.localSets  -  1);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.localSets  -  1);	  Name    ref    =    nameMap.get(name.localSets);    	non-compiled	[CE]  not  a  statement	31	None	replace
102	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.refs())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.refs())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.refs())  {	  for(Ref    ref    :    name.refs())    {    	non-compiled	[CE]  not  a  statement	52	None	replace
103	[BUG]  [BUGGY]  for(Ref  ref  :  name.globalSets())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.globalSets())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.globalSets())  {	  for(Ref    ref    :    name.refs())    {    	non-compiled	[CE]  not  a  statement	52	None	replace
104	[BUG]  [BUGGY]  for(Ref  ref  :  names.refs())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  names.refs())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.refs())  {	  for(Ref    ref    :    name.refs())    {    	non-compiled	[CE]  not  a  statement	52	None	replace
105	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespace())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespace())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespace())  {	  for(Ref    ref    :    name.refs())    {    	non-compiled	[CE]  not  a  statement	52	None	replace
106	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.namespace)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.namespace)  {	  for(Ref    ref    :    name.namespace)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
107	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.name)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.name)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.name)  {	  for(Ref    ref    :    name.namespace)    {    	non-compiled	[CE]  not  a  statement	1	None	replace
108	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.scope)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.scope)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.scope)  {	  for(Ref    ref    :    refs.namespaces,    namespace)    {    	non-compiled	[CE]  ')'  expected	53	None	replace
109	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.type)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.type)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.type)  {	  for(Ref    ref    :    refs.namespaces,    namespace)    {    	non-compiled	[CE]  ')'  expected	53	None	replace
110	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces())  {	  for(Ref    ref    :    refs.namespaces())    {    	non-compiled	[CE]  not  a  statement	38	None	replace
111	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces.namespaces())  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces.namespaces())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces.namespaces())  {	  for(Ref    ref    :    refs.namespaces())    {    	non-compiled	[CE]  not  a  statement	38	None	replace
112	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.namespaces())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.namespaces())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.namespaces())  {	  for(Ref    ref    :    refs.namespaces())    {    	non-compiled	[CE]  not  a  statement	38	None	replace
113	[BUG]  [BUGGY]  for(Ref  ref  :  names.namespaces())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  names.namespaces())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.namespaces())  {	  for(Ref    ref    :    refs.namespaces())    {    	non-compiled	[CE]  not  a  statement	38	None	replace
114	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespaces,  refs.aliasingGets)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespaces,  refs.aliasingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespaces,  refs.aliasingGets)  {	  for(Ref    ref    :    refs.namespaces,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
115	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.aliasingGets,  namespace)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.aliasingGets,  namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.aliasingGets,  namespace)  {	  for(Ref    ref    :    refs.namespaces,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
116	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespace,  refs.localSets)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespace,  refs.localSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespace,  refs.localSets)  {	  for(Ref    ref    :    refs.namespace,    name.localSets)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
117	[BUG]  [BUGGY]  for(Ref  ref  :  namespace,  refs.localSets)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace,  refs.localSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace,  refs.localSets)  {	  for(Ref    ref    :    refs.namespace,    name.localSets)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
118	[BUG]  [BUGGY]  for(Ref  ref  :  name.namespaces,  refs.globalSets)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.namespaces,  refs.globalSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.namespaces,  refs.globalSets)  {	  for(Ref    ref    :    refs.namespaces,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
119	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.globalSets,  name.aliasingGets)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.globalSets,  name.aliasingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.globalSets,  name.aliasingGets)  {	  for(Ref    ref    :    refs.namespaces,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
120	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.globalNames)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.globalNames)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.globalNames)  {	  for(Ref    ref    :    refs.namespaces,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
121	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.globalSets,  name.localSets)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.globalSets,  name.localSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.globalSets,  name.localSets)  {	  for(Ref    ref    :    refs.namespaces,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
122	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.keySet())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.keySet())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.keySet())  {	  for(Ref    ref    :    refs.keySet())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
123	[BUG]  [BUGGY]  for(Ref  ref  :  name.nameSet())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.nameSet())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.nameSet())  {	  for(Ref    ref    :    refs.keySet())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
124	[BUG]  [BUGGY]  Name  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
125	[BUG]  [BUGGY]  Name  ref  =  refs.getRef();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  refs.getRef();  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  refs.getRef();	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
126	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.removeRef(ref);  }	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
127	[BUG]  [BUGGY]  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
128	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.re  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.re  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.re	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
129	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  }	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
130	[BUG]  [BUGGY]  Name  ref  =  namespace.getRef();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  namespace.getRef();  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  namespace.getRef();	  Name    ref    =    name.getRef();    	non-compiled	[CE]  not  a  statement	33	None	replace
131	[BUG]  [BUGGY]  Name  ref  =  name.refs.getRef();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  name.refs.getRef();  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.refs.getRef();	  Name    ref    =    name.getRef();    	non-compiled	[CE]  not  a  statement	33	None	replace
132	[BUG]  [BUGGY]  Name  ref  =  name.ref();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  name.ref();  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.ref();	  Name    ref    =    name.getRef();    	non-compiled	[CE]  not  a  statement	33	None	replace
133	[BUG]  [BUGGY]  Name  ref  =  name.getRef(),  refs);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  name.getRef(),  refs);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.getRef(),  refs);	  Name    ref    =    name.getRef();    	non-compiled	[CE]  ';'  expected	33	None	replace
134	[BUG]  [BUGGY]  Name  ref  =  inlineAliasesIfPossible(ref,  namespace);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  inlineAliasesIfPossible(ref,  namespace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  inlineAliasesIfPossible(ref,  namespace);	  if(refs!=    null)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
135	[BUG]  [BUGGY]  Name  ref  =  inlineAliasIfPossible(ref,  namespace);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  inlineAliasIfPossible(ref,  namespace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  inlineAliasIfPossible(ref,  namespace);	  if(refs!=    null)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
136	[BUG]  [BUGGY]  Name  name.removeRef(ref);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name.removeRef(ref);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name.removeRef(ref);	  if(refs!=    null)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
137	[BUG]  [BUGGY]  Name  name  =  refs.next();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name  =  refs.next();  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name  =  refs.next();	  if(refs!=    null)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
138	[BUG]  [BUGGY]  for(Ref  ref  :  refs.names())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.names())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.names())  {	  for(Ref    ref    :    namespace.names())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
139	[BUG]  [BUGGY]  for(Ref  ref  :  names.names())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  names.names())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.names())  {	  for(Ref    ref    :    namespace.names())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
140	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.nameMap())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.nameMap())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.nameMap())  {	  for(Ref    ref    :    namespace.names())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
141	[BUG]  [BUGGY]  for(Ref  ref  :  name.refs.list())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.refs.list())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.refs.list())  {	  for(Ref    ref    :    refs.list())    {    	non-compiled	[CE]  not  a  statement	43	None	replace
142	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.list())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.list())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.list())  {	  for(Ref    ref    :    refs.list())    {    	non-compiled	[CE]  not  a  statement	43	None	replace
143	[BUG]  [BUGGY]  for(Ref  ref  :  name.list())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.list())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.list())  {	  for(Ref    ref    :    refs.list())    {    	non-compiled	[CE]  not  a  statement	43	None	replace
144	[BUG]  [BUGGY]  for(Ref  ref  :  names.list())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  names.list())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.list())  {	  for(Ref    ref    :    refs.list())    {    	non-compiled	[CE]  not  a  statement	43	None	replace
145	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.globalSets)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.globalSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.globalSets)  {	  for(Ref    ref    :    namespace)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
146	[BUG]  [BUGGY]  name.removeRef(ref);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  name.removeRef(ref);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	name.removeRef(ref);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace)&&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	62	None	replace
147	[BUG]  [BUGGY]  Name  ref  =  refs.get(namespace);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  refs.get(namespace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  refs.get(namespace);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace)&&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	62	None	replace
148	[BUG]  [BUGGY]  Name  name  =  refs.get(namespace);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name  =  refs.get(namespace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name  =  refs.get(namespace);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace)&&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	62	None	replace
149	[BUG]  [BUGGY]  Name  ref  =  refs.get(name);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  refs.get(name);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  refs.get(name);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace)&&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	62	None	replace
150	[BUG]  [BUGGY]  for(Ref  ref  :  refs,  name.aliasingGets)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs,  name.aliasingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs,  name.aliasingGets)  {	  for(Ref    ref    :    refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
151	[BUG]  [BUGGY]  for(Ref  ref  :  refs,  name.namespace)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs,  name.namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs,  name.namespace)  {	  for(Ref    ref    :    refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
152	[BUG]  [BUGGY]  for(Ref  ref  :  refs,  namespace.namespace)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs,  namespace.namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs,  namespace.namespace)  {	  for(Ref    ref    :    refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
153	[BUG]  [BUGGY]  for(Ref  ref  :  refs,  name.scope)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs,  name.scope)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs,  name.scope)  {	  for(Ref    ref    :    refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
154	[BUG]  [BUGGY]  for(Ref  ref  :  namespace,  refs)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace,  refs)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace,  refs)  {	  for(Ref    ref    :    refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
155	[BUG]  [BUGGY]  Name  ref  =  namespace.getName();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  namespace.getName();  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  namespace.getName();	  Name    ref    =    name.getName();    	non-compiled	[CE]  not  a  statement	30	None	replace
156	[BUG]  [BUGGY]  Name  ref  =  name.refs.getName();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  name.refs.getName();  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.refs.getName();	  Name    ref    =    name.getName();    	non-compiled	[CE]  not  a  statement	30	None	replace
157	[BUG]  [BUGGY]  Name  ref  =  name.getReferenceName();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  name.getReferenceName();  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.getReferenceName();	  Name    ref    =    name.getName();    	non-compiled	[CE]  not  a  statement	30	None	replace
158	[BUG]  [BUGGY]  Name  ref  =  name.getNamespaceURI();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  name.getNamespaceURI();  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.getNamespaceURI();	  Name    ref    =    name.getName();    	non-compiled	[CE]  not  a  statement	30	None	replace
159	[BUG]  [BUGGY]  Name  ref  =  name.getName(),  refs);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  name.getName(),  refs);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.getName(),  refs);	  Name    ref    =    name.getName();    	non-compiled	[CE]  ';'  expected	30	None	replace
160	[BUG]  [BUGGY]  Name  ref  =  inlineAlias(ref,  namespace);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  inlineAlias(ref,  namespace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  inlineAlias(ref,  namespace);	  if(refs!=    null)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	59	None	replace
161	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name)  {	  for(Ref    ref    :    refs.namespaces,    namespace)    {    	non-compiled	[CE]  ')'  expected	53	None	replace
162	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  nameSpace)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  nameSpace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  nameSpace)  {	  for(Ref    ref    :    refs.namespaces,    namespace)    {    	non-compiled	[CE]  ')'  expected	53	None	replace
163	[BUG]  [BUGGY]  for(Ref  ref  :  refs.refs.keySet())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.refs.keySet())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.refs.keySet())  {	  for(Ref    ref    :    refs.keySet())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
164	[BUG]  [BUGGY]  For(Ref  ref  :  refs.types)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  For(Ref  ref  :  refs.types)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	For(Ref  ref  :  refs.types)  {	  for(Ref    ref    :    namespace.types)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
165	[BUG]  [BUGGY]  Name  ref  =  names.get(refs.size());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  names.get(refs.size());  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  names.get(refs.size());	  Name    ref    =    nameMap.get(refs.size()    -    1);    	non-compiled	[CE]  not  a  statement	28	None	replace
166	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaceNames,  namespace)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaceNames,  namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaceNames,  namespace)  {	  for(Ref    ref    :    refs.namespaceNames)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
167	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.refs)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  name.refs)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.refs)  {	  for(Ref    ref    :    refs.namespace,    name.localSets)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
168	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.values())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  name.values())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.values())  {	  for(Ref    ref    :    refs.namespace,    name.localSets)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
169	[BUG]  [BUGGY]  for(Ref  ref  :  refs.name)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.name)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.name)  {	  for(Ref    ref    :    namespace.names)    {    	non-compiled	[CE]  not  a  statement	8	None	replace
170	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  name)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name)  {	  for(Ref    ref    :    refs.types,    namespace)    {    	non-compiled	[CE]  ')'  expected	56	None	replace
171	[BUG]  [BUGGY]  for(Ref  ref  :  name.refs,  namespace.values())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.refs,  namespace.values())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.refs,  namespace.values())  {	  for(Ref    ref    :    name.refs.values())    {    	non-compiled	[CE]  ')'  expected	36	None	replace
172	[BUG]  [BUGGY]  Name  ref  =  name.getRef(refs);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  name.getRef(refs);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.getRef(refs);	  Name    ref    =    name.getRef();    	non-compiled	[CE]  not  a  statement	33	None	replace
173	[BUG]  [BUGGY]  Name  name  =  refs.get(name);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name  =  refs.get(name);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name  =  refs.get(name);	  if(refs!=    null)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
174	[BUG]  [BUGGY]  Ref  ref  =  refs.get(ref);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Ref  ref  =  refs.get(ref);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Ref  ref  =  refs.get(ref);	  if(refs!=    null)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
175	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref	  if(refs!=    null)    {    Ref    ref    =    refs.newRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace    	non-compiled	[CE]  ')'  expected	49	None	replace
176	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible	  if(refs!=    null)    {    Ref    ref    =    refs.newRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace    	non-compiled	[CE]  ')'  expected	49	None	replace
177	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(refs,  namespace);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(refs,  namespace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(refs,  namespace);	  Name    ref    =    nameMap.get(refs);    	non-compiled	[CE]  not  a  statement	29	None	replace
178	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(refs,  name.namespace);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(refs,  name.namespace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(refs,  name.namespace);	  Name    ref    =    nameMap.get(refs);    	non-compiled	[CE]  not  a  statement	29	None	replace
179	[BUG]  [BUGGY]  Name  ref  =  names.get(refs);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  names.get(refs);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  names.get(refs);	  Name    ref    =    nameMap.get(refs);    	non-compiled	[CE]  not  a  statement	29	None	replace
180	[BUG]  [BUGGY]  for(Ref  ref  :  ref.namespace)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  ref.namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  ref.namespace)  {	  for(Ref    ref    :    namespace)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
181	[BUG]  [BUGGY]  refs.addAll(name.localSets);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.addAll(name.localSets);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.addAll(name.localSets);	  refs.addAll(name.globalSets);    	non-compiled	[CE]  not  a  statement	32	None	replace
182	[BUG]  [BUGGY]  for(Ref  ref  :  refs,  namespace.aliasingGets)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs,  namespace.aliasingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs,  namespace.aliasingGets)  {	  for(Ref    ref    :    refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
183	[BUG]  [BUGGY]  for(Ref  ref  :  refs,  namespace.getNamespace())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs,  namespace.getNamespace())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs,  namespace.getNamespace())  {	  for(Ref    ref    :    refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
184	[BUG]  [BUGGY]  For(Ref  ref  :  refs.names())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  For(Ref  ref  :  refs.names())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	For(Ref  ref  :  refs.names())  {	  for(Ref    ref    :    name.names())    {    	non-compiled	[CE]  ')'  expected	39	None	replace
185	[BUG]  [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace))  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
186	[BUG]  [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
187	[BUG]  [BUGGY]  refs.size()  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
188	[BUG]  [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace)||  name.aliasingGets  ==  0)  {  name.removeRef(ref);  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace)||  name.aliasingGets  ==  0)  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace)||  name.aliasingGets  ==  0)  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
189	[BUG]  [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.aliasingGets  ==  0)  {  name.removeRef(ref);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.aliasingGets  ==  0)  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.aliasingGets  ==  0)  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
190	[BUG]  [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace))  {  names.removeRef(ref);  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace))  {  names.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  {  if(inlineAliasesIfPossible(ref,  namespace))  {  names.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
191	[BUG]  [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  nameSpace))  {  name.removeRef(ref);  }  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  {  if(inlineAliasesIfPossible(ref,  nameSpace))  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  {  if(inlineAliasesIfPossible(ref,  nameSpace))  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
192	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef(ref);  }  }	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
193	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.removeRef	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
194	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.remov  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.remov  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.remov	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
195	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  ')'  expected	48	None	replace
196	[BUG]  [BUGGY]  for(Ref  ref  :  refs.globalSets,  name.namespaces)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.globalSets,  name.namespaces)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.globalSets,  name.namespaces)  {	  for(Ref    ref    :    refs.namespaces,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
197	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
198	[BUG]  [BUGGY]  refs.size()  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
199	[BUG]  [BUGGY]  refs.size()  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.addRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
200	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.addRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
201	[BUG]  [BUGGY]  refs.size()  {  if(inlineAliasIfPossible(ref,  namespace)||  name.aliasingGets  ==  0)  {  name.addRef(ref);  }  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  {  if(inlineAliasIfPossible(ref,  namespace)||  name.aliasingGets  ==  0)  {  name.addRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  {  if(inlineAliasIfPossible(ref,  namespace)||  name.aliasingGets  ==  0)  {  name.addRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
202	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.addRef  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.addRef  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.addRef	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  not  a  statement	64	None	replace
203	[BUG]  [BUGGY]  for(Ref  ref  :  names.namespaces,  namespace)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  names.namespaces,  namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  names.namespaces,  namespace)  {	  for(Ref    ref    :    names.namespaces)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
204	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
205	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
206	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.re  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.re  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.re	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
207	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  names.removeRef(ref);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  names.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  names.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
208	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  nameSpace))  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  nameSpace))  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  nameSpace))  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
209	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
210	[BUG]  [BUGGY]  for(Ref  ref  :  refs.refs())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.refs())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.refs())  {	  for(Ref    ref    :    name.refs())    {    	non-compiled	[CE]  not  a  statement	52	None	replace
211	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	60	None	replace
212	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(!inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(!inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(!inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	60	None	replace
213	[BUG]  [BUGGY]  refs.size()  ==  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  refs.removeRef(ref);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.size()  ==  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  refs.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.size()  ==  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  refs.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	60	None	replace
214	[BUG]  [BUGGY]  for(Ref  ref  :  refs.refs,  namespace,  name.aliasingGets)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.refs,  namespace,  name.aliasingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.refs,  namespace,  name.aliasingGets)  {	  for(Ref    ref    :    refs.refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
215	[BUG]  [BUGGY]  for(Ref  ref  :  refs.refs,  namespace,  inlineAlias)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.refs,  namespace,  inlineAlias)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.refs,  namespace,  inlineAlias)  {	  for(Ref    ref    :    refs.refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
216	[BUG]  [BUGGY]  for(Ref  ref  :  refs.refs,  namespace,  inlineAliases)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.refs,  namespace,  inlineAliases)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.refs,  namespace,  inlineAliases)  {	  for(Ref    ref    :    refs.refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
217	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces,  name.aliasingGets)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces,  name.aliasingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces,  name.aliasingGets)  {	  for(Ref    ref    :    refs.namespaces,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
218	[BUG]  [BUGGY]  For(Ref  ref  :  refs.namespaces,  name.aliasingGets)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  For(Ref  ref  :  refs.namespaces,  name.aliasingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	For(Ref  ref  :  refs.namespaces,  name.aliasingGets)  {	  for(Ref    ref    :    refs.namespaces,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
219	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace())  {	  for(Ref    ref    :    namespace.names())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
220	[BUG]  [BUGGY]  for(Ref  ref  :  refs.scope.namespace,  name.aliasingGets)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.scope.namespace,  name.aliasingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.scope.namespace,  name.aliasingGets)  {	  for(Ref    ref    :    refs.namespace,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
221	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.aliasingGets,  name.globalSets)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  name.aliasingGets,  name.globalSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.aliasingGets,  name.globalSets)  {	  for(Ref    ref    :    refs.namespace,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
222	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.aliasingGets,  name.type)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  name.aliasingGets,  name.type)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.aliasingGets,  name.type)  {	  for(Ref    ref    :    refs.namespace,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
223	[BUG]  [BUGGY]  Ref  ref  =  refs.get(namespace);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Ref  ref  =  refs.get(namespace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Ref  ref  =  refs.get(namespace);	  if(refs!=    null)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	59	None	replace
224	[BUG]  [BUGGY]  for(Ref  ref  :  refs.names.asList())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.names.asList())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.names.asList())  {	  for(Ref    ref    :    name.names.asList())    {    	non-compiled	[CE]  not  a  statement	18	None	replace
225	[BUG]  [BUGGY]  for(Ref  ref  :  namespaces,  name.localSets)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespaces,  name.localSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespaces,  name.localSets)  {	  for(Ref    ref    :    refs.namespaces,    name.localSets)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
226	[BUG]  [BUGGY]  Name  ref  =  name.getNamespace();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  name.getNamespace();  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.getNamespace();	  Name    ref    =    name.getName();    	non-compiled	[CE]  not  a  statement	30	None	replace
227	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces.asList())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces.asList())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces.asList())  {	  for(Ref    ref    :    name.namespaces.asList())    {    	non-compiled	[CE]  not  a  statement	19	None	replace
228	[BUG]  [BUGGY]  for(Ref  ref  :  name.refs.toArray(refs))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  name.refs.toArray(refs))  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  name.refs.toArray(refs))  {	  for(Ref    ref    :    name.refs.asList())    {    	non-compiled	[CE]  not  a  statement	15	None	replace
229	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    	non-compiled	[CE]  ')'  expected	47	None	replace
230	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
231	[BUG]  [BUGGY]  refs.clear();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.clear();  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.clear();	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace)&&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	62	None	replace
232	[BUG]  [BUGGY]  Ref  ref  =  refs.get(name);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Ref  ref  =  refs.get(name);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Ref  ref  =  refs.get(name);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace)&&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	62	None	replace
233	[BUG]  [BUGGY]  Ref[]  refs  =  refs.toArray(new  Ref[refs.size()  ]);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Ref[]  refs  =  refs.toArray(new  Ref[refs.size()  ]);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Ref[]  refs  =  refs.toArray(new  Ref[refs.size()  ]);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
234	[BUG]  [BUGGY]  Ref[]  refs  =  refs.values().toArray(new  Ref[refs.size()  ]);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Ref[]  refs  =  refs.values().toArray(new  Ref[refs.size()  ]);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Ref[]  refs  =  refs.values().toArray(new  Ref[refs.size()  ]);	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
235	[BUG]  [BUGGY]  for(Ref  ref  :  refs.assignedNames)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.assignedNames)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.assignedNames)  {	  for(Ref    ref    :    namespaces)    {    	non-compiled	[CE]  not  a  statement	20	None	replace
236	[BUG]  [BUGGY]  Name  ref  =  name.ref;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  name.ref;  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.ref;	  Name    ref    =    name.getRef();    	non-compiled	[CE]  not  a  statement	33	None	replace
237	[BUG]  [BUGGY]  Name  ref  =  name.ref(refs);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  name.ref(refs);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  name.ref(refs);	  Name    ref    =    name.getRef();    	non-compiled	[CE]  not  a  statement	33	None	replace
238	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.nameSet())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.nameSet())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.nameSet())  {	  for(Ref    ref    :    refs.keySet())    {    	non-compiled	[CE]  not  a  statement	42	None	replace
239	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.newRef();  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace	  if(refs!=    null)    {    Ref    ref    =    refs.newRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace    	non-compiled	[CE]  ')'  expected	49	None	replace
240	[BUG]  [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  Ref  ref  =  refs.getRef();  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }	  if(refs!=    null)    {    Ref    ref    =    refs.getRef();    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
241	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets,  refs);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.localSets,  refs);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.localSets,  refs);	  Name    ref    =    nameMap.get(name.localSets);    	non-compiled	[CE]  not  a  statement	31	None	replace
242	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.labels)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.labels)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.labels)  {	  for(Ref    ref    :    refs.namespaces,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
243	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(refs.size()  *  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(refs.size()  *  1);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(refs.size()  *  1);	  Name    ref    =    nameMap.get(refs.size()    -    1);    	non-compiled	[CE]  not  a  statement	28	None	replace
244	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.rootSets)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.rootSets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.rootSets)  {	  for(Ref    ref    :    refs.namespaces,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
245	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.refs)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.refs)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.refs)  {	  for(Ref    ref    :    refs.namespaces,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
246	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.types)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  name.types)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  name.types)  {	  for(Ref    ref    :    refs.namespaces,    name.globalSets)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
247	[BUG]  [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }	  if(refs!=    null)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	59	None	replace
248	[BUG]  [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }	  if(refs!=    null)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	59	None	replace
249	[BUG]  [BUGGY]  Name  name  =  inlineAliasIfPossible(ref,  namespace)?  name.removeRef(ref):  refs;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name  =  inlineAliasIfPossible(ref,  namespace)?  name.removeRef(ref):  refs;  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name  =  inlineAliasIfPossible(ref,  namespace)?  name.removeRef(ref):  refs;	  if(refs!=    null)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	59	None	replace
250	[BUG]  [BUGGY]  Name  name  =  inlineAliasIfPossible(ref,  namespace);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name  =  inlineAliasIfPossible(ref,  namespace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name  =  inlineAliasIfPossible(ref,  namespace);	  if(refs!=    null)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	59	None	replace
251	[BUG]  [BUGGY]  if(refs!=  null)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }	  if(refs!=    null)    {    if(inlineAliasIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	59	None	replace
252	[BUG]  [BUGGY]  for(Ref  ref  :  refs.scope,  namespace)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.scope,  namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.scope,  namespace)  {	  for(Ref    ref    :    refs.refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
253	[BUG]  [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace)&&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	62	None	replace
254	[BUG]  [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)  ||  ref.scope.isLocal())  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)  ||  ref.scope.isLocal())  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)  ||  ref.scope.isLocal())  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace)&&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	62	None	replace
255	[BUG]  [BUGGY]  if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  name.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace)&&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	62	None	replace
256	[BUG]  [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  names.removeRef(ref);  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  names.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  if(inlineAliasIfPossible(ref,  namespace)&&  ref.scope.isLocal())  {  names.removeRef(ref);  }	  if(refs.size()    >    0)    {    if(inlineAliasIfPossible(ref,    namespace)&&    ref.scope.isLocal())    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	62	None	replace
257	[BUG]  [BUGGY]  Name  ref  =  nameMap.remove(refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.remove(refs);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.remove(refs);	  Name    ref    =    nameMap.get(refs);    	non-compiled	[CE]  not  a  statement	29	None	replace
258	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(refs,  nameSpace);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(refs,  nameSpace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(refs,  nameSpace);	  Name    ref    =    nameMap.get(refs);    	non-compiled	[CE]  not  a  statement	29	None	replace
259	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespaces,  nameMap)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespaces,  nameMap)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespaces,  nameMap)  {	  for(Ref    ref    :    refs.namespaces,    namespace)    {    	non-compiled	[CE]  ')'  expected	53	None	replace
260	[BUG]  [BUGGY]  for(Ref  ref  :  refs,  namespace.references)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs,  namespace.references)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs,  namespace.references)  {	  for(Ref    ref    :    refs,    namespace)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
261	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(refs,  name.localSets  +  1);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(refs,  name.localSets  +  1);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(refs,  name.localSets  +  1);	  Name    ref    =    nameMap.get(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
262	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets  /  1);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.localSets  /  1);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.localSets  /  1);	  Name    ref    =    nameMap.get(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
263	[BUG]  [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  1).ref;  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  ref  =  nameMap.get(name.localSets  +  1).ref;  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  ref  =  nameMap.get(name.localSets  +  1).ref;	  Name    ref    =    nameMap.get(name.localSets    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
264	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.aliasingGets,  namespace)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  name.aliasingGets,  namespace)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.aliasingGets,  namespace)  {	  for(Ref    ref    :    refs.namespace,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
265	[BUG]  [BUGGY]  for(Ref  ref  :  refs.namespace,  name.narrowingGets)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.namespace,  name.narrowingGets)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.namespace,  name.narrowingGets)  {	  for(Ref    ref    :    refs.namespace,    name.aliasingGets)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
266	[BUG]  [BUGGY]  for(Ref  ref  :  refs.listAllRefs())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  refs.listAllRefs())  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  refs.listAllRefs())  {	  for(Ref    ref    :    refs.list())    {    	non-compiled	[CE]  not  a  statement	43	None	replace
267	[BUG]  [BUGGY]  for(Ref  ref  :  namespace.globalNames)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  for(Ref  ref  :  namespace.globalNames)  {  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	for(Ref  ref  :  namespace.globalNames)  {	  for(Ref    ref    :    namespace.refs)    {    	non-compiled	[CE]  not  a  statement	12	None	replace
268	[BUG]  [BUGGY]  if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }	  if(refs!=    null)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
269	[BUG]  [BUGGY]  Name  name  =  inlineAliasesIfPossible(ref,  namespace)?  name.removeRef(ref):  refs;  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name  =  inlineAliasesIfPossible(ref,  namespace)?  name.removeRef(ref):  refs;  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name  =  inlineAliasesIfPossible(ref,  namespace)?  name.removeRef(ref):  refs;	  if(refs!=    null)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
270	[BUG]  [BUGGY]  Name  name  =  inlineAliasesIfPossible(ref,  namespace);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  Name  name  =  inlineAliasesIfPossible(ref,  namespace);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	Name  name  =  inlineAliasesIfPossible(ref,  namespace);	  if(refs!=    null)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
271	[BUG]  [BUGGY]  if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	if(refs!=  null)  {  if(inlineAliasesIfPossible(ref,  namespace)&&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  name.removeRef(ref);  }	  if(refs!=    null)    {    if(inlineAliasesIfPossible(ref,    namespace))    {    name.removeRef(ref);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
272	[BUG]  [BUGGY]  refs.addAll(name.allAliases);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.addAll(name.allAliases);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.addAll(name.allAliases);	  refs.addAll(name.globalSets);    	non-compiled	[CE]  not  a  statement	32	None	replace
273	[BUG]  [BUGGY]  refs.addAll(name.refs);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.refs);      [BUGGY]  refs.addAll(name.refs);  [BUGGY]      if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	169	169	8	replace	refs.addAll(name.refs);	  refs.addAll(name.globalSets);    	non-compiled	[CE]  not  a  statement	32	None	replace
