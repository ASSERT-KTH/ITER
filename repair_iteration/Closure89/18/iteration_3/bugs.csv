bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  originalName  =  n.url()  + ".: "  +  alias;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  + ".: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  + ".: "  +  alias;	  String    originalName    =    n.url()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	7	None	replace
2	[BUG]  [BUGGY]  String  originalName  =  n.url()  + ",: "  +  alias;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  + ",: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  + ",: "  +  alias;	  String    originalName    =    n.url()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	7	None	replace
3	[BUG]  [BUGGY]  String  originalName  =  n.refs.url()  + ": "  +  alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.url()  + ": "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.url()  + ": "  +  alias;	  String    originalName    =    n.url()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	7	None	replace
4	[BUG]  [BUGGY]  String  originalName  =  n.url()  + ".refs: "  +  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  + ".refs: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  + ".refs: "  +  alias;	  String    originalName    =    n.url()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	7	None	replace
5	[BUG]  [BUGGY]  String  originalName  =  n.url()  + ",  alias: "  +  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  + ",  alias: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  + ",  alias: "  +  alias;	  String    originalName    =    n.url()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	7	None	replace
6	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ",: "  +  n.refs;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ",: "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ",: "  +  n.refs;	  String    originalName    =    n.alias()    +   ":   "    +    n.refs;    	non-compiled	[CE]  not  a  statement	2	None	replace
7	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ".: "  +  n.refs;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ".: "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ".: "  +  n.refs;	  String    originalName    =    n.alias()    +   ":   "    +    n.refs;    	non-compiled	[CE]  not  a  statement	2	None	replace
8	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.name;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.name;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": "  +  n.name;	  String    originalName    =    n.alias()    +   ":   "    +    n.refs;    	non-compiled	[CE]  not  a  statement	2	None	replace
9	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ".refs: "  +  n.refs;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ".refs: "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ".refs: "  +  n.refs;	  String    originalName    =    n.alias()    +   ":   "    +    n.refs;    	non-compiled	[CE]  not  a  statement	2	None	replace
10	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ",   "  +  n.refs;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ",   "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ",   "  +  n.refs;	  String    originalName    =    n.alias()    +   ":   "    +    n.refs;    	non-compiled	[CE]  not  a  statement	2	None	replace
11	[BUG]  [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.length()  -  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.substring(0,  n.name.length()  -  1);	  String    originalName    =    n.name.toString();    	non-compiled	[CE]  not  a  statement	23	None	replace
12	[BUG]  [BUGGY]  String  originalName  =  n.name.toLowerCase();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.toLowerCase();	  String    originalName    =    n.name.toString();    	non-compiled	[CE]  not  a  statement	23	None	replace
13	[BUG]  [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.lastIndexOf(alias));  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.lastIndexOf(alias));  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.substring(0,  n.name.lastIndexOf(alias));	  String    originalName    =    n.name.toString();    	non-compiled	[CE]  not  a  statement	23	None	replace
14	[BUG]  [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.length()  -  2);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.length()  -  2);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.substring(0,  n.name.length()  -  2);	  String    originalName    =    n.name.toString();    	non-compiled	[CE]  not  a  statement	23	None	replace
15	[BUG]  [BUGGY]  String  originalName  =  n.name.toString()  + ": "  +  alias;  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.toString()  + ": "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.toString()  + ": "  +  alias;	  String    originalName    =    n.name.toString();    	non-compiled	[CE]  not  a  statement	23	None	replace
16	[BUG]  [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.length()  -  3);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.length()  -  3);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.substring(0,  n.name.length()  -  3);	  String    originalName    =    n.name.toString();    	non-compiled	[CE]  not  a  statement	23	None	replace
17	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_REDEFINED_WARNING;    	non-compiled	[CE]  not  a  statement	57	None	replace
18	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  *  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  *  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  *  UNSAFE_NAMESPACE_REDEFINED_WARNING;	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_REDEFINED_WARNING;    	non-compiled	[CE]  not  a  statement	57	None	replace
19	[BUG]  [BUGGY]  String  originalName  =  UNSAFE_NAMESPACE_REDEFINED_WARNING  +  n.fullName();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  UNSAFE_NAMESPACE_REDEFINED_WARNING  +  n.fullName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  UNSAFE_NAMESPACE_REDEFINED_WARNING  +  n.fullName();	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_REDEFINED_WARNING;    	non-compiled	[CE]  not  a  statement	57	None	replace
20	[BUG]  [BUGGY]  String  originalName  =  n.name()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_REDEFINED_WARNING;    	non-compiled	[CE]  not  a  statement	57	None	replace
21	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  NAMESPACE_REDEFINED_WARNING;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  NAMESPACE_REDEFINED_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  NAMESPACE_REDEFINED_WARNING;	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_REDEFINED_WARNING;    	non-compiled	[CE]  not  a  statement	57	None	replace
22	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias,  null,  n.refs;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias,  null,  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias,  null,  n.refs;	  String    originalName    =    n.fullName()    +    alias,    n.refs;    	non-compiled	[CE]  not  a  statement	16	None	replace
23	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.refs);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.refs);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias,  n.refs);	  String    originalName    =    n.fullName()    +    alias,    n.refs;    	non-compiled	[CE]  not  a  statement	16	None	replace
24	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.name;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.name;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias,  n.name;	  String    originalName    =    n.fullName()    +    alias,    n.refs;    	non-compiled	[CE]  not  a  statement	16	None	replace
25	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +  alias,  n.fullName;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  +  alias,  n.fullName;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +  alias,  n.fullName;	  String    originalName    =    n.fullName()    +    alias,    n.refs;    	non-compiled	[CE]  not  a  statement	16	None	replace
26	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.globalNames;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.globalNames;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias,  n.globalNames;	  String    originalName    =    n.fullName()    +    alias,    n.refs;    	non-compiled	[CE]  not  a  statement	16	None	replace
27	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  *  alias,  n.refs;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  *  alias,  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  *  alias,  n.refs;	  String    originalName    =    n.fullName()    +    alias,    n.refs;    	non-compiled	[CE]  not  a  statement	16	None	replace
28	[BUG]  [BUGGY]  Node  p  =  n.refs.get(alias  +  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.get(alias  +  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.get(alias  +  1);	  Node    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	48	None	replace
29	[BUG]  [BUGGY]  Node  p  =  n.refs.get(alias)+  1;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.get(alias)+  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.get(alias)+  1;	  Node    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	48	None	replace
30	[BUG]  [BUGGY]  Node  p  =  n.refs.get(alias,  originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.get(alias,  originalName);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.get(alias,  originalName);	  Node    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	48	None	replace
31	[BUG]  [BUGGY]  Node  p  =  n.refs.get(0);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.get(0);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.get(0);	  Node    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	48	None	replace
32	[BUG]  [BUGGY]  Node  p  =  node.refs.get(alias);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  node.refs.get(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  node.refs.get(alias);	  Node    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	48	None	replace
33	[BUG]  [BUGGY]  Node  p  =  n.refs.get(alias).toString();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.get(alias).toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.get(alias).toString();	  Node    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	48	None	replace
34	[BUG]  [BUGGY]  String  originalName  =  n.toString()  + ".: "  +  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  + ".: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  + ".: "  +  alias;	  String    originalName    =    n.toString()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	20	None	replace
35	[BUG]  [BUGGY]  String  originalName  =  n.toString()  + ",: "  +  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  + ",: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  + ",: "  +  alias;	  String    originalName    =    n.toString()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	20	None	replace
36	[BUG]  [BUGGY]  String  originalName  =  n.refs.toString()  + ": "  +  alias;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.toString()  + ": "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.toString()  + ": "  +  alias;	  String    originalName    =    n.toString()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	20	None	replace
37	[BUG]  [BUGGY]  String  originalName  =  n.getName()  + ": "  +  alias;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.getName()  + ": "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.getName()  + ": "  +  alias;	  String    originalName    =    n.toString()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	20	None	replace
38	[BUG]  [BUGGY]  String  originalName  =  n.toString()  + ",  alias: "  +  alias;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  + ",  alias: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  + ",  alias: "  +  alias;	  String    originalName    =    n.toString()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	20	None	replace
39	[BUG]  [BUGGY]  String  originalName  =  n.refs.getString();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.getString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.getString();	  String    originalName    =    n.refs.toString();    	non-compiled	[CE]  not  a  statement	13	None	replace
40	[BUG]  [BUGGY]  String  originalName  =  n.refs.toString()  + "_ "  +  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.toString()  + "_ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.toString()  + "_ "  +  alias;	  String    originalName    =    n.refs.toString();    	non-compiled	[CE]  not  a  statement	13	None	replace
41	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  NAMESPACE_REDEFINED_WARNING);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  NAMESPACE_REDEFINED_WARNING);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  NAMESPACE_REDEFINED_WARNING);	  String    originalName    =    n.fullName(alias,    null);    	non-compiled	[CE]  not  a  statement	53	None	replace
42	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName(alias,  null);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName(alias,  null);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName(alias,  null);	  String    originalName    =    n.fullName(alias,    null);    	non-compiled	[CE]  not  a  statement	53	None	replace
43	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  null,  n.refs);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  null,  n.refs);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  null,  n.refs);	  String    originalName    =    n.fullName(alias,    null);    	non-compiled	[CE]  not  a  statement	53	None	replace
44	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  n.globalNames);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  n.globalNames);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  n.globalNames);	  String    originalName    =    n.fullName(alias,    null);    	non-compiled	[CE]  not  a  statement	53	None	replace
45	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +  UNSAFE_NAMESPACE_WARNING;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  +  UNSAFE_NAMESPACE_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +  UNSAFE_NAMESPACE_WARNING;	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_WARNING;    	non-compiled	[CE]  not  a  statement	56	None	replace
46	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  *  UNSAFE_NAMESPACE_WARNING;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  *  UNSAFE_NAMESPACE_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  *  UNSAFE_NAMESPACE_WARNING;	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_WARNING;    	non-compiled	[CE]  not  a  statement	56	None	replace
47	[BUG]  [BUGGY]  String  originalName  =  UNSAFE_NAMESPACE_WARNING  +  n.fullName();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  UNSAFE_NAMESPACE_WARNING  +  n.fullName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  UNSAFE_NAMESPACE_WARNING  +  n.fullName();	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_WARNING;    	non-compiled	[CE]  not  a  statement	56	None	replace
48	[BUG]  [BUGGY]  String  originalName  =  n.name()  +  UNSAFE_NAMESPACE_WARNING;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  +  UNSAFE_NAMESPACE_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  +  UNSAFE_NAMESPACE_WARNING;	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_WARNING;    	non-compiled	[CE]  not  a  statement	56	None	replace
49	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  n.name);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  n.name);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  n.name);	  String    originalName    =    n.fullName(alias,    n.refs);    	non-compiled	[CE]  not  a  statement	36	None	replace
50	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName(alias,  n);	  String    originalName    =    n.fullName(alias,    n.refs);    	non-compiled	[CE]  not  a  statement	36	None	replace
51	[BUG]  [BUGGY]  String  originalName  =  n.name.fullName(alias,  n.refs);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.fullName(alias,  n.refs);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.fullName(alias,  n.refs);	  String    originalName    =    n.fullName(alias,    n.refs);    	non-compiled	[CE]  not  a  statement	36	None	replace
52	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n.node);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n.node);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName(alias,  n.node);	  String    originalName    =    n.fullName(alias,    n.refs);    	non-compiled	[CE]  not  a  statement	36	None	replace
53	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  n.type);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  n.type);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  n.type);	  String    originalName    =    n.fullName(alias,    n.refs);    	non-compiled	[CE]  not  a  statement	36	None	replace
54	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n.refs);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n.refs);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName(alias,  n.refs);	  String    originalName    =    n.fullName(alias,    n.refs);    	non-compiled	[CE]  not  a  statement	36	None	replace
55	[BUG]  [BUGGY]  String  originalName  =  n.fullName().toLowerCase();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName().toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName().toLowerCase();	  String    originalName    =    n.fullName(alias).toLowerCase();    	non-compiled	[CE]  not  a  statement	37	None	replace
56	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName(alias).toLowerCase();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName(alias).toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName(alias).toLowerCase();	  String    originalName    =    n.fullName(alias).toLowerCase();    	non-compiled	[CE]  not  a  statement	37	None	replace
57	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias).toUpperCase();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias).toUpperCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias).toUpperCase();	  String    originalName    =    n.fullName(alias).toLowerCase();    	non-compiled	[CE]  not  a  statement	37	None	replace
58	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias)+ ".toLowerCase();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias)+ ".toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias)+ ".toLowerCase();	  String    originalName    =    n.fullName(alias).toLowerCase();    	non-compiled	[CE]  not  a  statement	37	None	replace
59	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias).toLowerCase()  +  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias).toLowerCase()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias).toLowerCase()  +  1;	  String    originalName    =    n.fullName(alias).toLowerCase();    	non-compiled	[CE]  not  a  statement	37	None	replace
60	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias).refs.toLowerCase();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias).refs.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias).refs.toLowerCase();	  String    originalName    =    n.fullName(alias).toLowerCase();    	non-compiled	[CE]  not  a  statement	37	None	replace
61	[BUG]  [BUGGY]  String  originalName  =  n.names.substring(0,  n.names.length()  -  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.substring(0,  n.names.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.substring(0,  n.names.length()  -  1);	  String    originalName    =    n.names.toString();    	non-compiled	[CE]  not  a  statement	21	None	replace
62	[BUG]  [BUGGY]  String  originalName  =  n.names.substring(0,  n.names.length()  -  2);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.substring(0,  n.names.length()  -  2);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.substring(0,  n.names.length()  -  2);	  String    originalName    =    n.names.toString();    	non-compiled	[CE]  not  a  statement	21	None	replace
63	[BUG]  [BUGGY]  String  originalName  =  n.names.toString()  + ": "  +  alias;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.toString()  + ": "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.toString()  + ": "  +  alias;	  String    originalName    =    n.names.toString();    	non-compiled	[CE]  not  a  statement	21	None	replace
64	[BUG]  [BUGGY]  String  originalName  =  n.names.toString()  + "_ "  +  alias;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.toString()  + "_ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.toString()  + "_ "  +  alias;	  String    originalName    =    n.names.toString();    	non-compiled	[CE]  not  a  statement	21	None	replace
65	[BUG]  [BUGGY]  String  originalName  =  n.names.substring(0,  n.names.length());  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.substring(0,  n.names.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.substring(0,  n.names.length());	  String    originalName    =    n.names.toString();    	non-compiled	[CE]  not  a  statement	21	None	replace
66	[BUG]  [BUGGY]  String  originalName  =  n.refs.originalName()  + ",   "  +  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.originalName()  + ",   "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.originalName()  + ",   "  +  alias;	  String    originalName    =    n.originalName()    +   ",   "    +    alias;    	non-compiled	[CE]  not  a  statement	35	None	replace
67	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ".refs, "  +  alias;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ".refs, "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ".refs, "  +  alias;	  String    originalName    =    n.originalName()    +   ",   "    +    alias;    	non-compiled	[CE]  not  a  statement	35	None	replace
68	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ",' "  +  alias;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ",' "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ",' "  +  alias;	  String    originalName    =    n.originalName()    +   ",   "    +    alias;    	non-compiled	[CE]  not  a  statement	35	None	replace
69	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias  +  1);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.get(alias  +  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.get(alias  +  1);	  Node    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	27	None	replace
70	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias)+  1;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.get(alias)+  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.get(alias)+  1;	  Node    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	27	None	replace
71	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias,  originalName);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.get(alias,  originalName);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.get(alias,  originalName);	  Node    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	27	None	replace
72	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias).toString();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.get(alias).toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.get(alias).toString();	  Node    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	27	None	replace
73	[BUG]  [BUGGY]  Node  r  =  n.refs.get(0);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.get(0);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.get(0);	  Node    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	27	None	replace
74	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias,  true);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.get(alias,  true);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.get(alias,  true);	  Node    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	27	None	replace
75	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.lastIndexOf(alias));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.lastIndexOf(alias));  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.lastIndexOf(alias));	  String    originalName    =    n.refs.substring(0,    n.refs.fullName());    	non-compiled	[CE]  not  a  statement	67	None	replace
76	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.name.length());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.name.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.name.length());	  String    originalName    =    n.refs.substring(0,    n.refs.fullName());    	non-compiled	[CE]  not  a  statement	67	None	replace
77	[BUG]  [BUGGY]  String  originalName  =  alias.substring(0,  n.refs.fullName());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.substring(0,  n.refs.fullName());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.substring(0,  n.refs.fullName());	  String    originalName    =    n.refs.substring(0,    n.refs.fullName());    	non-compiled	[CE]  not  a  statement	67	None	replace
78	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.fullName()  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.fullName()  +  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.fullName()  +  1);	  String    originalName    =    n.refs.substring(0,    n.refs.fullName());    	non-compiled	[CE]  not  a  statement	67	None	replace
79	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.longValue());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.longValue());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.longValue());	  String    originalName    =    n.refs.substring(0,    n.refs.fullName());    	non-compiled	[CE]  not  a  statement	67	None	replace
80	[BUG]  [BUGGY]  String  originalName  =  n.names.substring(alias.length()  -  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.substring(alias.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.substring(alias.length()  -  1);	  String    originalName    =    n.names.fullName(alias);    	non-compiled	[CE]  not  a  statement	39	None	replace
81	[BUG]  [BUGGY]  String  originalName  =  n.names.fullName(alias).toLowerCase();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.fullName(alias).toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.fullName(alias).toLowerCase();	  String    originalName    =    n.names.fullName(alias);    	non-compiled	[CE]  not  a  statement	39	None	replace
82	[BUG]  [BUGGY]  String  originalName  =  n.names.fullName(alias,  n.refs);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.fullName(alias,  n.refs);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.fullName(alias,  n.refs);	  String    originalName    =    n.names.fullName(alias);    	non-compiled	[CE]  not  a  statement	39	None	replace
83	[BUG]  [BUGGY]  String  originalName  =  n.names.fullName(alias,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.fullName(alias,  UNSAFE_THIS);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.fullName(alias,  UNSAFE_THIS);	  String    originalName    =    n.names.fullName(alias);    	non-compiled	[CE]  not  a  statement	39	None	replace
84	[BUG]  [BUGGY]  String  originalName  =  n.names.contains(alias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.contains(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.contains(alias);	  String    originalName    =    n.names.fullName(alias);    	non-compiled	[CE]  not  a  statement	39	None	replace
85	[BUG]  [BUGGY]  String  originalName  =  n.refs.getName();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.getName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.getName();	  String    originalName    =    n.getName();    	non-compiled	[CE]  not  a  statement	19	None	replace
86	[BUG]  [BUGGY]  String  originalName  =  n.names.get(alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.get(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.get(alias);	  String    originalName    =    n.getName();    	non-compiled	[CE]  not  a  statement	19	None	replace
87	[BUG]  [BUGGY]  String  originalName  =  n.getReferenceName();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.getReferenceName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.getReferenceName();	  String    originalName    =    n.getName();    	non-compiled	[CE]  not  a  statement	19	None	replace
88	[BUG]  [BUGGY]  String  originalName  =  n.getName()  + "_ "  +  alias;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.getName()  + "_ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.getName()  + "_ "  +  alias;	  String    originalName    =    n.getName();    	non-compiled	[CE]  not  a  statement	19	None	replace
89	[BUG]  [BUGGY]  String  originalName  =  n.refs.alias(alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.alias(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.alias(alias);	  String    originalName    =    n.refs.alias();    	non-compiled	[CE]  not  a  statement	1	None	replace
90	[BUG]  [BUGGY]  String  originalName  =  n.refs.alias()  +  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.alias()  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.alias()  +  alias;	  String    originalName    =    n.refs.alias();    	non-compiled	[CE]  not  a  statement	1	None	replace
91	[BUG]  [BUGGY]  String  originalName  =  n.refs.alias()  +  1;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.alias()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.alias()  +  1;	  String    originalName    =    n.refs.alias();    	non-compiled	[CE]  not  a  statement	1	None	replace
92	[BUG]  [BUGGY]  String  originalName  =  new  String(n.refs.substring(0,  n.refs.length()));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  new  String(n.refs.substring(0,  n.refs.length()));  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  new  String(n.refs.substring(0,  n.refs.length()));	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
93	[BUG]  [BUGGY]  String  originalName  =  n,  n.refs.substring(0,  n.refs.length());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n,  n.refs.substring(0,  n.refs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n,  n.refs.substring(0,  n.refs.length());	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
94	[BUG]  [BUGGY]  String  originalName  =  n.references.substring(0,  n.refs.length());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.references.substring(0,  n.refs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.references.substring(0,  n.refs.length());	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
95	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  +  2);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  +  2);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.length()  +  2);	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
96	[BUG]  [BUGGY]  String  initialName  =  n.refs.substring(0,  n.refs.length());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  initialName  =  n.refs.substring(0,  n.refs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  initialName  =  n.refs.substring(0,  n.refs.length());	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
97	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.references.length());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.references.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.references.length());	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
98	[BUG]  [BUGGY]  String  originalName  =  n.toString()  +  UNSAFE_THIS;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  +  UNSAFE_THIS;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  +  UNSAFE_THIS;	  String    originalName    =    n.toString()    +    alias;    	non-compiled	[CE]  not  a  statement	51	None	replace
99	[BUG]  [BUGGY]  String  originalName  =  n.refs.toString()  +  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.toString()  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.toString()  +  alias;	  String    originalName    =    n.toString()    +    alias;    	non-compiled	[CE]  not  a  statement	51	None	replace
100	[BUG]  [BUGGY]  String  originalName  =  n.toString()  +  alias.toLowerCase();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  +  alias.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  +  alias.toLowerCase();	  String    originalName    =    n.toString()    +    alias;    	non-compiled	[CE]  not  a  statement	51	None	replace
101	[BUG]  [BUGGY]  String  originalName  =  n.toString()  +   "_ "  +  alias;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  +   "_ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  +   "_ "  +  alias;	  String    originalName    =    n.toString()    +    alias;    	non-compiled	[CE]  not  a  statement	51	None	replace
102	[BUG]  [BUGGY]  String  originalName  =  n.getName()  +  alias;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.getName()  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.getName()  +  alias;	  String    originalName    =    n.toString()    +    alias;    	non-compiled	[CE]  not  a  statement	51	None	replace
103	[BUG]  [BUGGY]  String  originalName  =  n.toString()  *  alias;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  *  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  *  alias;	  String    originalName    =    n.toString()    +    alias;    	non-compiled	[CE]  not  a  statement	51	None	replace
104	[BUG]  [BUGGY]  Node  r  =  n.refs.getLastChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.getLastChild();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.getLastChild();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	25	None	replace
105	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs.getLastChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs.getLastChild();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs.getLastChild();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	25	None	replace
106	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs.getLastChild();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs.getLastChild();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs.getLastChild();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	25	None	replace
107	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs;	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	25	None	replace
108	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs;  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs!=  null?  n.refs.getLastChild()  :  n.refs;	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	25	None	replace
109	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ";n ",  n.refs);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ";n ",  n.refs);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ";n ",  n.refs);	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
110	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ";node ";  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ";node ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ";node ";	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
111	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ";navigation ";  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ";navigation ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ";navigation ";	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
112	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ";n ",  alias);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ";n ",  alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ";n ",  alias);	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
113	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ";n  is   ";  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ";n  is   ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ";n  is   ";	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
114	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  +  UNSAFE_THIS;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  +  UNSAFE_THIS;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  +  UNSAFE_THIS;	  String    originalName    =    n.originalName()    +    alias;    	non-compiled	[CE]  not  a  statement	33	None	replace
115	[BUG]  [BUGGY]  String  originalName  =  n.refs.originalName()  +  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.originalName()  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.originalName()  +  alias;	  String    originalName    =    n.originalName()    +    alias;    	non-compiled	[CE]  not  a  statement	33	None	replace
116	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  +  alias.toLowerCase();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  +  alias.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  +  alias.toLowerCase();	  String    originalName    =    n.originalName()    +    alias;    	non-compiled	[CE]  not  a  statement	33	None	replace
117	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  +  alias,  n.refs;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  +  alias,  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  +  alias,  n.refs;	  String    originalName    =    n.originalName()    +    alias;    	non-compiled	[CE]  not  a  statement	33	None	replace
118	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  *  alias;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  *  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  *  alias;	  String    originalName    =    n.originalName()    +    alias;    	non-compiled	[CE]  not  a  statement	33	None	replace
119	[BUG]  [BUGGY]  String  originalName  =  n.refs.originalName(alias);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.originalName(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.originalName(alias);	  String    originalName    =    n.originalName(alias);    	non-compiled	[CE]  not  a  statement	60	None	replace
120	[BUG]  [BUGGY]  String  originalName  =  n.originalName(alias,  n.refs);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName(alias,  n.refs);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName(alias,  n.refs);	  String    originalName    =    n.originalName(alias);    	non-compiled	[CE]  not  a  statement	60	None	replace
121	[BUG]  [BUGGY]  String  originalName  =  n.originalName(alias).toLowerCase();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName(alias).toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName(alias).toLowerCase();	  String    originalName    =    n.originalName(alias);    	non-compiled	[CE]  not  a  statement	60	None	replace
122	[BUG]  [BUGGY]  String  originalName  =  n.originalName(alias,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName(alias,  UNSAFE_THIS);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName(alias,  UNSAFE_THIS);	  String    originalName    =    n.originalName(alias);    	non-compiled	[CE]  not  a  statement	60	None	replace
123	[BUG]  [BUGGY]  String  originalName  =  n.originalName(alias)+ ": "  +  n.refs;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName(alias)+ ": "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName(alias)+ ": "  +  n.refs;	  String    originalName    =    n.originalName(alias);    	non-compiled	[CE]  not  a  statement	60	None	replace
124	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ",_ "  +  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ",_ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ",_ "  +  alias;	  String    originalName    =    n.originalName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	34	None	replace
125	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + "._ "  +  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + "._ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + "._ "  +  alias;	  String    originalName    =    n.originalName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	34	None	replace
126	[BUG]  [BUGGY]  String  originalName  =  n.refs.originalName()  + "_ "  +  alias;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.originalName()  + "_ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.originalName()  + "_ "  +  alias;	  String    originalName    =    n.originalName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	34	None	replace
127	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName(alias,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName(alias,  UNSAFE_THIS);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName(alias,  UNSAFE_THIS);	  String    originalName    =    n.refs.fullName(alias);    	non-compiled	[CE]  not  a  statement	10	None	replace
128	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n.name);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName(alias,  n.name);	  String    originalName    =    n.refs.fullName(alias);    	non-compiled	[CE]  not  a  statement	10	None	replace
129	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n.globalNames);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n.globalNames);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName(alias,  n.globalNames);	  String    originalName    =    n.refs.fullName(alias);    	non-compiled	[CE]  not  a  statement	10	None	replace
130	[BUG]  [BUGGY]  Node  p  =  n.refs.getNext();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.getNext();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.getNext();	  Node    p    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	30	None	replace
131	[BUG]  [BUGGY]  Node  p  =  n.refs.getFirstChild();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.getFirstChild();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.getFirstChild();	  Node    p    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	30	None	replace
132	[BUG]  [BUGGY]  Node  p  =  n.refs.getLastChild();  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.getLastChild();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.getLastChild();	  Node    p    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	30	None	replace
133	[BUG]  [BUGGY]  Node  p  =  n.refs.getPrefix();  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.getPrefix();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.getPrefix();	  Node    p    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	30	None	replace
134	[BUG]  [BUGGY]  Node  p  =  n.refs.getRootNode();  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.getRootNode();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.getRootNode();	  Node    p    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	30	None	replace
135	[BUG]  [BUGGY]  Node  p  =  n.refs.getNameNode();  [CE]  not  a  statement  [FE]                                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.getNameNode();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.getNameNode();	  Node    p    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	30	None	replace
136	[BUG]  [BUGGY]  String  originalName  =  n.name.toLowerCase(Locale.ENGLISH);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.toLowerCase(Locale.ENGLISH);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.toLowerCase(Locale.ENGLISH);	  String    originalName    =    n.name.alias();    	non-compiled	[CE]  not  a  statement	62	None	replace
137	[BUG]  [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.length());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.substring(0,  n.name.length());	  String    originalName    =    n.name.alias();    	non-compiled	[CE]  not  a  statement	62	None	replace
138	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  n.refs);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  n.refs);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  n.refs);	  String    originalName    =    n.fullName(alias,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	38	None	replace
139	[BUG]  [BUGGY]  String  originalName  =  UNSAFE_THIS.fullName(alias,  n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  UNSAFE_THIS.fullName(alias,  n);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  UNSAFE_THIS.fullName(alias,  n);	  String    originalName    =    n.fullName(alias,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	38	None	replace
140	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  n.globalNames);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  n.globalNames);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  n.globalNames);	  String    originalName    =    n.fullName(alias,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	38	None	replace
141	[BUG]  [BUGGY]  String  originalName  =  alias.toString()  + ": "  +  n.refs;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.toString()  + ": "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.toString()  + ": "  +  n.refs;	  String    originalName    =    alias.toString();    	non-compiled	[CE]  not  a  statement	52	None	replace
142	[BUG]  [BUGGY]  String  originalName  =  alias.substring(0,  n.refs.length()  -  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.substring(0,  n.refs.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.substring(0,  n.refs.length()  -  1);	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
143	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  +  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  +  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.length()  +  1);	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
144	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()));  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()));  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.length()));	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
145	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  *  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  *  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.length()  *  1);	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
146	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.name.length()  -  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.name.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.name.length()  -  1);	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
147	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ",_ "  +  alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ",_ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ",_ "  +  alias;	  String    originalName    =    n.name()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	42	None	replace
148	[BUG]  [BUGGY]  String  originalName  =  n.name()  + "._ "  +  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + "._ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + "._ "  +  alias;	  String    originalName    =    n.name()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	42	None	replace
149	[BUG]  [BUGGY]  String  originalName  =  n.name()  + "_ ",  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + "_ ",  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + "_ ",  alias;	  String    originalName    =    n.name()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	42	None	replace
150	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + ": "  +  n.alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + ": "  +  n.alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + ": "  +  n.alias;	  String    originalName    =    n.refs.fullName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	11	None	replace
151	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + ".: "  +  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + ".: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + ".: "  +  alias;	  String    originalName    =    n.refs.fullName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	11	None	replace
152	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + ",: "  +  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + ",: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + ",: "  +  alias;	  String    originalName    =    n.refs.fullName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	11	None	replace
153	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + ",  alias: "  +  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + ",  alias: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + ",  alias: "  +  alias;	  String    originalName    =    n.refs.fullName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	11	None	replace
154	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + ": "  +  n.name;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + ": "  +  n.name;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + ": "  +  n.name;	  String    originalName    =    n.refs.fullName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	11	None	replace
155	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + ",_ "  +  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + ",_ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + ",_ "  +  alias;	  String    originalName    =    n.refs.fullName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	12	None	replace
156	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + "._ "  +  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + "._ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + "._ "  +  alias;	  String    originalName    =    n.refs.fullName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	12	None	replace
157	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + "_ ",  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + "_ ",  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + "_ ",  alias;	  String    originalName    =    n.refs.fullName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	12	None	replace
158	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +  alias.toLowerCase();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  +  alias.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +  alias.toLowerCase();	  String    originalName    =    n.fullName()    +    alias.toLowerCase();    	non-compiled	[CE]  not  a  statement	15	None	replace
159	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias.toLowerCase(Locale.ENGLISH);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias.toLowerCase(Locale.ENGLISH);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias.toLowerCase(Locale.ENGLISH);	  String    originalName    =    n.fullName()    +    alias.toLowerCase();    	non-compiled	[CE]  not  a  statement	15	None	replace
160	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  *  alias.toLowerCase();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  *  alias.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  *  alias.toLowerCase();	  String    originalName    =    n.fullName()    +    alias.toLowerCase();    	non-compiled	[CE]  not  a  statement	15	None	replace
161	[BUG]  [BUGGY]  String  originalName  =  n.name()  +  alias.toLowerCase();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  +  alias.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  +  alias.toLowerCase();	  String    originalName    =    n.fullName()    +    alias.toLowerCase();    	non-compiled	[CE]  not  a  statement	15	None	replace
162	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias.toUpperCase();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias.toUpperCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias.toUpperCase();	  String    originalName    =    n.fullName()    +    alias.toLowerCase();    	non-compiled	[CE]  not  a  statement	15	None	replace
163	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias.refs.toLowerCase();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias.refs.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias.refs.toLowerCase();	  String    originalName    =    n.fullName()    +    alias.toLowerCase();    	non-compiled	[CE]  not  a  statement	15	None	replace
164	[BUG]  [BUGGY]  String  originalName  =  n.originalName.toLowerCase(alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName.toLowerCase(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName.toLowerCase(alias);	  String    originalName    =    n.originalName.toLowerCase();    	non-compiled	[CE]  not  a  statement	61	None	replace
165	[BUG]  [BUGGY]  String  originalName  =  n.refs.toLowerCase();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.toLowerCase();	  String    originalName    =    n.originalName.toLowerCase();    	non-compiled	[CE]  not  a  statement	61	None	replace
166	[BUG]  [BUGGY]  String  originalName  =  n.originalName,  alias.toLowerCase();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName,  alias.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName,  alias.toLowerCase();	  String    originalName    =    n.originalName.toLowerCase();    	non-compiled	[CE]  not  a  statement	61	None	replace
167	[BUG]  [BUGGY]  String  originalName  =  n.originalName.toLowerCase()  +  1;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName.toLowerCase()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName.toLowerCase()  +  1;	  String    originalName    =    n.originalName.toLowerCase();    	non-compiled	[CE]  not  a  statement	61	None	replace
168	[BUG]  [BUGGY]  String  originalName  =  n.originalName.toLowerCase()  +  alias;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName.toLowerCase()  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName.toLowerCase()  +  alias;	  String    originalName    =    n.originalName.toLowerCase();    	non-compiled	[CE]  not  a  statement	61	None	replace
169	[BUG]  [BUGGY]  String  originalName  =  n.originalName.substring(0,  n.refs.length()  -  1);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName.substring(0,  n.refs.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName.substring(0,  n.refs.length()  -  1);	  String    originalName    =    n.originalName.toLowerCase();    	non-compiled	[CE]  not  a  statement	61	None	replace
170	[BUG]  [BUGGY]  String  originalName  =  n.externs.toString();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.externs.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.externs.toString();	  String    originalName    =    n.externs.url();    	non-compiled	[CE]  not  a  statement	59	None	replace
171	[BUG]  [BUGGY]  String  originalName  =  n.externs.getName();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.externs.getName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.externs.getName();	  String    originalName    =    n.externs.url();    	non-compiled	[CE]  not  a  statement	59	None	replace
172	[BUG]  [BUGGY]  String  originalName  =  n.externs.substring(0,  n.externs.length()  -  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.externs.substring(0,  n.externs.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.externs.substring(0,  n.externs.length()  -  1);	  String    originalName    =    n.externs.url();    	non-compiled	[CE]  not  a  statement	59	None	replace
173	[BUG]  [BUGGY]  String  originalName  =  n.externs.substring(0,  n.refs.length()  -  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.externs.substring(0,  n.refs.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.externs.substring(0,  n.refs.length()  -  1);	  String    originalName    =    n.externs.url();    	non-compiled	[CE]  not  a  statement	59	None	replace
174	[BUG]  [BUGGY]  String  originalName  =  n.externs.url()  + ": "  +  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.externs.url()  + ": "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.externs.url()  + ": "  +  alias;	  String    originalName    =    n.externs.url();    	non-compiled	[CE]  not  a  statement	59	None	replace
175	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(alias  +  1);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Ref  r  =  n.refs.get(alias  +  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.get(alias  +  1);	  Ref    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	29	None	replace
176	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(alias)+  1;  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Ref  r  =  n.refs.get(alias)+  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.get(alias)+  1;	  Ref    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	29	None	replace
177	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(alias,  originalName);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Ref  r  =  n.refs.get(alias,  originalName);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.get(alias,  originalName);	  Ref    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	29	None	replace
178	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(alias  + "_ ");  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Ref  r  =  n.refs.get(alias  + "_ ");  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.get(alias  + "_ ");	  Ref    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	29	None	replace
179	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(alias,  true);  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Ref  r  =  n.refs.get(alias,  true);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.get(alias,  true);	  Ref    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	29	None	replace
180	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(alias  + ": ");  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Ref  r  =  n.refs.get(alias  + ": ");  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.get(alias  + ": ");	  Ref    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	29	None	replace
181	[BUG]  [BUGGY]  String  originalName  =  n.parseURI(alias,  n.refs);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.parseURI(alias,  n.refs);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.parseURI(alias,  n.refs);	  String    originalName    =    n.parseURI(alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
182	[BUG]  [BUGGY]  String  originalName  =  n.parseURI(alias).toLowerCase();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.parseURI(alias).toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.parseURI(alias).toLowerCase();	  String    originalName    =    n.parseURI(alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
183	[BUG]  [BUGGY]  String  originalName  =  n.refs.parseURI(alias);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.parseURI(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.parseURI(alias);	  String    originalName    =    n.parseURI(alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
184	[BUG]  [BUGGY]  String  originalName  =  n.parseURI(alias)+ ": "  +  n.refs;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.parseURI(alias)+ ": "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.parseURI(alias)+ ": "  +  n.refs;	  String    originalName    =    n.parseURI(alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
185	[BUG]  [BUGGY]  String  originalName  =  n.parseString(alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.parseString(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.parseString(alias);	  String    originalName    =    n.parseURI(alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
186	[BUG]  [BUGGY]  String  originalName  =  n.parseURI(alias)+  1;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.parseURI(alias)+  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.parseURI(alias)+  1;	  String    originalName    =    n.parseURI(alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
187	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias,  originalName);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Name  p  =  n.refs.get(alias,  originalName);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Name  p  =  n.refs.get(alias,  originalName);	  Name    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	26	None	replace
188	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias  +  1);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Name  p  =  n.refs.get(alias  +  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Name  p  =  n.refs.get(alias  +  1);	  Name    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	26	None	replace
189	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias)+  1;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Name  p  =  n.refs.get(alias)+  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Name  p  =  n.refs.get(alias)+  1;	  Name    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	26	None	replace
190	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias  + "_ ");  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Name  p  =  n.refs.get(alias  + "_ ");  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Name  p  =  n.refs.get(alias  + "_ ");	  Name    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	26	None	replace
191	[BUG]  [BUGGY]  Name  p  =  n.references.get(alias);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Name  p  =  n.references.get(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Name  p  =  n.references.get(alias);	  Name    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	26	None	replace
192	[BUG]  [BUGGY]  String  originalName  =  n.refs.name()  +  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.name()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.name()  +  1;	  String    originalName    =    n.name()    +    1;    	non-compiled	[CE]  not  a  statement	43	None	replace
193	[BUG]  [BUGGY]  String  originalName  =  n,  alias.name()  +  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n,  alias.name()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n,  alias.name()  +  1;	  String    originalName    =    n.name()    +    1;    	non-compiled	[CE]  not  a  statement	43	None	replace
194	[BUG]  [BUGGY]  String  originalName  =  n.name()  *  1;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  *  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  *  1;	  String    originalName    =    n.name()    +    1;    	non-compiled	[CE]  not  a  statement	43	None	replace
195	[BUG]  [BUGGY]  String  originalName  =  n.name()  +  2;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  +  2;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  +  2;	  String    originalName    =    n.name()    +    1;    	non-compiled	[CE]  not  a  statement	43	None	replace
196	[BUG]  [BUGGY]  String  originalName  =  n.name()  +  3;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  +  3;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  +  3;	  String    originalName    =    n.name()    +    1;    	non-compiled	[CE]  not  a  statement	43	None	replace
197	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ";n ",  alias);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ";n ",  alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ";n ",  alias);	  String    originalName    =    n.name()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	44	None	replace
198	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ".refs;n ";  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ".refs;n ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ".refs;n ";	  String    originalName    =    n.name()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	44	None	replace
199	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ";n. ";  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ";n. ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ";n. ";	  String    originalName    =    n.name()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	44	None	replace
200	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ";node ";  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ";node ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ";node ";	  String    originalName    =    n.name()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	44	None	replace
201	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +  1;	  String    originalName    =    n.fullName()    +    1;    	non-compiled	[CE]  not  a  statement	58	None	replace
202	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  2;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  2;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  2;	  String    originalName    =    n.fullName()    +    1;    	non-compiled	[CE]  not  a  statement	58	None	replace
203	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  *  1;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  *  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  *  1;	  String    originalName    =    n.fullName()    +    1;    	non-compiled	[CE]  not  a  statement	58	None	replace
204	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  +  1;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  +  1;	  String    originalName    =    n.fullName()    +    1;    	non-compiled	[CE]  not  a  statement	58	None	replace
205	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ".: ";  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ".: ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ".: ";	  String    originalName    =    n.alias()    +   ":   ";    	non-compiled	[CE]  not  a  statement	5	None	replace
206	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ".refs: ";  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ".refs: ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ".refs: ";	  String    originalName    =    n.alias()    +   ":   ";    	non-compiled	[CE]  not  a  statement	5	None	replace
207	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ",: ";  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ",: ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ",: ";	  String    originalName    =    n.alias()    +   ":   ";    	non-compiled	[CE]  not  a  statement	5	None	replace
208	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": "  +  alias;  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ": "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": "  +  alias;	  String    originalName    =    n.alias()    +   ":   ";    	non-compiled	[CE]  not  a  statement	5	None	replace
209	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ".  Ref: ";  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ".  Ref: ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ".  Ref: ";	  String    originalName    =    n.alias()    +   ":   ";    	non-compiled	[CE]  not  a  statement	5	None	replace
210	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ",   ";  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ",   ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ",   ";	  String    originalName    =    n.alias()    +   ":   ";    	non-compiled	[CE]  not  a  statement	5	None	replace
211	[BUG]  [BUGGY]  Node  r  =  n.getNext();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.getNext();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.getNext();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	66	None	replace
212	[BUG]  [BUGGY]  Node  r  =  n.refs;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs;	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	66	None	replace
213	[BUG]  [BUGGY]  Node  r  =  n.getRawParent();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.getRawParent();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.getRawParent();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	66	None	replace
214	[BUG]  [BUGGY]  Node  r  =  n.getNameNode();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.getNameNode();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.getNameNode();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	66	None	replace
215	[BUG]  [BUGGY]  String  originalName  =  n.alias.toLowerCase();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias.toLowerCase();	  String    originalName    =    n.alias.toString();    	non-compiled	[CE]  not  a  statement	22	None	replace
216	[BUG]  [BUGGY]  String  originalName  =  n.alias.substring(0,  n.refs.length()  -  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias.substring(0,  n.refs.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias.substring(0,  n.refs.length()  -  1);	  String    originalName    =    n.alias.toString();    	non-compiled	[CE]  not  a  statement	22	None	replace
217	[BUG]  [BUGGY]  String  originalName  =  n.alias.trim();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias.trim();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias.trim();	  String    originalName    =    n.alias.toString();    	non-compiled	[CE]  not  a  statement	22	None	replace
218	[BUG]  [BUGGY]  String  originalName  =  n.alias.substring(0,  n.refs.length());  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias.substring(0,  n.refs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias.substring(0,  n.refs.length());	  String    originalName    =    n.alias.toString();    	non-compiled	[CE]  not  a  statement	22	None	replace
219	[BUG]  [BUGGY]  String  originalName  =  n.alias.substring(0,  n.refs.length()  -  2);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias.substring(0,  n.refs.length()  -  2);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias.substring(0,  n.refs.length()  -  2);	  String    originalName    =    n.alias.toString();    	non-compiled	[CE]  not  a  statement	22	None	replace
220	[BUG]  [BUGGY]  String  originalName  =  n.alias.refs.toString();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias.refs.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias.refs.toString();	  String    originalName    =    n.alias.toString();    	non-compiled	[CE]  not  a  statement	22	None	replace
221	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  /  alias;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  /  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  /  alias;	  String    originalName    =    n.fullName()    *    alias;    	non-compiled	[CE]  not  a  statement	18	None	replace
222	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  *  alias;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  *  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  *  alias;	  String    originalName    =    n.fullName()    *    alias;    	non-compiled	[CE]  not  a  statement	18	None	replace
223	[BUG]  [BUGGY]  String  originalName  =  n.fullName(),  alias;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(),  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(),  alias;	  String    originalName    =    n.fullName()    *    alias;    	non-compiled	[CE]  not  a  statement	18	None	replace
224	[BUG]  [BUGGY]  String  originalName  =  n.fullName(),  alias);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(),  alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(),  alias);	  String    originalName    =    n.fullName()    *    alias;    	non-compiled	[CE]  not  a  statement	18	None	replace
225	[BUG]  [BUGGY]  String  originalName  =  n.alias()  *  1;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  *  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  *  1;	  String    originalName    =    n.alias()    +    1;    	non-compiled	[CE]  not  a  statement	55	None	replace
226	[BUG]  [BUGGY]  String  originalName  =  n.alias()  ||  n.refs.alias().equals(alias));  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  ||  n.refs.alias().equals(alias));  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  ||  n.refs.alias().equals(alias));	  String    originalName    =    n.alias()    +    1;    	non-compiled	[CE]  not  a  statement	55	None	replace
227	[BUG]  [BUGGY]  String  originalName  =  n.alias()  ||  n.refs.alias().equals(alias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  ||  n.refs.alias().equals(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  ||  n.refs.alias().equals(alias);	  String    originalName    =    n.alias()    +    1;    	non-compiled	[CE]  not  a  statement	55	None	replace
228	[BUG]  [BUGGY]  String  originalName  =  n.alias()  ||  n.refs.alias()  +  1;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  ||  n.refs.alias()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  ||  n.refs.alias()  +  1;	  String    originalName    =    n.alias()    +    1;    	non-compiled	[CE]  not  a  statement	55	None	replace
229	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ",: "  +  n.refs.toString();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ",: "  +  n.refs.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ",: "  +  n.refs.toString();	  String    originalName    =    n.alias()    +   ":   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	63	None	replace
230	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ".: "  +  n.refs.toString();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ".: "  +  n.refs.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ".: "  +  n.refs.toString();	  String    originalName    =    n.alias()    +   ":   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	63	None	replace
231	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.name.toString();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.name.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": "  +  n.name.toString();	  String    originalName    =    n.alias()    +   ":   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	63	None	replace
232	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.toString();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": "  +  n.toString();	  String    originalName    =    n.alias()    +   ":   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	63	None	replace
233	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.refs.substring(0,  n.refs.length()  -  1);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.refs.substring(0,  n.refs.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": "  +  n.refs.substring(0,  n.refs.length()  -  1);	  String    originalName    =    n.alias()    +   ":   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	63	None	replace
234	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.refs.substring(0,  n.refs.length());  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.refs.substring(0,  n.refs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": "  +  n.refs.substring(0,  n.refs.length());	  String    originalName    =    n.alias()    +   ":   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	63	None	replace
235	[BUG]  [BUGGY]  String  originalName  =  n.name()  +  UNSAFE_THIS;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  +  UNSAFE_THIS;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  +  UNSAFE_THIS;	  String    originalName    =    n.name()    +    alias;    	non-compiled	[CE]  not  a  statement	17	None	replace
236	[BUG]  [BUGGY]  String  originalName  =  n.name()  *  alias;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  *  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  *  alias;	  String    originalName    =    n.name()    +    alias;    	non-compiled	[CE]  not  a  statement	17	None	replace
237	[BUG]  [BUGGY]  String  originalName  =  n.refs.name()  +  alias;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.name()  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.name()  +  alias;	  String    originalName    =    n.name()    +    alias;    	non-compiled	[CE]  not  a  statement	17	None	replace
238	[BUG]  [BUGGY]  String  originalName  =  n.name()  +  alias,  n.refs;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  +  alias,  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  +  alias,  n.refs;	  String    originalName    =    n.name()    +    alias;    	non-compiled	[CE]  not  a  statement	17	None	replace
239	[BUG]  [BUGGY]  String  originalName  =  n.name()  /  alias;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  /  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  /  alias;	  String    originalName    =    n.name()    +    alias;    	non-compiled	[CE]  not  a  statement	17	None	replace
240	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getNext();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.refs.getNext();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs.getNext();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	24	None	replace
241	[BUG]  [BUGGY]  Node  rParent  =  n.refs.cloneTree();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.refs.cloneTree();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs.cloneTree();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	24	None	replace
242	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getParent(alias);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.refs.getParent(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs.getParent(alias);	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	24	None	replace
243	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getRootNode();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.refs.getRootNode();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs.getRootNode();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	24	None	replace
244	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getRawParent();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.refs.getRawParent();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs.getRawParent();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	24	None	replace
245	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getFirstChild();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.refs.getFirstChild();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs.getFirstChild();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	24	None	replace
246	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  -  3);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  -  3);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.length()  -  3);	  String    originalName    =    n.refs.substring(0,    n.refs.length());    	non-compiled	[CE]  not  a  statement	49	None	replace
247	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  -  4);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  -  4);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.length()  -  4);	  String    originalName    =    n.refs.substring(0,    n.refs.length());    	non-compiled	[CE]  not  a  statement	49	None	replace
248	[BUG]  [BUGGY]  String  originalName  =  n.url()  +  UNSAFE_THIS;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  +  UNSAFE_THIS;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  +  UNSAFE_THIS;	  String    originalName    =    n.url()    +    alias;    	non-compiled	[CE]  not  a  statement	45	None	replace
249	[BUG]  [BUGGY]  String  originalName  =  n.refs.url()  +  alias;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.url()  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.url()  +  alias;	  String    originalName    =    n.url()    +    alias;    	non-compiled	[CE]  not  a  statement	45	None	replace
250	[BUG]  [BUGGY]  String  originalName  =  n.url()  +  alias.toLowerCase();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  +  alias.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  +  alias.toLowerCase();	  String    originalName    =    n.url()    +    alias;    	non-compiled	[CE]  not  a  statement	45	None	replace
251	[BUG]  [BUGGY]  String  originalName  =  n.url()  +  alias,  n.refs;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  +  alias,  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  +  alias,  n.refs;	  String    originalName    =    n.url()    +    alias;    	non-compiled	[CE]  not  a  statement	45	None	replace
252	[BUG]  [BUGGY]  String  originalName  =  n.url()  +  alias.toString();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  +  alias.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  +  alias.toString();	  String    originalName    =    n.url()    +    alias;    	non-compiled	[CE]  not  a  statement	45	None	replace
253	[BUG]  [BUGGY]  String  originalName  =  alias.toLowerCase();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.toLowerCase();	  String    originalName    =    alias.originalName();    	non-compiled	[CE]  not  a  statement	47	None	replace
254	[BUG]  [BUGGY]  String  originalName  =  alias.substring(n.refs.length(),  n.refs.length());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.substring(n.refs.length(),  n.refs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.substring(n.refs.length(),  n.refs.length());	  String    originalName    =    alias.originalName();    	non-compiled	[CE]  not  a  statement	47	None	replace
255	[BUG]  [BUGGY]  String  originalName  =  alias.substring(n.refs.length()  -  1,  n.refs.length());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.substring(n.refs.length()  -  1,  n.refs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.substring(n.refs.length()  -  1,  n.refs.length());	  String    originalName    =    alias.originalName();    	non-compiled	[CE]  not  a  statement	47	None	replace
256	[BUG]  [BUGGY]  String  originalName  =  alias.substring(0,  alias.length()  -  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.substring(0,  alias.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.substring(0,  alias.length()  -  1);	  String    originalName    =    alias.originalName();    	non-compiled	[CE]  not  a  statement	47	None	replace
257	[BUG]  [BUGGY]  String  originalName  =  alias.substring(n.refs.length()  -  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.substring(n.refs.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.substring(n.refs.length()  -  1);	  String    originalName    =    alias.originalName();    	non-compiled	[CE]  not  a  statement	47	None	replace
258	[BUG]  [BUGGY]  String  originalName  =  n.alias()  +  UNSAFE_THIS;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  +  UNSAFE_THIS;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  +  UNSAFE_THIS;	  String    originalName    =    n.alias()    +    alias;    	non-compiled	[CE]  not  a  statement	54	None	replace
259	[BUG]  [BUGGY]  String  originalName  =  n.alias()  *  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  *  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  *  alias;	  String    originalName    =    n.alias()    +    alias;    	non-compiled	[CE]  not  a  statement	54	None	replace
260	[BUG]  [BUGGY]  String  originalName  =  n.alias()  +  alias.toLowerCase();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  +  alias.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  +  alias.toLowerCase();	  String    originalName    =    n.alias()    +    alias;    	non-compiled	[CE]  not  a  statement	54	None	replace
261	[BUG]  [BUGGY]  String  originalName  =  n.alias()  +  alias,  n.refs;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  +  alias,  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  +  alias,  n.refs;	  String    originalName    =    n.alias()    +    alias;    	non-compiled	[CE]  not  a  statement	54	None	replace
262	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ",n "  +  n.refs.toString();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ",n "  +  n.refs.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ",n "  +  n.refs.toString();	  String    originalName    =    n.alias()    +   ",   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	3	None	replace
263	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + "., "  +  n.refs.toString();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + "., "  +  n.refs.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + "., "  +  n.refs.toString();	  String    originalName    =    n.alias()    +   ",   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	3	None	replace
264	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ", "  +  n.name.toString();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ", "  +  n.name.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ", "  +  n.name.toString();	  String    originalName    =    n.alias()    +   ",   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	3	None	replace
265	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ",: "  +  alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ",: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ",: "  +  alias;	  String    originalName    =    n.originalName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	32	None	replace
266	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ".: "  +  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ".: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ".: "  +  alias;	  String    originalName    =    n.originalName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	32	None	replace
267	[BUG]  [BUGGY]  String  originalName  =  n.refs.originalName()  + ": "  +  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.originalName()  + ": "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.originalName()  + ": "  +  alias;	  String    originalName    =    n.originalName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	32	None	replace
268	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ",  alias: "  +  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ",  alias: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ",  alias: "  +  alias;	  String    originalName    =    n.originalName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	32	None	replace
269	[BUG]  [BUGGY]  String  originalName  =  n.refs.name()  + ": "  +  alias;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.name()  + ": "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.name()  + ": "  +  alias;	  String    originalName    =    n.refs.name();    	non-compiled	[CE]  not  a  statement	40	None	replace
270	[BUG]  [BUGGY]  String  originalName  =  n.refs.name()  + "_ "  +  alias;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.name()  + "_ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.name()  + "_ "  +  alias;	  String    originalName    =    n.refs.name();    	non-compiled	[CE]  not  a  statement	40	None	replace
271	[BUG]  [BUGGY]  Node  r  =  n.refs.getRawParent();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.getRawParent();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.getRawParent();	  Node    r    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	65	None	replace
272	[BUG]  [BUGGY]  Node  r  =  n.refs.getRootNode();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.getRootNode();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.getRootNode();	  Node    r    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	65	None	replace
273	[BUG]  [BUGGY]  Node  r  =  n.refs.getRoot();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.getRoot();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.getRoot();	  Node    r    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	65	None	replace
274	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +  UNSAFE_THIS;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  +  UNSAFE_THIS;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +  UNSAFE_THIS;	  String    originalName    =    n.refs.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	8	None	replace
275	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +  alias.toString();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  +  alias.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +  alias.toString();	  String    originalName    =    n.refs.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	8	None	replace
276	[BUG]  [BUGGY]  String  originalName  =  n.refs.getLocalName();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.getLocalName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.getLocalName();	  String    originalName    =    n.refs.originalName();    	non-compiled	[CE]  not  a  statement	31	None	replace
277	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  *  UNSAFE_THIS;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  *  UNSAFE_THIS;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  *  UNSAFE_THIS;	  String    originalName    =    n.fullName()    +    UNSAFE_THIS;    	non-compiled	[CE]  not  a  statement	14	None	replace
278	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_THIS,  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_THIS,  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  UNSAFE_THIS,  alias;	  String    originalName    =    n.fullName()    +    UNSAFE_THIS;    	non-compiled	[CE]  not  a  statement	14	None	replace
279	[BUG]  [BUGGY]  String  originalName  =  UNSAFE_THIS.fullName()  +  n.fullName;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  UNSAFE_THIS.fullName()  +  n.fullName;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  UNSAFE_THIS.fullName()  +  n.fullName;	  String    originalName    =    n.fullName()    +    UNSAFE_THIS;    	non-compiled	[CE]  not  a  statement	14	None	replace
280	[BUG]  [BUGGY]  Node  r  =  n.refs.getNext()  +  1;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.getNext()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.getNext()  +  1;	  Node    r    =    n.refs.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
281	[BUG]  [BUGGY]  Node  r  =  n.refs.getPrevious();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.getPrevious();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.getPrevious();	  Node    r    =    n.refs.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
282	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ".refs: "  +  alias;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ".refs: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ".refs: "  +  alias;	  String    originalName    =    n.name()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	41	None	replace
283	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ".: "  +  alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ".: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ".: "  +  alias;	  String    originalName    =    n.name()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	41	None	replace
284	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ",: "  +  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ",: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ",: "  +  alias;	  String    originalName    =    n.name()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	41	None	replace
285	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ",  alias: "  +  n.refs;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ",  alias: "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ",  alias: "  +  n.refs;	  String    originalName    =    n.name()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	41	None	replace
286	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ",  alias: "  +  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ",  alias: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ",  alias: "  +  alias;	  String    originalName    =    n.name()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	41	None	replace
287	[BUG]  [BUGGY]  Node  rParent  =  n.parseName(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.parseName(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.parseName(alias);	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	64	None	replace
288	[BUG]  [BUGGY]  Node  rParent  =  n.parseNode(alias);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.parseNode(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.parseNode(alias);	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	64	None	replace
289	[BUG]  [BUGGY]  Node  rParent  =  n.parent;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.parent;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.parent;	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	64	None	replace
290	[BUG]  [BUGGY]  Node  rParent  =  n.refs;  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs;	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	64	None	replace
291	[BUG]  [BUGGY]  Node  r  =  n.refs  ==  null?  null  :  n.refs.getFirstChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs  ==  null?  null  :  n.refs.getFirstChild();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs  ==  null?  null  :  n.refs.getFirstChild();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	25	None	replace
292	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n;	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	25	None	replace
293	[BUG]  [BUGGY]  String  originalName  =  n.toString()  + ": "  +  n.toString();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  + ": "  +  n.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  + ": "  +  n.toString();	  String    originalName    =    n.toString()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	20	None	replace
294	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n.type);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName(alias,  n.type);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName(alias,  n.type);	  String    originalName    =    n.refs.fullName(alias);    	non-compiled	[CE]  not  a  statement	10	None	replace
295	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName(alias,  nameMap);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName(alias,  nameMap);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName(alias,  nameMap);	  String    originalName    =    n.refs.fullName(alias);    	non-compiled	[CE]  not  a  statement	10	None	replace
296	[BUG]  [BUGGY]  String  originalName  =  n.refs.name(alias);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.name(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.name(alias);	  String    originalName    =    n.refs.name();    	non-compiled	[CE]  not  a  statement	40	None	replace
297	[BUG]  [BUGGY]  String  originalName  =  n.alias.getName();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias.getName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias.getName();	  String    originalName    =    n.getName();    	non-compiled	[CE]  not  a  statement	19	None	replace
298	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ";n ",  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ";n ",  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ";n ",  alias;	  String    originalName    =    n.name()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	44	None	replace
299	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ";null ";  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ";null ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ";null ";	  String    originalName    =    n.name()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	44	None	replace
300	[BUG]  [BUGGY]  String  originalName  =  alias  ==  null?  null  :  alias.toString();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias  ==  null?  null  :  alias.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias  ==  null?  null  :  alias.toString();	  String    originalName    =    alias.toString();    	non-compiled	[CE]  not  a  statement	52	None	replace
301	[BUG]  [BUGGY]  String  originalName  =  alias!=  null?  null  :  alias.toString();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias!=  null?  null  :  alias.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias!=  null?  null  :  alias.toString();	  String    originalName    =    alias.toString();    	non-compiled	[CE]  not  a  statement	52	None	replace
302	[BUG]  [BUGGY]  String  originalName  =  n.simpleName()  +  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.simpleName()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.simpleName()  +  1;	  String    originalName    =    n.name()    +    1;    	non-compiled	[CE]  not  a  statement	43	None	replace
303	[BUG]  [BUGGY]  String  originalName  =  n,  alias.name();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n,  alias.name();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n,  alias.name();	  String    originalName    =    n.name()    +    1;    	non-compiled	[CE]  not  a  statement	43	None	replace
304	[BUG]  [BUGGY]  Node  r  =  n.refs.getPrefix();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.getPrefix();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.getPrefix();	  Node    r    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	65	None	replace
305	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING  +  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING  +  alias;	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_REDEFINED_WARNING;    	non-compiled	[CE]  not  a  statement	57	None	replace
306	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  null).toLowerCase();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  null).toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  null).toLowerCase();	  String    originalName    =    n.fullName(alias,    null);    	non-compiled	[CE]  not  a  statement	53	None	replace
307	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  nameMap);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  nameMap);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  nameMap);	  String    originalName    =    n.fullName(alias,    null);    	non-compiled	[CE]  not  a  statement	53	None	replace
308	[BUG]  [BUGGY]  String  originalName  =  null.fullName(alias,  n.refs);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  null.fullName(alias,  n.refs);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  null.fullName(alias,  n.refs);	  String    originalName    =    n.fullName(alias,    null);    	non-compiled	[CE]  not  a  statement	53	None	replace
309	[BUG]  [BUGGY]  String  originalName  =  alias  ==  null?  null  :  alias.originalName();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias  ==  null?  null  :  alias.originalName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias  ==  null?  null  :  alias.originalName();	  String    originalName    =    alias.originalName();    	non-compiled	[CE]  not  a  statement	47	None	replace
310	[BUG]  [BUGGY]  String  originalName  =  alias!=  null?  null  :  alias.originalName();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias!=  null?  null  :  alias.originalName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias!=  null?  null  :  alias.originalName();	  String    originalName    =    alias.originalName();    	non-compiled	[CE]  not  a  statement	47	None	replace
311	[BUG]  [BUGGY]  String  originalName  =  alias.refs.originalName();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.refs.originalName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.refs.originalName();	  String    originalName    =    alias.originalName();    	non-compiled	[CE]  not  a  statement	47	None	replace
312	[BUG]  [BUGGY]  Node  p  =  n.refs.getPosition();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.getPosition();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.getPosition();	  Node    p    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	30	None	replace
313	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + "_ ",  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + "_ ",  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + "_ ",  alias;	  String    originalName    =    n.originalName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	34	None	replace
314	[BUG]  [BUGGY]  String  originalName  =  n.url()  + ": "  +  n.alias;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  + ": "  +  n.alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  + ": "  +  n.alias;	  String    originalName    =    n.url()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	7	None	replace
315	[BUG]  [BUGGY]  String  originalName  =  n.url()  +  UNSAFE_NAMESPACE_WARNING;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  +  UNSAFE_NAMESPACE_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  +  UNSAFE_NAMESPACE_WARNING;	  String    originalName    =    n.url()    +    alias;    	non-compiled	[CE]  not  a  statement	45	None	replace
316	[BUG]  [BUGGY]  String  originalName  =  n.url()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;	  String    originalName    =    n.url()    +    alias;    	non-compiled	[CE]  not  a  statement	45	None	replace
317	[BUG]  [BUGGY]  String  originalName  =  n.url()  +  UNSAFE_DECEMBER_NAMESPACE_WARNING;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  +  UNSAFE_DECEMBER_NAMESPACE_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  +  UNSAFE_DECEMBER_NAMESPACE_WARNING;	  String    originalName    =    n.url()    +    alias;    	non-compiled	[CE]  not  a  statement	45	None	replace
318	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  *  alias  +  1;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  *  alias  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  *  alias  +  1;	  String    originalName    =    n.fullName()    *    alias;    	non-compiled	[CE]  not  a  statement	18	None	replace
319	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ",  UNSAFE_THIS: ";  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ",  UNSAFE_THIS: ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ",  UNSAFE_THIS: ";	  String    originalName    =    n.alias()    +   ":   ";    	non-compiled	[CE]  not  a  statement	5	None	replace
320	[BUG]  [BUGGY]  String  originalName  =  n.refs.alias()  + ": ";  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.alias()  + ": ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.alias()  + ": ";	  String    originalName    =    n.alias()    +   ":   ";    	non-compiled	[CE]  not  a  statement	5	None	replace
321	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ";null ";  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ";null ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ";null ";	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
322	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ";n: ";  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ";n: ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ";n: ";	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
323	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ".;node ";  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ".;node ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ".;node ";	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
324	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ";node ",  n.refs);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ";node ",  n.refs);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ";node ",  n.refs);	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
325	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(alias,  null);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Ref  r  =  n.refs.get(alias,  null);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.get(alias,  null);	  Ref    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	29	None	replace
326	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(alias,  p);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Ref  r  =  n.refs.get(alias,  p);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.get(alias,  p);	  Ref    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	29	None	replace
327	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias,  true);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Name  p  =  n.refs.get(alias,  true);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Name  p  =  n.refs.get(alias,  true);	  Name    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	26	None	replace
328	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias).toPath();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Name  p  =  n.refs.get(alias).toPath();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Name  p  =  n.refs.get(alias).toPath();	  Name    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	26	None	replace
329	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias,  null);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Name  p  =  n.refs.get(alias,  null);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Name  p  =  n.refs.get(alias,  null);	  Name    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	26	None	replace
330	[BUG]  [BUGGY]  String  originalName  =  n.refs!=  null?  null  :  n.refs.alias();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs!=  null?  null  :  n.refs.alias();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs!=  null?  null  :  n.refs.alias();	  String    originalName    =    n.refs.alias();    	non-compiled	[CE]  not  a  statement	1	None	replace
331	[BUG]  [BUGGY]  String  originalName  =  n.externs.url()  +  alias;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.externs.url()  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.externs.url()  +  alias;	  String    originalName    =    n.externs.url();    	non-compiled	[CE]  not  a  statement	59	None	replace
332	[BUG]  [BUGGY]  String  originalName  =  n.externs.getString();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.externs.getString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.externs.getString();	  String    originalName    =    n.externs.url();    	non-compiled	[CE]  not  a  statement	59	None	replace
333	[BUG]  [BUGGY]  String  originalName  =  n.externs.substring(0,  n.externs.length());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.externs.substring(0,  n.externs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.externs.substring(0,  n.externs.length());	  String    originalName    =    n.externs.url();    	non-compiled	[CE]  not  a  statement	59	None	replace
334	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_THIS.toLowerCase();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_THIS.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  UNSAFE_THIS.toLowerCase();	  String    originalName    =    n.fullName()    +    alias.toLowerCase();    	non-compiled	[CE]  not  a  statement	15	None	replace
335	[BUG]  [BUGGY]  String  originalName  =  alias.fullName()  +  n.toLowerCase();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.fullName()  +  n.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.fullName()  +  n.toLowerCase();	  String    originalName    =    n.fullName()    +    alias.toLowerCase();    	non-compiled	[CE]  not  a  statement	15	None	replace
336	[BUG]  [BUGGY]  Node  r  =  n.node.getParent();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.node.getParent();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.node.getParent();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	66	None	replace
337	[BUG]  [BUGGY]  Node  r  =  n.node.getNext();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.node.getNext();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.node.getNext();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	66	None	replace
338	[BUG]  [BUGGY]  String  originalName  =  n.originalName(alias,  null);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName(alias,  null);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName(alias,  null);	  String    originalName    =    n.originalName(alias);    	non-compiled	[CE]  not  a  statement	60	None	replace
339	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getParentNode();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.refs.getParentNode();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs.getParentNode();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	24	None	replace
340	[BUG]  [BUGGY]  Node  rParent  =  n.refs.clone();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.refs.clone();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs.clone();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	24	None	replace
341	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ".refs_ "  +  alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ".refs_ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ".refs_ "  +  alias;	  String    originalName    =    n.name()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	42	None	replace
342	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ": "  +  n.alias;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ": "  +  n.alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ": "  +  n.alias;	  String    originalName    =    n.name()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	41	None	replace
343	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ".references: "  +  alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ".references: "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ".references: "  +  alias;	  String    originalName    =    n.name()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	41	None	replace
344	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ": "  +  n.refs;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ": "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ": "  +  n.refs;	  String    originalName    =    n.name()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	41	None	replace
345	[BUG]  [BUGGY]  String  originalName  =  alias.substring(0,  n.refs.length());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.substring(0,  n.refs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.substring(0,  n.refs.length());	  String    originalName    =    n.refs.substring(0,    n.refs.length());    	non-compiled	[CE]  not  a  statement	49	None	replace
346	[BUG]  [BUGGY]  String  originalName  =  n,  alias.substring(0,  n.refs.length());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n,  alias.substring(0,  n.refs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n,  alias.substring(0,  n.refs.length());	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
347	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias,  null);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.get(alias,  null);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.get(alias,  null);	  Node    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	27	None	replace
348	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias,  n.type);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.get(alias,  n.type);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.get(alias,  n.type);	  Node    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	27	None	replace
349	[BUG]  [BUGGY]  String  originalName  =  n.sourceName()  +  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.sourceName()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.sourceName()  +  1;	  String    originalName    =    n.fullName()    +    1;    	non-compiled	[CE]  not  a  statement	58	None	replace
350	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_THIS  +  alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_THIS  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  UNSAFE_THIS  +  alias;	  String    originalName    =    n.fullName()    +    UNSAFE_THIS;    	non-compiled	[CE]  not  a  statement	14	None	replace
351	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.refs.getName();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.refs.getName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": "  +  n.refs.getName();	  String    originalName    =    n.alias()    +   ":   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	63	None	replace
352	[BUG]  [BUGGY]  String  originalName  =  n.originalName.toUpperCase();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName.toUpperCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName.toUpperCase();	  String    originalName    =    n.originalName.toLowerCase();    	non-compiled	[CE]  not  a  statement	61	None	replace
353	[BUG]  [BUGGY]  String  originalName  =  n.name()  +(alias!=  null? " "  :  n.name());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  +(alias!=  null? " "  :  n.name());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  +(alias!=  null? " "  :  n.name());	  String    originalName    =    n.name()    +    alias;    	non-compiled	[CE]  not  a  statement	17	None	replace
354	[BUG]  [BUGGY]  String  originalName  =  n.alias()  +  2;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  +  2;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  +  2;	  String    originalName    =    n.alias()    +    1;    	non-compiled	[CE]  not  a  statement	55	None	replace
355	[BUG]  [BUGGY]  String  originalName  =  n.alias()  [0];  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  [0];  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  [0];	  String    originalName    =    n.alias()    +    1;    	non-compiled	[CE]  not  a  statement	55	None	replace
356	[BUG]  [BUGGY]  String  originalName  =  n.alias  ==  null?  null  :  n.alias.toString();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias  ==  null?  null  :  n.alias.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias  ==  null?  null  :  n.alias.toString();	  String    originalName    =    n.alias.toString();    	non-compiled	[CE]  not  a  statement	22	None	replace
357	[BUG]  [BUGGY]  String  originalName  =  n.alias!=  null?  n.alias.toString()  :  n.toString();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias!=  null?  n.alias.toString()  :  n.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias!=  null?  n.alias.toString()  :  n.toString();	  String    originalName    =    n.alias.toString();    	non-compiled	[CE]  not  a  statement	22	None	replace
358	[BUG]  [BUGGY]  String  originalName  =  n.alias.substring(0,  n.alias.length()  -  1);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias.substring(0,  n.alias.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias.substring(0,  n.alias.length()  -  1);	  String    originalName    =    n.alias.toString();    	non-compiled	[CE]  not  a  statement	22	None	replace
359	[BUG]  [BUGGY]  Node  p  =  n.refs.get(alias,  true);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.get(alias,  true);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.get(alias,  true);	  Node    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	48	None	replace
360	[BUG]  [BUGGY]  Node  p  =  n.refs.get(alias,  null);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.get(alias,  null);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.get(alias,  null);	  Node    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	48	None	replace
361	[BUG]  [BUGGY]  String  originalName  =  n.parseURI(alias,  null);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.parseURI(alias,  null);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.parseURI(alias,  null);	  String    originalName    =    n.parseURI(alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
362	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.type,  n.refs.fullName());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.type,  n.refs.fullName());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.type,  n.refs.fullName());	  String    originalName    =    n.refs.substring(0,    n.refs.fullName());    	non-compiled	[CE]  not  a  statement	67	None	replace
363	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.alias.length());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.alias.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.alias.length());	  String    originalName    =    n.refs.substring(0,    n.refs.fullName());    	non-compiled	[CE]  not  a  statement	67	None	replace
364	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.size());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.size());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.size());	  String    originalName    =    n.refs.substring(0,    n.refs.fullName());    	non-compiled	[CE]  not  a  statement	67	None	replace
365	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ",, "  +  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ",, "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ",, "  +  alias;	  String    originalName    =    n.originalName()    +   ",   "    +    alias;    	non-compiled	[CE]  not  a  statement	35	None	replace
366	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ",, "  +  n.refs.toString();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ",, "  +  n.refs.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ",, "  +  n.refs.toString();	  String    originalName    =    n.alias()    +   ",   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	3	None	replace
367	[BUG]  [BUGGY]  String  originalName  =  n.name.toString()  +  alias;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.toString()  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.toString()  +  alias;	  String    originalName    =    n.name.toString();    	non-compiled	[CE]  not  a  statement	23	None	replace
368	[BUG]  [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.length()  -  4);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.length()  -  4);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.substring(0,  n.name.length()  -  4);	  String    originalName    =    n.name.toString();    	non-compiled	[CE]  not  a  statement	23	None	replace
369	[BUG]  [BUGGY]  Node  rParent  =  n.params.getParent();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.params.getParent();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.params.getParent();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	64	None	replace
370	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  n.refs).toLowerCase();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  n.refs).toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  n.refs).toLowerCase();	  String    originalName    =    n.fullName(alias,    n.refs);    	non-compiled	[CE]  not  a  statement	36	None	replace
371	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  n.namespace);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  n.namespace);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  n.namespace);	  String    originalName    =    n.fullName(alias,    n.refs);    	non-compiled	[CE]  not  a  statement	36	None	replace
372	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  n.refs)+  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  n.refs)+  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  n.refs)+  1;	  String    originalName    =    n.fullName(alias,    n.refs);    	non-compiled	[CE]  not  a  statement	36	None	replace
373	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ": "  +  n.refs;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ": "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ": "  +  n.refs;	  String    originalName    =    n.originalName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	32	None	replace
374	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ": "  +  n.alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ": "  +  n.alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ": "  +  n.alias;	  String    originalName    =    n.originalName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	32	None	replace
375	[BUG]  [BUGGY]  String  originalName  =  n.alias()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;	  String    originalName    =    n.alias()    +    alias;    	non-compiled	[CE]  not  a  statement	54	None	replace
376	[BUG]  [BUGGY]  String  originalName  =  n.alias()  +  UNSAFE_NAMESPACE_WARNING;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  +  UNSAFE_NAMESPACE_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  +  UNSAFE_NAMESPACE_WARNING;	  String    originalName    =    n.alias()    +    alias;    	non-compiled	[CE]  not  a  statement	54	None	replace
377	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +(alias!=  null? " "  :  n.refs.fullName());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  +(alias!=  null? " "  :  n.refs.fullName());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +(alias!=  null? " "  :  n.refs.fullName());	  String    originalName    =    n.refs.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	8	None	replace
378	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +(alias!=  null?  null  :  n.refs.fullName());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  +(alias!=  null?  null  :  n.refs.fullName());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +(alias!=  null?  null  :  n.refs.fullName());	  String    originalName    =    n.refs.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	8	None	replace
379	[BUG]  [BUGGY]  String  originalName  =  n.names.substring(0,  n.names.length()  -  4);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.substring(0,  n.names.length()  -  4);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.substring(0,  n.names.length()  -  4);	  String    originalName    =    n.names.toString();    	non-compiled	[CE]  not  a  statement	21	None	replace
380	[BUG]  [BUGGY]  String  originalName  =  n.names.substring(0,  n.names.length()  -  3);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.substring(0,  n.names.length()  -  3);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.substring(0,  n.names.length()  -  3);	  String    originalName    =    n.names.toString();    	non-compiled	[CE]  not  a  statement	21	None	replace
381	[BUG]  [BUGGY]  String  originalName  =  n.refs!=  null?  null  :  n.refs.toString();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs!=  null?  null  :  n.refs.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs!=  null?  null  :  n.refs.toString();	  String    originalName    =    n.refs.toString();    	non-compiled	[CE]  not  a  statement	13	None	replace
382	[BUG]  [BUGGY]  String  originalName  =  n.refs  ==  null?  null  :  n.refs.toString();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs  ==  null?  null  :  n.refs.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs  ==  null?  null  :  n.refs.toString();	  String    originalName    =    n.refs.toString();    	non-compiled	[CE]  not  a  statement	13	None	replace
383	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()).trim();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()).trim();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.length()).trim();	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
384	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.type;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.type;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias,  n.type;	  String    originalName    =    n.fullName()    +    alias,    n.refs;    	non-compiled	[CE]  not  a  statement	16	None	replace
385	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.namespaces;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.namespaces;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias,  n.namespaces;	  String    originalName    =    n.fullName()    +    alias,    n.refs;    	non-compiled	[CE]  not  a  statement	16	None	replace
386	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.namespace;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.namespace;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias,  n.namespace;	  String    originalName    =    n.fullName()    +    alias,    n.refs;    	non-compiled	[CE]  not  a  statement	16	None	replace
387	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.parent;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.parent;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias,  n.parent;	  String    originalName    =    n.fullName()    +    alias,    n.refs;    	non-compiled	[CE]  not  a  statement	16	None	replace
388	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  +  UNSAFE_NAMESPACE_WARNING;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  +  UNSAFE_NAMESPACE_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  +  UNSAFE_NAMESPACE_WARNING;	  String    originalName    =    n.originalName()    +    alias;    	non-compiled	[CE]  not  a  statement	33	None	replace
389	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;	  String    originalName    =    n.originalName()    +    alias;    	non-compiled	[CE]  not  a  statement	33	None	replace
390	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  +(alias!=  null? " "  :  n.originalName());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  +(alias!=  null? " "  :  n.originalName());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  +(alias!=  null? " "  :  n.originalName());	  String    originalName    =    n.originalName()    +    alias;    	non-compiled	[CE]  not  a  statement	33	None	replace
391	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  +  UNSAFE_DECEMBER_NAMESPACE_WARNING;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  +  UNSAFE_DECEMBER_NAMESPACE_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  +  UNSAFE_DECEMBER_NAMESPACE_WARNING;	  String    originalName    =    n.originalName()    +    alias;    	non-compiled	[CE]  not  a  statement	33	None	replace
392	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_NAMESPACE_WARNING);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  UNSAFE_NAMESPACE_WARNING);	  String    originalName    =    n.fullName(alias,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	38	None	replace
393	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  nameMap);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  nameMap);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  nameMap);	  String    originalName    =    n.fullName(alias,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	38	None	replace
394	[BUG]  [BUGGY]  String  originalName  =  n.toString()  +  UNSAFE_NAMESPACE_WARNING;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  +  UNSAFE_NAMESPACE_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  +  UNSAFE_NAMESPACE_WARNING;	  String    originalName    =    n.toString()    +    alias;    	non-compiled	[CE]  not  a  statement	51	None	replace
395	[BUG]  [BUGGY]  String  originalName  =  n.toString()  +(alias!=  null? " "  :  n.toString());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  +(alias!=  null? " "  :  n.toString());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  +(alias!=  null? " "  :  n.toString());	  String    originalName    =    n.toString()    +    alias;    	non-compiled	[CE]  not  a  statement	51	None	replace
396	[BUG]  [BUGGY]  String  originalName  =  n.toString()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;	  String    originalName    =    n.toString()    +    alias;    	non-compiled	[CE]  not  a  statement	51	None	replace
397	[BUG]  [BUGGY]  String  originalName  =  n.toString()  +(alias  ==  null? " "  :  n.toString());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  +(alias  ==  null? " "  :  n.toString());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  +(alias  ==  null? " "  :  n.toString());	  String    originalName    =    n.toString()    +    alias;    	non-compiled	[CE]  not  a  statement	51	None	replace
398	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + "_ "  +  n.alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + "_ "  +  n.alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + "_ "  +  n.alias;	  String    originalName    =    n.refs.fullName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	12	None	replace
399	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + "_ "  +  n.name;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + "_ "  +  n.name;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + "_ "  +  n.name;	  String    originalName    =    n.refs.fullName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	12	None	replace
400	[BUG]  [BUGGY]  String  originalName  =  n.name.toUpperCase();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.toUpperCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.toUpperCase();	  String    originalName    =    n.name.alias();    	non-compiled	[CE]  not  a  statement	62	None	replace
401	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias),  compiler.toLowerCase();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias),  compiler.toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias),  compiler.toLowerCase();	  String    originalName    =    n.fullName(alias).toLowerCase();    	non-compiled	[CE]  not  a  statement	37	None	replace
402	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias).refsToLowerCase();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias).refsToLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias).refsToLowerCase();	  String    originalName    =    n.fullName(alias).toLowerCase();    	non-compiled	[CE]  not  a  statement	37	None	replace
403	[BUG]  [BUGGY]  String  originalName  =  n.name.parseURI(alias);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.parseURI(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.parseURI(alias);	  String    originalName    =    n.parseURI(alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
404	[BUG]  [BUGGY]  String  originalName  =  n.parse(alias);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.parse(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.parse(alias);	  String    originalName    =    n.parseURI(alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
405	[BUG]  [BUGGY]  String  originalName  =  n.parseURL(alias);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.parseURL(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.parseURL(alias);	  String    originalName    =    n.parseURI(alias);    	non-compiled	[CE]  not  a  statement	46	None	replace
406	[BUG]  [BUGGY]  String  originalName  =  n.names!=  null?  n.names.toString()  :  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names!=  null?  n.names.toString()  :  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names!=  null?  n.names.toString()  :  alias;	  String    originalName    =    n.names.toString();    	non-compiled	[CE]  not  a  statement	21	None	replace
407	[BUG]  [BUGGY]  String  originalName  =  n.names!=  null?  n.names.toString()  :  alias.toString();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names!=  null?  n.names.toString()  :  alias.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names!=  null?  n.names.toString()  :  alias.toString();	  String    originalName    =    n.names.toString();    	non-compiled	[CE]  not  a  statement	21	None	replace
408	[BUG]  [BUGGY]  String  originalName  =  n.names  ==  null?  n.names.toString()  :  n.names;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names  ==  null?  n.names.toString()  :  n.names;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names  ==  null?  n.names.toString()  :  n.names;	  String    originalName    =    n.names.toString();    	non-compiled	[CE]  not  a  statement	21	None	replace
409	[BUG]  [BUGGY]  String  originalName  =  n.names  ==  null?  n.names.toString()  :  n.names.toString();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names  ==  null?  n.names.toString()  :  n.names.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names  ==  null?  n.names.toString()  :  n.names.toString();	  String    originalName    =    n.names.toString();    	non-compiled	[CE]  not  a  statement	21	None	replace
410	[BUG]  [BUGGY]  String  originalName  =  n.name.getName();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.getName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.getName();	  String    originalName    =    n.getName();    	non-compiled	[CE]  not  a  statement	19	None	replace
411	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING,  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING,  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING,  alias;	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_REDEFINED_WARNING;    	non-compiled	[CE]  not  a  statement	57	None	replace
412	[BUG]  [BUGGY]  String  originalName  =  alias.substring(n.refs.length(),  n.originalName);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.substring(n.refs.length(),  n.originalName);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.substring(n.refs.length(),  n.originalName);	  String    originalName    =    alias.originalName();    	non-compiled	[CE]  not  a  statement	47	None	replace
413	[BUG]  [BUGGY]  String  originalName  =  alias.substring(0,  alias.length()  -  2);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.substring(0,  alias.length()  -  2);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.substring(0,  alias.length()  -  2);	  String    originalName    =    alias.originalName();    	non-compiled	[CE]  not  a  statement	47	None	replace
414	[BUG]  [BUGGY]  String  originalName  =  alias.substring(0,  alias.lastIndexOf('.'));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  alias.substring(0,  alias.lastIndexOf('.'));  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.substring(0,  alias.lastIndexOf('.'));	  String    originalName    =    alias.originalName();    	non-compiled	[CE]  not  a  statement	47	None	replace
415	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.alias.fullName());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.alias.fullName());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.alias.fullName());	  String    originalName    =    n.refs.substring(0,    n.refs.fullName());    	non-compiled	[CE]  not  a  statement	67	None	replace
416	[BUG]  [BUGGY]  String  originalName  =  n.alias  ==  null?  n.alias.toString()  :  n.toString();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias  ==  null?  n.alias.toString()  :  n.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias  ==  null?  n.alias.toString()  :  n.toString();	  String    originalName    =    n.alias.toString();    	non-compiled	[CE]  not  a  statement	22	None	replace
417	[BUG]  [BUGGY]  String  originalName  =  n.alias.substring(0,  n.alias.length()  -  2);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias.substring(0,  n.alias.length()  -  2);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias.substring(0,  n.alias.length()  -  2);	  String    originalName    =    n.alias.toString();    	non-compiled	[CE]  not  a  statement	22	None	replace
418	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ",   "  +  n.refs;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ",   "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ",   "  +  n.refs;	  String    originalName    =    n.originalName()    +   ",   "    +    alias;    	non-compiled	[CE]  not  a  statement	35	None	replace
419	[BUG]  [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.indexOf(alias));  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.substring(0,  n.name.indexOf(alias));  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.substring(0,  n.name.indexOf(alias));	  String    originalName    =    n.name.alias();    	non-compiled	[CE]  not  a  statement	62	None	replace
420	[BUG]  [BUGGY]  String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  :  n.alias();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  :  n.alias();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  :  n.alias();	  String    originalName    =    n.alias()    +    1;    	non-compiled	[CE]  not  a  statement	55	None	replace
421	[BUG]  [BUGGY]  String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  :  n.alias;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  :  n.alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  :  n.alias;	  String    originalName    =    n.alias()    +    1;    	non-compiled	[CE]  not  a  statement	55	None	replace
422	[BUG]  [BUGGY]  String  originalName  =  n.alias()  ||  n.alias()!=  null?  n.alias()  :  n.alias();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  ||  n.alias()!=  null?  n.alias()  :  n.alias();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  ||  n.alias()!=  null?  n.alias()  :  n.alias();	  String    originalName    =    n.alias()    +    1;    	non-compiled	[CE]  not  a  statement	55	None	replace
423	[BUG]  [BUGGY]  String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  +  1  :  n.alias();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  +  1  :  n.alias();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  +  1  :  n.alias();	  String    originalName    =    n.alias()    +    1;    	non-compiled	[CE]  not  a  statement	55	None	replace
424	[BUG]  [BUGGY]  String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  +  1  :  n.alias;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  +  1  :  n.alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  ||  n.alias()  ==  null?  n.alias()  +  1  :  n.alias;	  String    originalName    =    n.alias()    +    1;    	non-compiled	[CE]  not  a  statement	55	None	replace
425	[BUG]  [BUGGY]  Node  r  =  n.refs.cloneTree();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.cloneTree();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.cloneTree();	  Node    r    =    n.refs.getNext();    	non-compiled	[CE]  not  a  statement	28	None	replace
426	[BUG]  [BUGGY]  String  originalName  =  n.refs!=  null?  n.refs.toString()  :  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs!=  null?  n.refs.toString()  :  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs!=  null?  n.refs.toString()  :  alias;	  String    originalName    =    n.refs.toString();    	non-compiled	[CE]  not  a  statement	13	None	replace
427	[BUG]  [BUGGY]  String  originalName  =  n.refs!=  null?  n.refs.toString()  :  alias.toString();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs!=  null?  n.refs.toString()  :  alias.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs!=  null?  n.refs.toString()  :  alias.toString();	  String    originalName    =    n.refs.toString();    	non-compiled	[CE]  not  a  statement	13	None	replace
428	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getParent2();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.refs.getParent2();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs.getParent2();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	24	None	replace
429	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getParentRoot();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.refs.getParentRoot();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs.getParentRoot();	  Node    rParent    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	24	None	replace
430	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.indexOf(alias));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.indexOf(alias));  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.indexOf(alias));	  String    originalName    =    n.refs.alias();    	non-compiled	[CE]  not  a  statement	1	None	replace
431	[BUG]  [BUGGY]  String  originalName  =  n.getName()  +  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.getName()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.getName()  +  1;	  String    originalName    =    n.name()    +    1;    	non-compiled	[CE]  not  a  statement	43	None	replace
432	[BUG]  [BUGGY]  String  originalName  =  n.refs.getQualifiedName();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.getQualifiedName();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.getQualifiedName();	  String    originalName    =    n.refs.originalName();    	non-compiled	[CE]  not  a  statement	31	None	replace
433	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias.name);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.get(alias.name);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.get(alias.name);	  Node    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	27	None	replace
434	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias.toString());  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.get(alias.toString());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.get(alias.toString());	  Node    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	27	None	replace
435	[BUG]  [BUGGY]  n  =  n.name()  + ";n ";  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  n  =  n.name()  + ";n ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	n  =  n.name()  + ";n ";	  String    originalName    =    n.name()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	44	None	replace
436	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ";node: ";  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ";node: ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ";node: ";	  String    originalName    =    n.name()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	44	None	replace
437	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias.substring(0,  n.refs.length());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  alias.substring(0,  n.refs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias.substring(0,  n.refs.length());	  String    originalName    =    n.fullName()    +    alias.toLowerCase();    	non-compiled	[CE]  not  a  statement	15	None	replace
438	[BUG]  [BUGGY]  Node  rParent  =  n.node.getParent();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.node.getParent();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.node.getParent();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	64	None	replace
439	[BUG]  [BUGGY]  Node  rParent  =  n.parent.getParent();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.parent.getParent();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.parent.getParent();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	64	None	replace
440	[BUG]  [BUGGY]  Node  rParent  =  n.cloneTree();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  rParent  =  n.cloneTree();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.cloneTree();	  Node    rParent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	64	None	replace
441	[BUG]  [BUGGY]  String  originalName  =  n.externs!=  null?  n.externs.url()  :  alias;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.externs!=  null?  n.externs.url()  :  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.externs!=  null?  n.externs.url()  :  alias;	  String    originalName    =    n.externs.url();    	non-compiled	[CE]  not  a  statement	59	None	replace
442	[BUG]  [BUGGY]  String  originalName  =  n.externs.substring(0,  n.externs.indexOf(alias));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.externs.substring(0,  n.externs.indexOf(alias));  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.externs.substring(0,  n.externs.indexOf(alias));	  String    originalName    =    n.externs.url();    	non-compiled	[CE]  not  a  statement	59	None	replace
443	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_WARNING,  alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_WARNING,  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_WARNING,  alias;	  String    originalName    =    n.fullName()    +    UNSAFE_NAMESPACE_WARNING;    	non-compiled	[CE]  not  a  statement	56	None	replace
444	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias).toString();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Name  p  =  n.refs.get(alias).toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Name  p  =  n.refs.get(alias).toString();	  Name    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	26	None	replace
445	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias).trim();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Name  p  =  n.refs.get(alias).trim();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Name  p  =  n.refs.get(alias).trim();	  Name    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	26	None	replace
446	[BUG]  [BUGGY]  n.alias();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  n.alias();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	n.alias();	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
447	[BUG]  [BUGGY]  n  =  n.alias()  + ";n ";  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  n  =  n.alias()  + ";n ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	n  =  n.alias()  + ";n ";	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
448	[BUG]  [BUGGY]  n  =  n.alias();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  n  =  n.alias();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	n  =  n.alias();	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
449	[BUG]  [BUGGY]  n.alias  =  n.alias()  + ";n ";  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  n.alias  =  n.alias()  + ";n ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	n.alias  =  n.alias()  + ";n ";	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
450	[BUG]  [BUGGY]  NAMESPACE_REDEFINED_WARNING;  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  NAMESPACE_REDEFINED_WARNING;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	NAMESPACE_REDEFINED_WARNING;	  String    originalName    =    n.alias()    +   ";n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
451	[BUG]  [BUGGY]  Node  r  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.getFirstChild();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.getFirstChild();	  Node    r    =    n.getParent();    	non-compiled	[CE]  not  a  statement	66	None	replace
452	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ".   "  +  n.refs.toString();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ".   "  +  n.refs.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ".   "  +  n.refs.toString();	  String    originalName    =    n.alias()    +   ",   "    +    n.refs.toString();    	non-compiled	[CE]  not  a  statement	3	None	replace
453	[BUG]  [BUGGY]  String  originalName  =  n.toString()  + ": "  +  n.refs;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  + ": "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  + ": "  +  n.refs;	  String    originalName    =    n.toString()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	20	None	replace
454	[BUG]  [BUGGY]  String  originalName  =  n.toString()  + ": "  +  n.name;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  + ": "  +  n.name;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  + ": "  +  n.name;	  String    originalName    =    n.toString()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	20	None	replace
455	[BUG]  [BUGGY]  String  originalName  =  n.toString()  + ": "  +  n.alias;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  + ": "  +  n.alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  + ": "  +  n.alias;	  String    originalName    =    n.toString()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	20	None	replace
456	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ": "  +  n.name;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + ": "  +  n.name;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ": "  +  n.name;	  String    originalName    =    n.name()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	41	None	replace
457	[BUG]  [BUGGY]  String  originalName  =  n.url()  + ": "  +  n.refs;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  + ": "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  + ": "  +  n.refs;	  String    originalName    =    n.url()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	7	None	replace
458	[BUG]  [BUGGY]  String  originalName  =  n.url()  + ": "  +  n.name;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  + ": "  +  n.name;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  + ": "  +  n.name;	  String    originalName    =    n.url()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	7	None	replace
459	[BUG]  [BUGGY]  String  originalName  =  n.url()  + ": "  +  n.url;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.url()  + ": "  +  n.url;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  + ": "  +  n.url;	  String    originalName    =    n.url()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	7	None	replace
460	[BUG]  [BUGGY]  String  originalName  =  n.name.toString()  + "_ "  +  alias;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.toString()  + "_ "  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.toString()  + "_ "  +  alias;	  String    originalName    =    n.name.toString();    	non-compiled	[CE]  not  a  statement	23	None	replace
461	[BUG]  [BUGGY]  String  originalName  =  n.name()  + "_ "  +  n.alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + "_ "  +  n.alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + "_ "  +  n.alias;	  String    originalName    =    n.name()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	42	None	replace
462	[BUG]  [BUGGY]  String  originalName  =  n.name()  + "_ "  +  n.refs;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name()  + "_ "  +  n.refs;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + "_ "  +  n.refs;	  String    originalName    =    n.name()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	42	None	replace
463	[BUG]  [BUGGY]  String  originalName  =  n.name.fullName(alias,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.name.fullName(alias,  UNSAFE_THIS);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.fullName(alias,  UNSAFE_THIS);	  String    originalName    =    n.fullName(alias,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	38	None	replace
464	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  n.name);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  n.name);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  UNSAFE_THIS,  n.name);	  String    originalName    =    n.fullName(alias,    UNSAFE_THIS);    	non-compiled	[CE]  not  a  statement	38	None	replace
465	[BUG]  [BUGGY]  String  originalName  =  n.originalName.substring(0,  n.originalName.lastIndexOf(alias));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName.substring(0,  n.originalName.lastIndexOf(alias));  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName.substring(0,  n.originalName.lastIndexOf(alias));	  String    originalName    =    n.originalName.toLowerCase();    	non-compiled	[CE]  not  a  statement	61	None	replace
466	[BUG]  [BUGGY]  String  originalName  =  n.originalName.substring(0,  n.originalName.length());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName.substring(0,  n.originalName.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName.substring(0,  n.originalName.length());	  String    originalName    =    n.originalName.toLowerCase();    	non-compiled	[CE]  not  a  statement	61	None	replace
467	[BUG]  [BUGGY]  String  originalName  =  n.originalName.substring(0,  n.originalName.length()  -  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName.substring(0,  n.originalName.length()  -  1);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName.substring(0,  n.originalName.length()  -  1);	  String    originalName    =    n.originalName.toLowerCase();    	non-compiled	[CE]  not  a  statement	61	None	replace
468	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length())+  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length())+  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.length())+  1;	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
469	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.property;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.property;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": "  +  n.property;	  String    originalName    =    n.alias()    +   ":   "    +    n.refs;    	non-compiled	[CE]  not  a  statement	2	None	replace
470	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.url;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.url;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": "  +  n.url;	  String    originalName    =    n.alias()    +   ":   "    +    n.refs;    	non-compiled	[CE]  not  a  statement	2	None	replace
471	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.Refs.length());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.Refs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.Refs.length());	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
472	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.rfs.length());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.substring(0,  n.rfs.length());  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.rfs.length());	  String    originalName    =    n.refs.substring(0,    n.refs.length()    -    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
473	[BUG]  [BUGGY]  String  originalName  =  n.toString()  +  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.toString()  +  1;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  +  1;	  String    originalName    =    n.toString()    +    alias;    	non-compiled	[CE]  not  a  statement	51	None	replace
474	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + "_ "  +  n.alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + "_ "  +  n.alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + "_ "  +  n.alias;	  String    originalName    =    n.originalName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	34	None	replace
475	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  +  File.separatorChar  +  alias;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  +  File.separatorChar  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  +  File.separatorChar  +  alias;	  String    originalName    =    n.originalName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	34	None	replace
476	[BUG]  [BUGGY]  String  originalName  =  n.fullName().toLowerCase(alias);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName().toLowerCase(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName().toLowerCase(alias);	  String    originalName    =    n.fullName(alias).toLowerCase();    	non-compiled	[CE]  not  a  statement	37	None	replace
477	[BUG]  [BUGGY]  String  originalName  =  n.originalName;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName;	  String    originalName    =    n.originalName(alias);    	non-compiled	[CE]  not  a  statement	60	None	replace
478	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  DEFAULT_NAMESPACE_WARNING);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  DEFAULT_NAMESPACE_WARNING);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  DEFAULT_NAMESPACE_WARNING);	  String    originalName    =    n.fullName(alias,    null);    	non-compiled	[CE]  not  a  statement	53	None	replace
479	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  null,  n.globalNames);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.fullName(alias,  null,  n.globalNames);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  null,  n.globalNames);	  String    originalName    =    n.fullName(alias,    null);    	non-compiled	[CE]  not  a  statement	53	None	replace
480	[BUG]  [BUGGY]  String  originalName  =  n.names.substring(n.refs.length(),  alias);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.substring(n.refs.length(),  alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.substring(n.refs.length(),  alias);	  String    originalName    =    n.names.fullName(alias);    	non-compiled	[CE]  not  a  statement	39	None	replace
481	[BUG]  [BUGGY]  String  originalName  =  n.names.indexOf(alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.names.indexOf(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.indexOf(alias);	  String    originalName    =    n.names.fullName(alias);    	non-compiled	[CE]  not  a  statement	39	None	replace
482	[BUG]  [BUGGY]  Node  r  =  n.refs.getNameNode();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs.getNameNode();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.getNameNode();	  Node    r    =    n.refs.getParent();    	non-compiled	[CE]  not  a  statement	65	None	replace
483	[BUG]  [BUGGY]  String  originalName  =  n.refs.alias()  + ".: ";  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.alias()  + ".: ";  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.alias()  + ".: ";	  String    originalName    =    n.alias()    +   ":   ";    	non-compiled	[CE]  not  a  statement	5	None	replace
484	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +  '_'  +  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  +  '_'  +  alias;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +  '_'  +  alias;	  String    originalName    =    n.refs.fullName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	12	None	replace
485	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +  alias  + "_ "  +  n.name;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  +  alias  + "_ "  +  n.name;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +  alias  + "_ "  +  n.name;	  String    originalName    =    n.refs.fullName()    +   "_   "    +    alias;    	non-compiled	[CE]  not  a  statement	12	None	replace
486	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + ": "  +  n.url;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + ": "  +  n.url;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + ": "  +  n.url;	  String    originalName    =    n.refs.fullName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	11	None	replace
487	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + ": "  +  n.type;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.refs.fullName()  + ": "  +  n.type;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + ": "  +  n.type;	  String    originalName    =    n.refs.fullName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	11	None	replace
488	[BUG]  [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs.getFirstChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs.getFirstChild();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs!=  null?  n.refs.getFirstChild()  :  n.refs.getFirstChild();	  Node    r    =    n.refs.getFirstChild();    	non-compiled	[CE]  not  a  statement	25	None	replace
489	[BUG]  [BUGGY]  Node  p  =  n.refs.get(alias.originalName);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.get(alias.originalName);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.get(alias.originalName);	  Node    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	48	None	replace
490	[BUG]  [BUGGY]  Node  p  =  n.refs.get(alias.name);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Node  p  =  n.refs.get(alias.name);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.get(alias.name);	  Node    p    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	48	None	replace
491	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ": "  +  n.name;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ": "  +  n.name;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ": "  +  n.name;	  String    originalName    =    n.originalName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	32	None	replace
492	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ": "  +  n.url;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  + ": "  +  n.url;  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ": "  +  n.url;	  String    originalName    =    n.originalName()    +   ":   "    +    alias;    	non-compiled	[CE]  not  a  statement	32	None	replace
493	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(alias).toLowerCase();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Ref  r  =  n.refs.get(alias).toLowerCase();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.get(alias).toLowerCase();	  Ref    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	29	None	replace
494	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(alias).toString();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Ref  r  =  n.refs.get(alias).toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.get(alias).toString();	  Ref    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	29	None	replace
495	[BUG]  [BUGGY]  Ref  r  =  n.refs.find(alias);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  Ref  r  =  n.refs.find(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.find(alias);	  Ref    r    =    n.refs.get(alias);    	non-compiled	[CE]  not  a  statement	29	None	replace
496	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  +(alias!=  null?  n.originalName()  :  alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName()  +(alias!=  null?  n.originalName()  :  alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  +(alias!=  null?  n.originalName()  :  alias);	  String    originalName    =    n.originalName()    +    alias;    	non-compiled	[CE]  not  a  statement	33	None	replace
497	[BUG]  [BUGGY]  String  originalName  =  n.alias()  +  '.';  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.alias()  +  '.';  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  +  '.';	  String    originalName    =    n.alias()    +    alias;    	non-compiled	[CE]  not  a  statement	54	None	replace
498	[BUG]  [BUGGY]  String  originalName  =  n.originalName.toString();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.originalName.toString();  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName.toString();	  String    originalName    =    alias.toString();    	non-compiled	[CE]  not  a  statement	52	None	replace
499	[BUG]  [BUGGY]  String  originalName  =  n.idFromString(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {      [BUGGY]  String  originalName  =  n.idFromString(alias);  [BUGGY]      for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.idFromString(alias);	  String    originalName    =    alias.toString();    	non-compiled	[CE]  not  a  statement	52	None	replace
