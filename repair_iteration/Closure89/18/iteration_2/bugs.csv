bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  originalName  =  n.refs.alias();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.alias();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.alias();	  String    originalName    =    n.alias();    	non-compiled	[CE]  not  a  statement	6	None	replace
2	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.refs;  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.refs;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": "  +  n.refs;	  String    originalName    =    n.alias();    	non-compiled	[CE]  not  a  statement	6	None	replace
3	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ", "  +  n.refs.toString();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.alias()  + ", "  +  n.refs.toString();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ", "  +  n.refs.toString();	  String    originalName    =    n.alias();    	non-compiled	[CE]  not  a  statement	6	None	replace
4	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ";n ";  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.alias()  + ";n ";  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ";n ";	  String    originalName    =    n.alias();    	non-compiled	[CE]  not  a  statement	6	None	replace
5	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": ";  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.alias()  + ": ";  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": ";	  String    originalName    =    n.alias();    	non-compiled	[CE]  not  a  statement	6	None	replace
6	[BUG]  [BUGGY]  String  originalName  =  n.refs.url();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.url();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.url();	  String    originalName    =    n.url();    	non-compiled	[CE]  not  a  statement	8	None	replace
7	[BUG]  [BUGGY]  String  originalName  =  n.url()  + ": "  +  alias;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.url()  + ": "  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  + ": "  +  alias;	  String    originalName    =    n.url();    	non-compiled	[CE]  not  a  statement	8	None	replace
8	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  +  alias;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.fullName()  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  +  alias;	  String    originalName    =    n.refs.fullName();    	non-compiled	[CE]  not  a  statement	1	None	replace
9	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  -  1);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  -  1);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.length()  -  1);	  String    originalName    =    n.refs.fullName();    	non-compiled	[CE]  not  a  statement	1	None	replace
10	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName(alias);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.fullName(alias);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName(alias);	  String    originalName    =    n.refs.fullName();    	non-compiled	[CE]  not  a  statement	1	None	replace
11	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + ": "  +  alias;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.fullName()  + ": "  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + ": "  +  alias;	  String    originalName    =    n.refs.fullName();    	non-compiled	[CE]  not  a  statement	1	None	replace
12	[BUG]  [BUGGY]  String  originalName  =  n.refs.fullName()  + "_ "  +  alias;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.fullName()  + "_ "  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.fullName()  + "_ "  +  alias;	  String    originalName    =    n.refs.fullName();    	non-compiled	[CE]  not  a  statement	1	None	replace
13	[BUG]  [BUGGY]  String  originalName  =  n.refs.toString();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.toString();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.toString();	  String    originalName    =    n.refs.fullName();    	non-compiled	[CE]  not  a  statement	1	None	replace
14	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_THIS;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_THIS;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  UNSAFE_THIS;	  String    originalName    =    n.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	4	None	replace
15	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias.toLowerCase();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.fullName()  +  alias.toLowerCase();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias.toLowerCase();	  String    originalName    =    n.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	4	None	replace
16	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.refs;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.fullName()  +  alias,  n.refs;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  alias,  n.refs;	  String    originalName    =    n.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	4	None	replace
17	[BUG]  [BUGGY]  String  originalName  =  n.name()  +  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.name()  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  +  alias;	  String    originalName    =    n.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	4	None	replace
18	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  *  alias;  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.fullName()  *  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  *  alias;	  String    originalName    =    n.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	4	None	replace
19	[BUG]  [BUGGY]  String  originalName  =  n.getName();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.getName();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.getName();	  String    originalName    =    n.toString();    	non-compiled	[CE]  not  a  statement	5	None	replace
20	[BUG]  [BUGGY]  String  originalName  =  n.toString()  + ": "  +  alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.toString()  + ": "  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  + ": "  +  alias;	  String    originalName    =    n.toString();    	non-compiled	[CE]  not  a  statement	5	None	replace
21	[BUG]  [BUGGY]  String  originalName  =  n.names.toString();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.names.toString();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.toString();	  String    originalName    =    n.toString();    	non-compiled	[CE]  not  a  statement	5	None	replace
22	[BUG]  [BUGGY]  String  originalName  =  n.alias.toString();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.alias.toString();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias.toString();	  String    originalName    =    n.toString();    	non-compiled	[CE]  not  a  statement	5	None	replace
23	[BUG]  [BUGGY]  String  originalName  =  n.name.toString();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.name.toString();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.toString();	  String    originalName    =    n.toString();    	non-compiled	[CE]  not  a  statement	5	None	replace
24	[BUG]  [BUGGY]  Node  rParent  =  n.refs.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  Node  rParent  =  n.refs.getParent();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.refs.getParent();	      	non-compiled	[CE]  not  a  statement	7	None	replace
25	[BUG]  [BUGGY]  Node  r  =  n.refs.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  Node  r  =  n.refs.getFirstChild();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.getFirstChild();	      	non-compiled	[CE]  not  a  statement	7	None	replace
26	[BUG]  [BUGGY]  Name  p  =  n.refs.get(alias);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  Name  p  =  n.refs.get(alias);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Name  p  =  n.refs.get(alias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
27	[BUG]  [BUGGY]  Node  r  =  n.refs.get(alias);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  Node  r  =  n.refs.get(alias);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.get(alias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
28	[BUG]  [BUGGY]  Node  r  =  n.refs.getNext();  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  Node  r  =  n.refs.getNext();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.getNext();	      	non-compiled	[CE]  not  a  statement	7	None	replace
29	[BUG]  [BUGGY]  Ref  r  =  n.refs.get(alias);  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  Ref  r  =  n.refs.get(alias);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Ref  r  =  n.refs.get(alias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
30	[BUG]  [BUGGY]  Node  p  =  n.refs.getParent();  [CE]  not  a  statement  [FE]                                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  Node  p  =  n.refs.getParent();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.getParent();	      	non-compiled	[CE]  not  a  statement	7	None	replace
31	[BUG]  [BUGGY]  String  originalName  =  n.refs.originalName();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.originalName();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.originalName();	  String    originalName    =    n.originalName();    	non-compiled	[CE]  not  a  statement	3	None	replace
32	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ": "  +  alias;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.originalName()  + ": "  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ": "  +  alias;	  String    originalName    =    n.originalName();    	non-compiled	[CE]  not  a  statement	3	None	replace
33	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  +  alias;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.originalName()  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  +  alias;	  String    originalName    =    n.originalName();    	non-compiled	[CE]  not  a  statement	3	None	replace
34	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + "_ "  +  alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.originalName()  + "_ "  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + "_ "  +  alias;	  String    originalName    =    n.originalName();    	non-compiled	[CE]  not  a  statement	3	None	replace
35	[BUG]  [BUGGY]  String  originalName  =  n.originalName()  + ", "  +  alias;  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.originalName()  + ", "  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName()  + ", "  +  alias;	  String    originalName    =    n.originalName();    	non-compiled	[CE]  not  a  statement	3	None	replace
36	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  n.refs);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.fullName(alias,  n.refs);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  n.refs);	  String    originalName    =    n.fullName(alias);    	non-compiled	[CE]  not  a  statement	9	None	replace
37	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias).toLowerCase();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.fullName(alias).toLowerCase();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias).toLowerCase();	  String    originalName    =    n.fullName(alias);    	non-compiled	[CE]  not  a  statement	9	None	replace
38	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_THIS);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.fullName(alias,  UNSAFE_THIS);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  UNSAFE_THIS);	  String    originalName    =    n.fullName(alias);    	non-compiled	[CE]  not  a  statement	9	None	replace
39	[BUG]  [BUGGY]  String  originalName  =  n.names.fullName(alias);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.names.fullName(alias);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.names.fullName(alias);	  String    originalName    =    n.fullName(alias);    	non-compiled	[CE]  not  a  statement	9	None	replace
40	[BUG]  [BUGGY]  String  originalName  =  n.refs.name();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.name();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.name();	  String    originalName    =    n.name();    	non-compiled	[CE]  not  a  statement	2	None	replace
41	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ": "  +  alias;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.name()  + ": "  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ": "  +  alias;	  String    originalName    =    n.name();    	non-compiled	[CE]  not  a  statement	2	None	replace
42	[BUG]  [BUGGY]  String  originalName  =  n.name()  + "_ "  +  alias;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.name()  + "_ "  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + "_ "  +  alias;	  String    originalName    =    n.name();    	non-compiled	[CE]  not  a  statement	2	None	replace
43	[BUG]  [BUGGY]  String  originalName  =  n.name()  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.name()  +  1;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  +  1;	  String    originalName    =    n.name();    	non-compiled	[CE]  not  a  statement	2	None	replace
44	[BUG]  [BUGGY]  String  originalName  =  n.name()  + ";n ";  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.name()  + ";n ";  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name()  + ";n ";	  String    originalName    =    n.name();    	non-compiled	[CE]  not  a  statement	2	None	replace
45	[BUG]  [BUGGY]  String  originalName  =  n.url()  +  alias;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.url()  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.url()  +  alias;	  String    originalName    =    n.url();    	non-compiled	[CE]  not  a  statement	8	None	replace
46	[BUG]  [BUGGY]  String  originalName  =  n.parseURI(alias);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.parseURI(alias);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.parseURI(alias);	  String    originalName    =    n.url();    	non-compiled	[CE]  not  a  statement	8	None	replace
47	[BUG]  [BUGGY]  String  originalName  =  alias.originalName();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  alias.originalName();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.originalName();	  String    originalName    =    n.originalName();    	non-compiled	[CE]  not  a  statement	3	None	replace
48	[BUG]  [BUGGY]  Node  p  =  n.refs.get(alias);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  Node  p  =  n.refs.get(alias);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  p  =  n.refs.get(alias);	      	non-compiled	[CE]  not  a  statement	7	None	replace
49	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length());  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.length());	  String    originalName    =    n.refs.fullName();    	non-compiled	[CE]  not  a  statement	1	None	replace
50	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  -  2);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.length()  -  2);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.length()  -  2);	  String    originalName    =    n.refs.fullName();    	non-compiled	[CE]  not  a  statement	1	None	replace
51	[BUG]  [BUGGY]  String  originalName  =  n.toString()  +  alias;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.toString()  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.toString()  +  alias;	  String    originalName    =    n.toString();    	non-compiled	[CE]  not  a  statement	5	None	replace
52	[BUG]  [BUGGY]  String  originalName  =  alias.toString();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  alias.toString();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  alias.toString();	  String    originalName    =    n.toString();    	non-compiled	[CE]  not  a  statement	5	None	replace
53	[BUG]  [BUGGY]  String  originalName  =  n.fullName(alias,  null);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.fullName(alias,  null);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName(alias,  null);	  String    originalName    =    n.fullName(alias);    	non-compiled	[CE]  not  a  statement	9	None	replace
54	[BUG]  [BUGGY]  String  originalName  =  n.alias()  +  alias;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.alias()  +  alias;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  +  alias;	  String    originalName    =    n.alias();    	non-compiled	[CE]  not  a  statement	6	None	replace
55	[BUG]  [BUGGY]  String  originalName  =  n.alias()  +  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.alias()  +  1;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  +  1;	  String    originalName    =    n.alias();    	non-compiled	[CE]  not  a  statement	6	None	replace
56	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_WARNING;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_WARNING;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_WARNING;	  String    originalName    =    n.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	4	None	replace
57	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  UNSAFE_NAMESPACE_REDEFINED_WARNING;	  String    originalName    =    n.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	4	None	replace
58	[BUG]  [BUGGY]  String  originalName  =  n.fullName()  +  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.fullName()  +  1;  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.fullName()  +  1;	  String    originalName    =    n.fullName()    +    alias;    	non-compiled	[CE]  not  a  statement	4	None	replace
59	[BUG]  [BUGGY]  String  originalName  =  n.externs.url();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.externs.url();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.externs.url();	  String    originalName    =    n.url();    	non-compiled	[CE]  not  a  statement	8	None	replace
60	[BUG]  [BUGGY]  String  originalName  =  n.originalName(alias);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.originalName(alias);  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName(alias);	  String    originalName    =    n.originalName();    	non-compiled	[CE]  not  a  statement	3	None	replace
61	[BUG]  [BUGGY]  String  originalName  =  n.originalName.toLowerCase();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.originalName.toLowerCase();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.originalName.toLowerCase();	  String    originalName    =    n.alias();    	non-compiled	[CE]  not  a  statement	6	None	replace
62	[BUG]  [BUGGY]  String  originalName  =  n.name.alias();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.name.alias();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.name.alias();	  String    originalName    =    n.alias();    	non-compiled	[CE]  not  a  statement	6	None	replace
63	[BUG]  [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.refs.toString();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.alias()  + ": "  +  n.refs.toString();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.alias()  + ": "  +  n.refs.toString();	  String    originalName    =    n.alias();    	non-compiled	[CE]  not  a  statement	6	None	replace
64	[BUG]  [BUGGY]  Node  rParent  =  n.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  Node  rParent  =  n.getParent();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  rParent  =  n.getParent();	      	non-compiled	[CE]  not  a  statement	7	None	replace
65	[BUG]  [BUGGY]  Node  r  =  n.refs.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  Node  r  =  n.refs.getParent();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.refs.getParent();	      	non-compiled	[CE]  not  a  statement	7	None	replace
66	[BUG]  [BUGGY]  Node  r  =  n.getParent();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  Node  r  =  n.getParent();  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	Node  r  =  n.getParent();	      	non-compiled	[CE]  not  a  statement	7	None	replace
67	[BUG]  [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.fullName());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  void  flattenReferencesTo(Name  n,  String  alias)  {  if  (n.refs  !=  null)  {    [BUGGY]  String  originalName  =  n.refs.substring(0,  n.refs.fullName());  [BUGGY]    for  (Ref  r  :  n.refs)  {  Node  rParent  =  r.node.getParent();      if  (!NodeUtil.isObjectLitKey(r.node,  rParent)  &&  (r.getTwin()  ==  null  ||  r.isSet()))  {  [CLASS]  CollapseProperties  1  [METHOD]  flattenReferencesTo  [RETURN_TYPE]  void  Name  n  String  alias  [VARIABLES]  AbstractCompiler  compiler  Ref  r  boolean  collapsePropertiesOnExternTypes  initialized  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  Node  rParent  List  globalNames  refs  String  alias  originalName  Map  nameMap  Name  n  p  	projects/Closure89/src/com/google/javascript/jscomp/CollapseProperties.java	0.24618298195866545	318	318	8	replace	String  originalName  =  n.refs.substring(0,  n.refs.fullName());	  String    originalName    =    n.refs.fullName();    	non-compiled	[CE]  not  a  statement	1	None	replace
